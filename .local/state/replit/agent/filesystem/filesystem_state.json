{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"fix-awb-numbers.js":{"content":"// Script to fix AWB numbers in scientific notation format\nconst { drizzle } = require('drizzle-orm/neon-http');\nconst { neon } = require('@neondatabase/serverless');\nconst { orders } = require('./shared/schema.ts');\nconst { eq, like, or } = require('drizzle-orm');\n\n// Function to convert scientific notation to proper number\nfunction convertScientificToNumber(scientificStr) {\n  if (!scientificStr || typeof scientificStr !== 'string') return scientificStr;\n  \n  // Check if it's in scientific notation\n  if (!scientificStr.includes('E+') && !scientificStr.includes('e+')) {\n    return scientificStr;\n  }\n  \n  try {\n    const num = parseFloat(scientificStr);\n    if (isNaN(num)) return scientificStr;\n    \n    // Convert to proper format\n    return Math.floor(num).toString();\n  } catch (error) {\n    console.error('Error converting:', scientificStr, error);\n    return scientificStr;\n  }\n}\n\nasync function fixAwbNumbers() {\n  const sql = neon(process.env.DATABASE_URL);\n  const db = drizzle(sql);\n  \n  console.log('üîç Finding orders with scientific notation AWB numbers...');\n  \n  // Get all orders with scientific notation AWB numbers\n  const problematicOrders = await db\n    .select({ id: orders.id, awbNo: orders.awbNo })\n    .from(orders)\n    .where(or(\n      like(orders.awbNo, '%E+%'),\n      like(orders.awbNo, '%e+%')\n    ));\n  \n  console.log(`üìä Found ${problematicOrders.length} orders with scientific notation AWB numbers`);\n  \n  if (problematicOrders.length === 0) {\n    console.log('‚úÖ No AWB numbers need fixing!');\n    return;\n  }\n  \n  // Process in batches\n  const BATCH_SIZE = 100;\n  let fixedCount = 0;\n  \n  for (let i = 0; i < problematicOrders.length; i += BATCH_SIZE) {\n    const batch = problematicOrders.slice(i, i + BATCH_SIZE);\n    \n    console.log(`üîß Processing batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(problematicOrders.length/BATCH_SIZE)}`);\n    \n    for (const order of batch) {\n      const originalAwb = order.awbNo;\n      const fixedAwb = convertScientificToNumber(originalAwb);\n      \n      if (originalAwb !== fixedAwb) {\n        try {\n          await db\n            .update(orders)\n            .set({ awbNo: fixedAwb })\n            .where(eq(orders.id, order.id));\n          \n          console.log(`‚úÖ Fixed: ${originalAwb} -> ${fixedAwb}`);\n          fixedCount++;\n        } catch (error) {\n          console.error(`‚ùå Error fixing order ${order.id}:`, error);\n        }\n      }\n    }\n  }\n  \n  console.log(`üéâ Successfully fixed ${fixedCount} AWB numbers!`);\n}\n\n// Test the conversion function\nconsole.log('=== Testing AWB Number Conversion ===');\nconst testCases = [\n  '1.53664E+14',\n  '3.62929E+11', \n  '3.45727E+13',\n  '34572714087543',\n  'ABC123'\n];\n\ntestCases.forEach(test => {\n  console.log(`${test} -> ${convertScientificToNumber(test)}`);\n});\n\n// Run the fix\nfixAwbNumbers().catch(console.error);","size_bytes":2862},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an Accounts Payable & Reconciliation Assistant application designed to process vendor payout data and generate reconciliation reports. The system handles CSV/Excel file uploads, column mapping, price/HSN management, and automated payout calculations. It provides a comprehensive dashboard for managing vendor relationships, order processing, and financial reconciliation workflows.\n\n**Latest Update (Aug 26, 2025):** Permanent File Processing Error Fix - Resolved \"Processing Failed\" issues with comprehensive error handling and hybrid storage strategy. Implemented smart file storage (memory for large files >10MB, database for small files), enhanced error messages for file session expiry, added 5-minute upload timeout with abort handling, file size warnings for large uploads, and automatic cleanup of temporary files. Users now receive clear guidance when files expire due to server restarts instead of generic error messages.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing with dedicated pages:\n  - `/` - Main Dashboard with payout calculator and quick stats\n  - `/data-management` - File upload, column mapping, and data transparency\n  - `/price-management` - Price & HSN management with bulk operations\n  - `/reports` - Reports generation and final payout summaries\n  - `/supplier-performance` - Supplier metrics and performance analytics\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js REST API server\n- **Language**: TypeScript with ES modules\n- **File Processing**: Multer for multipart file uploads with memory storage\n- **Data Processing**: Custom CSV/Excel parsing and normalization logic\n- **Storage Interface**: Abstract storage layer with PostgreSQL database implementation via Drizzle ORM (IStorage interface)\n\n## Database Design\n- **Database**: PostgreSQL with Neon serverless\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema**: Comprehensive relational model including:\n  - Users and authentication\n  - File uploads with metadata\n  - Suppliers and products\n  - Price entries with date ranges\n  - Orders with status tracking\n  - Reconciliation logs\n- **Migration Strategy**: Drizzle Kit for schema migrations\n- **Storage Implementation**: DrizzleStorage class replaces MemStorage for persistent data\n\n## Data Processing Pipeline\n- **Upload Flow**: File upload ‚Üí CSV/Excel parsing ‚Üí column mapping ‚Üí data normalization\n- **Reconciliation Logic**: Price/HSN lookup by supplier and date range ‚Üí payout calculation ‚Üí report generation\n- **Status Management**: Order status filtering (cancelled orders excluded from payouts)\n- **Currency Support**: Multi-currency handling with INR as default\n- **Payout Calculation Engine**: Real-time supplier payout calculation based on:\n  - Delivered/Completed order status filtering\n  - Date range selection (DeliveredDate or OrderDate basis)\n  - Unit price lookup from price entries\n  - Line amount calculation (Qty √ó Unit Price)\n  - Multi-format CSV export (Summary, Lines, Cancelled, Missing Prices)\n\n## File Upload System\n- **Storage**: Memory-based file storage with size limits (10MB)\n- **Formats**: CSV and Excel file support with MIME type validation\n- **Processing**: Real-time data preview and column detection\n- **Security**: File type restrictions and upload size limits\n\n## External Dependencies\n\n- **Database**: Neon Database (PostgreSQL serverless)\n- **Cloud Storage**: Google Cloud Storage integration for file persistence\n- **File Upload**: Uppy.js dashboard for enhanced file upload UI with AWS S3 support\n- **Component Library**: Radix UI for accessible component primitives\n- **Development Tools**: Replit-specific plugins for development environment integration\n- **Styling**: Google Fonts integration (Architects Daughter, DM Sans, Fira Code, Geist Mono)","size_bytes":4288},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/data-processor.ts":{"content":"import * as XLSX from 'xlsx';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream';\n\ninterface ProcessedData {\n  headers: string[];\n  data: Record<string, string>[];\n}\n\nexport async function processCSVData(buffer: Buffer, mimeType: string, filename?: string): Promise<ProcessedData> {\n  console.log(`üìÇ Processing file: ${mimeType}, size: ${buffer.length} bytes, filename: ${filename}`);\n  \n  try {\n    // Determine file type by MIME type and/or file extension\n    const fileExtension = filename?.toLowerCase().split('.').pop() || '';\n    \n    if (mimeType.includes('csv') || mimeType.includes('text') || \n        fileExtension === 'csv' || \n        (mimeType === 'application/octet-stream' && fileExtension === 'csv')) {\n      return await processCSVFile(buffer);\n    } else if (mimeType.includes('excel') || mimeType.includes('spreadsheet') || \n               mimeType.includes('openxmlformats') ||\n               fileExtension === 'xlsx' || fileExtension === 'xls') {\n      return await processExcelFile(buffer);\n    } else {\n      throw new Error(`Unsupported file type: ${mimeType} (extension: ${fileExtension})`);\n    }\n  } catch (error) {\n    console.error('File processing error:', error);\n    throw new Error(`Failed to process file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nasync function processCSVFile(buffer: Buffer): Promise<ProcessedData> {\n  console.log('Processing CSV file...');\n  \n  return new Promise((resolve, reject) => {\n    const results: Record<string, string>[] = [];\n    let headers: string[] = [];\n    \n    const stream = Readable.from(buffer.toString());\n    \n    stream\n      .pipe(csv())\n      .on('headers', (headerList: string[]) => {\n        headers = headerList;\n        console.log(`üìã CSV Headers detected: ${headers.length}`);\n      })\n      .on('data', (data: Record<string, string>) => {\n        // Ensure all values are strings and handle AWB numbers properly\n        const cleanData: Record<string, string> = {};\n        Object.keys(data).forEach(key => {\n          let value = data[key] || '';\n          // Special handling for AWB/tracking numbers to preserve precision\n          if (key.toLowerCase().includes('waybill') || \n              key.toLowerCase().includes('awb') || \n              key.toLowerCase().includes('tracking')) {\n            // Keep original string format to preserve large numbers\n            cleanData[key] = String(value).trim();\n          } else {\n            cleanData[key] = String(value).trim();\n          }\n        });\n        results.push(cleanData);\n      })\n      .on('end', () => {\n        console.log(`‚úÖ CSV processing complete: ${headers.length} columns, ${results.length} rows`);\n        resolve({ headers, data: results });\n      })\n      .on('error', (error) => {\n        console.error('CSV processing error:', error);\n        reject(error);\n      });\n  });\n}\n\nasync function processExcelFile(buffer: Buffer): Promise<ProcessedData> {\n  console.log('üîÑ Processing Excel file...');\n  \n  try {\n    // Read workbook with optimal settings for header and data extraction\n    const workbook = XLSX.read(buffer, { \n      type: 'buffer',\n      cellText: true,      // Parse text values\n      cellFormula: false,  // Don't parse formulas\n      cellHTML: false,     // Don't parse HTML\n      cellDates: true,     // Parse dates\n      dense: false,        // Use standard format for better cell access\n      sheetStubs: false    // Don't include empty cells as stubs\n    });\n\n    // Get the first worksheet\n    const sheetName = workbook.SheetNames[0];\n    if (!sheetName) {\n      throw new Error('No worksheets found in Excel file');\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    if (!worksheet) {\n      throw new Error('Failed to read worksheet');\n    }\n\n    // Get worksheet range\n    const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1');\n    console.log(`üìä Excel Range: ${worksheet['!ref']}, Rows: ${range.e.r + 1}, Columns: ${range.e.c + 1}`);\n\n    // Extract data using XLSX's built-in JSON converter\n    const jsonData = XLSX.utils.sheet_to_json(worksheet, { \n      header: 1,           // Return array of arrays (first array becomes headers)\n      defval: '',          // Default value for empty cells\n      blankrows: false,    // Skip blank rows\n      raw: false,          // Don't use raw values, use formatted values\n      dateNF: 'yyyy-mm-dd' // Date format\n    }) as string[][];\n\n    if (jsonData.length === 0) {\n      throw new Error('No data found in Excel file');\n    }\n\n    // Extract headers from first row\n    const rawHeaders = jsonData[0] || [];\n    const headers = rawHeaders.map((h, index) => {\n      const header = h ? String(h).trim() : '';\n      return header || `Column_${index + 1}`;\n    });\n\n    console.log(`üìã Headers extracted: ${headers.length}`);\n    console.log(`üìù Headers:`, headers.slice(0, 10));\n\n    // Process data rows (skip header row)\n    const dataRows = jsonData.slice(1);\n    const processedData: Record<string, string>[] = [];\n\n    dataRows.forEach((row, rowIndex) => {\n      const rowData: Record<string, string> = {};\n      \n      headers.forEach((header, colIndex) => {\n        let cellValue = row[colIndex] || '';\n        \n        // Special handling for AWB/tracking numbers to preserve large numbers\n        if (header.toLowerCase().includes('waybill') || \n            header.toLowerCase().includes('awb') || \n            header.toLowerCase().includes('tracking') ||\n            header.toLowerCase().includes('orderid')) {\n          \n          // Preserve original format for tracking numbers\n          if (cellValue && typeof cellValue === 'number' && cellValue >= 1e10) {\n            // Large number - preserve as string to avoid scientific notation\n            cellValue = String(cellValue);\n          }\n        }\n        \n        rowData[header] = String(cellValue).trim();\n      });\n      \n      processedData.push(rowData);\n    });\n\n    console.log(`‚úÖ Excel processing complete: ${headers.length} columns, ${processedData.length} data rows`);\n    console.log(`üîç Sample data:`, processedData[0] ? Object.keys(processedData[0]).slice(0, 5) : 'No data');\n\n    return { \n      headers, \n      data: processedData \n    };\n\n  } catch (error) {\n    console.error('‚ùå Excel processing failed:', error);\n    throw new Error(`Excel processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n// Data normalization function\nexport function normalizeData(rawData: Record<string, string>[], mapping: any): any[] {\n  console.log(`üîÑ Normalizing ${rawData.length} records with mapping...`);\n  \n  const normalized = rawData.map((row, index) => {\n    // Map the data according to column mapping\n    const normalizedRow = {\n      supplierName: row[mapping.supplierName] || '',\n      awbNo: row[mapping.awbNo] || '',\n      productName: row[mapping.productName] || '',\n      status: row[mapping.status] || '',\n      courier: row[mapping.courier] || null,\n      orderAccount: row[mapping.orderAccount] || null,\n      qty: row[mapping.qty] ? parseInt(row[mapping.qty]) || 1 : 1,\n      currency: row[mapping.currency] || 'INR',\n      channelOrderDate: row[mapping.channelOrderDate] ? new Date(row[mapping.channelOrderDate]) : null,\n      orderDate: row[mapping.orderDate] ? new Date(row[mapping.orderDate]) : null,\n      deliveredDate: row[mapping.deliveredDate] ? new Date(row[mapping.deliveredDate]) : null,\n      rtsDate: row[mapping.rtsDate] ? new Date(row[mapping.rtsDate]) : null,\n      orderAmount: row[mapping.orderAmount] || '0',\n      totalAmount: row[mapping.totalAmount] || '0',\n      codAmount: row[mapping.codAmount] || '0',\n      weight: row[mapping.weight] || '0',\n      dimensions: row[mapping.dimensions] || '',\n      pincode: row[mapping.pincode] || '',\n      city: row[mapping.city] || '',\n      state: row[mapping.state] || '',\n      consigneeName: row[mapping.consigneeName] || '',\n      consigneeContact: row[mapping.consigneeContact] || '',\n      address: row[mapping.address] || '',\n      previousStatus: null\n    };\n    \n    return normalizedRow;\n  });\n  \n  console.log(`‚úÖ Normalized ${normalized.length} records`);\n  return normalized;\n}\n\n// Payout calculation function\nexport function calculatePayouts(data: any[], dateFilter?: { start: Date; end: Date }) {\n  console.log(`üßÆ Calculating payouts for ${data.length} records...`);\n  \n  const payouts = new Map<string, {\n    supplier: string;\n    totalOrders: number;\n    deliveredOrders: number;\n    totalAmount: number;\n    orders: any[];\n  }>();\n  \n  data.forEach(order => {\n    // Filter by date if provided\n    if (dateFilter && order.deliveredDate) {\n      if (order.deliveredDate < dateFilter.start || order.deliveredDate > dateFilter.end) {\n        return;\n      }\n    }\n    \n    // Only include delivered orders for payout\n    if (!order.status || !order.status.toLowerCase().includes('delivered')) {\n      return;\n    }\n    \n    const supplier = order.supplierName || 'Unknown';\n    \n    if (!payouts.has(supplier)) {\n      payouts.set(supplier, {\n        supplier,\n        totalOrders: 0,\n        deliveredOrders: 0,\n        totalAmount: 0,\n        orders: []\n      });\n    }\n    \n    const payout = payouts.get(supplier)!;\n    payout.totalOrders++;\n    payout.deliveredOrders++;\n    payout.totalAmount += parseFloat(order.totalAmount || '0');\n    payout.orders.push(order);\n  });\n  \n  console.log(`‚úÖ Calculated payouts for ${payouts.size} suppliers`);\n  return Array.from(payouts.values());\n}\n\n// Report generation function\nexport function generateReports(payouts: any[]) {\n  console.log(`üìä Generating reports for ${payouts.length} suppliers...`);\n  \n  const summary = {\n    totalSuppliers: payouts.length,\n    totalOrders: payouts.reduce((sum, p) => sum + p.totalOrders, 0),\n    totalDeliveredOrders: payouts.reduce((sum, p) => sum + p.deliveredOrders, 0),\n    totalPayoutAmount: payouts.reduce((sum, p) => sum + p.totalAmount, 0)\n  };\n  \n  const detailed = payouts.map(payout => ({\n    supplier: payout.supplier,\n    orders: payout.totalOrders,\n    delivered: payout.deliveredOrders,\n    amount: payout.totalAmount,\n    averageOrderValue: payout.totalOrders > 0 ? payout.totalAmount / payout.totalOrders : 0\n  }));\n  \n  console.log(`‚úÖ Generated reports: ${summary.totalSuppliers} suppliers, ${summary.totalOrders} orders`);\n  \n  return {\n    summary,\n    detailed,\n    raw: payouts\n  };\n}\n\n// Export for use in other modules\nexport { ProcessedData };","size_bytes":10478},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is not set\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });","size_bytes":331},"server/drizzle-storage.ts":{"content":"import { type User, type InsertUser, type UploadedFile, type InsertUploadedFile, type Supplier, type InsertSupplier, type PriceEntry, type InsertPriceEntry, type Order, type InsertOrder, type ReconciliationLog, type InsertReconciliationLog } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { users, uploadedFiles, suppliers, priceEntries, orders, reconciliationLog } from \"@shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { IStorage } from \"./storage\";\n\nexport class DrizzleStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // File methods\n  async createUploadedFile(file: InsertUploadedFile): Promise<UploadedFile> {\n    const result = await db.insert(uploadedFiles).values(file).returning();\n    return result[0];\n  }\n\n  async getUploadedFile(id: string): Promise<UploadedFile | undefined> {\n    const result = await db.select().from(uploadedFiles).where(eq(uploadedFiles.id, id));\n    return result[0];\n  }\n\n  async updateUploadedFile(id: string, updates: Partial<UploadedFile>): Promise<UploadedFile | undefined> {\n    const result = await db.update(uploadedFiles).set(updates).where(eq(uploadedFiles.id, id)).returning();\n    return result[0];\n  }\n\n  async getAllUploadedFiles(): Promise<UploadedFile[]> {\n    return await db.select().from(uploadedFiles);\n  }\n\n  // Supplier methods\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const result = await db.insert(suppliers).values(supplier).returning();\n    return result[0];\n  }\n\n  async getSupplier(id: string): Promise<Supplier | undefined> {\n    const result = await db.select().from(suppliers).where(eq(suppliers.id, id));\n    return result[0];\n  }\n\n  async getSupplierByName(name: string): Promise<Supplier | undefined> {\n    const result = await db.select().from(suppliers).where(eq(suppliers.name, name));\n    return result[0];\n  }\n\n  async getAllSuppliers(): Promise<Supplier[]> {\n    return await db.select().from(suppliers);\n  }\n\n  async updateSupplierOrderAccount(id: string, orderAccount: string | null): Promise<Supplier | undefined> {\n    const result = await db.update(suppliers)\n      .set({ orderAccount })\n      .where(eq(suppliers.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateSupplier(id: string, updates: Partial<Supplier>): Promise<Supplier | undefined> {\n    const result = await db.update(suppliers)\n      .set(updates)\n      .where(eq(suppliers.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Price entry methods\n  async createPriceEntry(priceEntry: InsertPriceEntry): Promise<PriceEntry> {\n    const result = await db.insert(priceEntries).values(priceEntry).returning();\n    return result[0];\n  }\n\n  async getPriceEntry(id: string): Promise<PriceEntry | undefined> {\n    const result = await db.select().from(priceEntries).where(eq(priceEntries.id, id));\n    return result[0];\n  }\n\n  async getAllPriceEntries(): Promise<PriceEntry[]> {\n    return await db.select().from(priceEntries);\n  }\n\n  async getPriceEntriesBySupplier(supplierId: string): Promise<PriceEntry[]> {\n    return await db.select().from(priceEntries).where(eq(priceEntries.supplierId, supplierId));\n  }\n\n  async updatePriceEntry(id: string, updates: Partial<PriceEntry>): Promise<PriceEntry | undefined> {\n    console.log('DrizzleStorage.updatePriceEntry called with:', { id, updates });\n    \n    // CRITICAL FIX: Ensure proper date conversion at storage layer\n    const cleanUpdates = { ...updates };\n    \n    // Handle effectiveFrom date conversion\n    if (cleanUpdates.effectiveFrom !== undefined) {\n      if (typeof cleanUpdates.effectiveFrom === 'string') {\n        cleanUpdates.effectiveFrom = new Date(cleanUpdates.effectiveFrom);\n      } else if (cleanUpdates.effectiveFrom && typeof cleanUpdates.effectiveFrom === 'object' && !('toISOString' in cleanUpdates.effectiveFrom)) {\n        // If it's an object but not a Date, try to convert it\n        cleanUpdates.effectiveFrom = new Date(cleanUpdates.effectiveFrom as any);\n      }\n    }\n    \n    // Handle effectiveTo date conversion\n    if (cleanUpdates.effectiveTo !== undefined) {\n      if (cleanUpdates.effectiveTo === null || cleanUpdates.effectiveTo === '') {\n        cleanUpdates.effectiveTo = null;\n      } else if (typeof cleanUpdates.effectiveTo === 'string') {\n        cleanUpdates.effectiveTo = new Date(cleanUpdates.effectiveTo);\n      } else if (cleanUpdates.effectiveTo && typeof cleanUpdates.effectiveTo === 'object' && !('toISOString' in cleanUpdates.effectiveTo)) {\n        // If it's an object but not a Date, try to convert it\n        cleanUpdates.effectiveTo = new Date(cleanUpdates.effectiveTo as any);\n      }\n    }\n    \n    // Remove any fields that are undefined to prevent Drizzle issues\n    Object.keys(cleanUpdates).forEach(key => {\n      if ((cleanUpdates as any)[key] === undefined) {\n        delete (cleanUpdates as any)[key];\n      }\n    });\n    \n    console.log('Cleaned updates for Drizzle:', cleanUpdates);\n    \n    const result = await db.update(priceEntries).set(cleanUpdates).where(eq(priceEntries.id, id)).returning();\n    return result[0];\n  }\n\n  async deletePriceEntry(id: string): Promise<boolean> {\n    const result = await db.delete(priceEntries).where(eq(priceEntries.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Order methods\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const result = await db.insert(orders).values(order).returning();\n    return result[0];\n  }\n\n  async createOrders(orderList: InsertOrder[]): Promise<Order[]> {\n    if (orderList.length === 0) return [];\n    const result = await db.insert(orders).values(orderList).returning();\n    return result;\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id));\n    return result[0];\n  }\n\n  async getOrderByAwbNo(awbNo: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.awbNo, awbNo));\n    return result[0];\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    // Use limit for better performance on large datasets\n    return await db.select().from(orders).limit(200000);\n  }\n\n  async getOrderCount(): Promise<number> {\n    const result = await db.select({ count: sql`count(*)::int` }).from(orders);\n    return result[0]?.count || 0;\n  }\n\n  async getSupplierCount(): Promise<number> {\n    const result = await db.select({ count: sql`count(*)::int` }).from(suppliers);\n    return result[0]?.count || 0;\n  }\n\n  async getMissingPriceCount(): Promise<number> {\n    const result = await db.execute(sql`\n      SELECT COUNT(DISTINCT o.supplier_id || '-' || o.product_name) as count\n      FROM orders o\n      LEFT JOIN price_entries p ON o.supplier_id = p.supplier_id AND o.product_name = p.product_name\n      WHERE p.id IS NULL\n    `);\n    return parseInt(result.rows[0]?.count as string) || 0;\n  }\n\n  async getTotalPayoutAmount(): Promise<number> {\n    const result = await db.execute(sql`\n      SELECT COALESCE(SUM(o.line_amount), 0) as total\n      FROM orders o\n      WHERE o.status IN ('Delivered', 'Completed')\n        AND o.line_amount IS NOT NULL\n    `);\n    return parseFloat(result.rows[0]?.total as string) || 0;\n  }\n\n  async clearAllOrders(): Promise<void> {\n    await db.delete(orders);\n  }\n\n  async getOrdersByFileId(fileId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.fileId, fileId));\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const result = await db.update(orders).set(updates).where(eq(orders.id, id)).returning();\n    return result[0];\n  }\n\n  // Reconciliation log methods\n  async createReconciliationLog(log: InsertReconciliationLog): Promise<ReconciliationLog> {\n    const result = await db.insert(reconciliationLog).values(log).returning();\n    return result[0];\n  }\n\n  async getAllReconciliationLogs(): Promise<ReconciliationLog[]> {\n    return await db.select().from(reconciliationLog);\n  }\n\n  async getReconciliationLogsByAwbNo(awbNo: string): Promise<ReconciliationLog[]> {\n    return await db.select().from(reconciliationLog).where(eq(reconciliationLog.awbNo, awbNo));\n  }\n}","size_bytes":8662},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Add global error handlers\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Global error handler for API routes - must be before Vite\n  app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n    if (req.path.startsWith('/api/')) {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      return res.status(status).json({ error: message });\n    }\n    next(err);\n  });\n\n  // API 404 handler - must be before Vite to catch unmatched API routes\n  app.use(\"/api\", (req: Request, res: Response, next: NextFunction) => {\n    if (req.path.startsWith('/api/')) {\n      return res.status(404).json({ \n        error: \"API endpoint not found\",\n        path: req.path,\n        method: req.method \n      });\n    }\n    next();\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2802},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport * as XLSX from 'xlsx';\nimport { DrizzleStorage } from \"./drizzle-storage\";\nimport { columnMappingSchema, insertPriceEntrySchema, reportFiltersSchema } from \"@shared/schema\";\nimport { processCSVData, normalizeData, calculatePayouts, generateReports } from \"./data-processor\";\n\n// Global type for temporary file storage\ndeclare global {\n  var tempFileData: Map<string, Record<string, string>[]> | undefined;\n  var tempFileHeaders: Map<string, string[]> | undefined;\n  var tempFileMetadata: Map<string, any> | undefined;\n}\n\n// Helper function to generate supplier product ID\nfunction generateSupplierProductId(supplierName: string, productName: string): string {\n  // Simple concatenation as per user requirement\n  return `${supplierName}${productName}`;\n}\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 200 * 1024 * 1024 }, // 200MB limit\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      'text/csv', \n      'application/csv',\n      'text/plain', // Some systems send CSV as text/plain\n      'application/octet-stream', // Generic binary - check extension\n      'application/vnd.ms-excel', \n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ];\n    \n    // Also check file extension as backup\n    const fileExtension = file.originalname?.toLowerCase().split('.').pop();\n    const allowedExtensions = ['csv', 'xls', 'xlsx'];\n    \n    if (allowedTypes.includes(file.mimetype) || allowedExtensions.includes(fileExtension || '')) {\n      cb(null, true);\n    } else {\n      console.log(`‚ùå File rejected: ${file.originalname}, MIME: ${file.mimetype}, Extension: ${fileExtension}`);\n      cb(new Error(`Only CSV and Excel files are allowed. Got: ${file.mimetype}`));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const storage = new DrizzleStorage();\n\n  // GST Portal API integration for fetching company details\n  app.get(\"/api/gst-details/:gstin\", async (req, res) => {\n    try {\n      const { gstin } = req.params;\n      \n      if (!gstin || gstin.length !== 15) {\n        return res.status(400).json({ error: \"Invalid GSTIN format\" });\n      }\n\n      // Using a public GST API service (you can replace with preferred provider)\n      const gstApiUrl = `https://sheet.gstincheck.co.in/check/${gstin}`;\n      \n      const response = await fetch(gstApiUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n\n      if (!response.ok) {\n        // Fallback to basic state detection if API fails\n        const stateCodeMap: { [key: string]: string } = {\n          '01': 'Jammu and Kashmir', '02': 'Himachal Pradesh', '03': 'Punjab', '04': 'Chandigarh',\n          '05': 'Uttarakhand', '06': 'Haryana', '07': 'Delhi', '08': 'Rajasthan',\n          '09': 'Uttar Pradesh', '10': 'Bihar', '11': 'Sikkim', '12': 'Arunachal Pradesh',\n          '13': 'Nagaland', '14': 'Manipur', '15': 'Mizoram', '16': 'Tripura',\n          '17': 'Meghalaya', '18': 'Assam', '19': 'West Bengal', '20': 'Jharkhand',\n          '21': 'Odisha', '22': 'Chhattisgarh', '23': 'Madhya Pradesh', '24': 'Gujarat',\n          '25': 'Daman and Diu', '26': 'Dadra and Nagar Haveli', '27': 'Maharashtra',\n          '28': 'Andhra Pradesh', '29': 'Karnataka', '30': 'Goa', '31': 'Lakshadweep',\n          '32': 'Kerala', '33': 'Tamil Nadu', '34': 'Puducherry', '35': 'Andaman and Nicobar Islands',\n          '36': 'Telangana', '37': 'Andhra Pradesh', '38': 'Ladakh'\n        };\n        \n        const stateCode = gstin.substring(0, 2);\n        const placeOfSupply = stateCodeMap[stateCode] || '';\n        \n        return res.json({\n          gstin,\n          tradeName: '',\n          legalName: '',\n          address: '',\n          placeOfSupply,\n          status: 'Active',\n          source: 'fallback'\n        });\n      }\n\n      const data = await response.json();\n      \n      // Transform the API response to our expected format\n      const gstDetails = {\n        gstin: gstin,\n        tradeName: data.data?.tradeNam || data.tradeName || '',\n        legalName: data.data?.lgnm || data.legalName || '',\n        address: data.data?.pradr?.addr?.bno ? \n          `${data.data.pradr.addr.bno || ''} ${data.data.pradr.addr.st || ''} ${data.data.pradr.addr.loc || ''} ${data.data.pradr.addr.dst || ''} ${data.data.pradr.addr.stcd || ''}`.trim() :\n          data.address || '',\n        placeOfSupply: data.data?.pradr?.addr?.stcd || data.state || '',\n        status: data.data?.sts || data.status || 'Active',\n        source: 'api'\n      };\n\n      console.log(`‚úÖ GST Details fetched for ${gstin}:`, gstDetails);\n      res.json(gstDetails);\n\n    } catch (error) {\n      console.error('GST API error:', error);\n      \n      // Fallback response with basic state detection\n      const stateCodeMap: { [key: string]: string } = {\n        '01': 'Jammu and Kashmir', '02': 'Himachal Pradesh', '03': 'Punjab', '04': 'Chandigarh',\n        '05': 'Uttarakhand', '06': 'Haryana', '07': 'Delhi', '08': 'Rajasthan',\n        '09': 'Uttar Pradesh', '10': 'Bihar', '11': 'Sikkim', '12': 'Arunachal Pradesh',\n        '13': 'Nagaland', '14': 'Manipur', '15': 'Mizoram', '16': 'Tripura',\n        '17': 'Meghalaya', '18': 'Assam', '19': 'West Bengal', '20': 'Jharkhand',\n        '21': 'Odisha', '22': 'Chhattisgarh', '23': 'Madhya Pradesh', '24': 'Gujarat',\n        '25': 'Daman and Diu', '26': 'Dadra and Nagar Haveli', '27': 'Maharashtra',\n        '28': 'Andhra Pradesh', '29': 'Karnataka', '30': 'Goa', '31': 'Lakshadweep',\n        '32': 'Kerala', '33': 'Tamil Nadu', '34': 'Puducherry', '35': 'Andaman and Nicobar Islands',\n        '36': 'Telangana', '37': 'Andhra Pradesh', '38': 'Ladakh'\n      };\n      \n      const stateCode = req.params.gstin?.substring(0, 2) || '';\n      const placeOfSupply = stateCodeMap[stateCode] || '';\n      \n      res.json({\n        gstin: req.params.gstin,\n        tradeName: '',\n        legalName: '',\n        address: '',\n        placeOfSupply,\n        status: 'Unknown',\n        source: 'fallback',\n        error: 'Failed to fetch from GST portal'\n      });\n    }\n  });\n\n  // Upload GST data for suppliers\n  app.post(\"/api/upload-gst-data\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      console.log(`üìÑ Processing GST data file: ${req.file.originalname}`);\n\n      let data: any[][] = [];\n      const fileExtension = req.file.originalname.toLowerCase().split('.').pop();\n\n      // Parse Excel file\n      if (fileExtension === 'xlsx' || fileExtension === 'xls') {\n        const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        data = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: false });\n      }\n      // Parse CSV file\n      else if (fileExtension === 'csv') {\n        const csvText = req.file.buffer.toString('utf8');\n        const lines = csvText.split('\\n').filter(line => line.trim());\n        data = lines.map(line => {\n          // Simple CSV parsing (handles basic cases)\n          const values = [];\n          let current = '';\n          let inQuotes = false;\n          \n          for (let i = 0; i < line.length; i++) {\n            const char = line[i];\n            if (char === '\"') {\n              inQuotes = !inQuotes;\n            } else if (char === ',' && !inQuotes) {\n              values.push(current.trim());\n              current = '';\n            } else {\n              current += char;\n            }\n          }\n          values.push(current.trim());\n          return values;\n        });\n      } else {\n        return res.status(400).json({ error: \"Unsupported file format\" });\n      }\n\n      if (data.length < 2) {\n        return res.status(400).json({ error: \"File must contain header row and data\" });\n      }\n\n      const headers = data[0].map((h: string) => h?.toLowerCase()?.trim() || '');\n      const dataRows = data.slice(1);\n\n      // Find column indices\n      const gstinIndex = headers.findIndex((h: string) => \n        h.includes('gstin') || h.includes('gst') || h.includes('tin')\n      );\n      const tradeNameIndex = headers.findIndex((h: string) => \n        h.includes('trade') || h.includes('company') || h.includes('name')\n      );\n      const addressIndex = headers.findIndex((h: string) => \n        h.includes('address') || h.includes('addr')\n      );\n      const placeOfSupplyIndex = headers.findIndex((h: string) => \n        h.includes('place') || h.includes('state') || h.includes('supply')\n      );\n\n      if (gstinIndex === -1) {\n        return res.status(400).json({ error: \"GSTIN column not found. Expected columns: GSTIN, Trade Name, Address\" });\n      }\n\n      let updatedCount = 0;\n\n      // Process each row\n      for (const row of dataRows) {\n        const gstin = row[gstinIndex]?.toString()?.trim();\n        const tradeName = row[tradeNameIndex]?.toString()?.trim() || '';\n        const address = row[addressIndex]?.toString()?.trim() || '';\n        const placeOfSupply = row[placeOfSupplyIndex]?.toString()?.trim() || '';\n\n        if (!gstin || gstin.length !== 15) continue;\n\n        // Find supplier by name (assuming first word of trade name matches supplier name)\n        const supplierName = tradeName.split(' ')[0];\n        const suppliers = await storage.getAllSuppliers();\n        const matchingSupplier = suppliers.find((s: any) => \n          s.name.toLowerCase().includes(supplierName.toLowerCase()) ||\n          supplierName.toLowerCase().includes(s.name.toLowerCase())\n        );\n\n        if (matchingSupplier) {\n          // Update supplier with GST data\n          await storage.updateSupplier(matchingSupplier.id, {\n            gstin: gstin,\n            tradeName: tradeName || matchingSupplier.name,\n            address: address,\n            placeOfSupply: placeOfSupply,\n            shipToAddress: address // Use same address for shipping\n          });\n          updatedCount++;\n        } else {\n          // Create new supplier if trade name doesn't match existing\n          await storage.createSupplier({\n            name: tradeName || `Supplier_${gstin}`,\n            gstin: gstin,\n            tradeName: tradeName,\n            address: address,\n            placeOfSupply: placeOfSupply,\n            shipToAddress: address\n          });\n          updatedCount++;\n        }\n      }\n\n      console.log(`‚úÖ Updated/created ${updatedCount} suppliers with GST data`);\n\n      res.json({\n        success: true,\n        count: updatedCount,\n        message: `Successfully processed GST data for ${updatedCount} suppliers`\n      });\n\n    } catch (error) {\n      console.error('GST data upload error:', error);\n      res.status(500).json({ error: 'Failed to process GST data file' });\n    }\n  });\n  \n  // Get all uploaded files\n  app.get(\"/api/files\", async (req, res) => {\n    try {\n      const files = await storage.getAllUploadedFiles();\n      res.json(files);\n    } catch (error) {\n      console.error(\"Get files error:\", error);\n      res.status(500).json({ error: \"Failed to get uploaded files\" });\n    }\n  });\n\n  // Get all uploaded files (alternative endpoint)\n  app.get(\"/api/uploaded-files\", async (req, res) => {\n    try {\n      const files = await storage.getAllUploadedFiles();\n      res.json(files);\n    } catch (error) {\n      console.error(\"Get uploaded files error:\", error);\n      res.status(500).json({ error: \"Failed to get uploaded files\" });\n    }\n  });\n\n  // Get file data/preview endpoint\n  app.get(\"/api/file-data\", async (req, res) => {\n    try {\n      // Return temporary file data if available\n      if (global.tempFileData && global.tempFileData.size > 0) {\n        const firstFileData = Array.from(global.tempFileData.values())[0];\n        return res.json({ \n          success: true, \n          data: firstFileData.slice(0, 100), // Return first 100 rows for preview\n          totalRows: firstFileData.length \n        });\n      }\n      res.json({ success: false, message: \"No file data available\" });\n    } catch (error) {\n      console.error(\"Get file data error:\", error);\n      res.status(500).json({ error: \"Failed to get file data\" });\n    }\n  });\n\n  // Get specific file preview\n  app.get(\"/api/files/:id/preview\", async (req, res) => {\n    try {\n      const fileId = req.params.id;\n      \n      // Check if we have temp data for this file\n      if (global.tempFileData && global.tempFileData.has(fileId)) {\n        const fileData = global.tempFileData.get(fileId);\n        return res.json({\n          success: true,\n          data: fileData.slice(0, 50), // Return first 50 rows for preview\n          totalRows: fileData.length\n        });\n      }\n      \n      // Try to get file info from database\n      const files = await storage.getAllUploadedFiles();\n      const file = files.find(f => f.id === fileId);\n      \n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      \n      res.json({\n        success: true,\n        fileInfo: file,\n        message: \"File found but data not available in memory\"\n      });\n    } catch (error) {\n      console.error(\"Get file preview error:\", error);\n      res.status(500).json({ error: \"Failed to get file preview\" });\n    }\n  });\n\n  // File upload endpoint - only accept POST requests\n  app.get(\"/api/files/upload\", (req, res) => {\n    res.status(405).json({ \n      error: \"Method Not Allowed\", \n      message: \"File upload endpoint only accepts POST requests with multipart/form-data\",\n      expectedMethod: \"POST\"\n    });\n  });\n\n  app.post(\"/api/files/upload\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ \n          error: \"No file uploaded\",\n          message: \"Please select a CSV or Excel file to upload\"\n        });\n      }\n\n      console.log(`üì§ Starting file upload: ${req.file.originalname} (${req.file.size} bytes)`);\n\n      // Validate file type\n      const validMimeTypes = [\n        'text/csv',\n        'application/csv',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      ];\n\n      if (!validMimeTypes.includes(req.file.mimetype)) {\n        return res.status(400).json({ \n          error: \"Invalid file type\",\n          message: \"Please upload a CSV or Excel (.xlsx) file\"\n        });\n      }\n\n      // Process the file\n      const rawData = await processCSVData(req.file.buffer, req.file.mimetype, req.file.originalname);\n\n      if (!rawData.headers || rawData.headers.length === 0) {\n        return res.status(400).json({ \n          error: \"No headers found\",\n          message: \"The file must contain column headers in the first row\"\n        });\n      }\n\n      if (!rawData.data || rawData.data.length === 0) {\n        return res.status(400).json({ \n          error: \"No data found\",\n          message: \"The file must contain data rows\"\n        });\n      }\n\n      // Smart storage strategy: Use memory for large files, database for small files\n      const fileId = `temp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      const FILE_SIZE_THRESHOLD = 10 * 1024 * 1024; // 10MB threshold\n      const isLargeFile = req.file.size > FILE_SIZE_THRESHOLD;\n      \n      // Create uploaded file object\n      const uploadedFile = {\n        id: fileId,\n        filename: req.file.originalname,\n        originalName: req.file.originalname,\n        size: req.file.size,\n        mimeType: req.file.mimetype,\n        data: isLargeFile ? null : rawData.data, // Only store small files in database\n        columnMapping: null,\n        processedData: null,\n        summary: {\n          rowCount: rawData.data.length,\n          columnCount: rawData.headers.length,\n          uploadedAt: new Date().toISOString(),\n          headers: rawData.headers,\n          isLargeFile,\n          storageType: isLargeFile ? 'memory' : 'database'\n        },\n        uploadedAt: new Date()\n      };\n\n      // For large files: only store metadata in database, data in memory\n      // For small files: store everything in database for persistence\n      try {\n        await storage.createUploadedFile(uploadedFile);\n        console.log(`üíæ File metadata stored in database (${isLargeFile ? 'large file - data in memory only' : 'small file - full data in database'})`);\n      } catch (error) {\n        if (error.message?.includes('too large')) {\n          console.log(`üìÅ File too large for database, using memory-only storage`);\n          // Fallback to memory-only for very large files\n          uploadedFile.summary.storageType = 'memory-only';\n        } else {\n          throw error; // Re-throw other errors\n        }\n      }\n      \n      // Always keep in memory for immediate access\n      if (!global.tempFileData) {\n        global.tempFileData = new Map();\n      }\n      if (!global.tempFileHeaders) {\n        global.tempFileHeaders = new Map();\n      }\n      if (!global.tempFileMetadata) {\n        global.tempFileMetadata = new Map();\n      }\n      \n      global.tempFileData.set(fileId, rawData.data);\n      global.tempFileHeaders.set(fileId, rawData.headers);\n      global.tempFileMetadata.set(fileId, uploadedFile);\n\n      console.log(`‚úÖ File upload successful:`);\n      console.log(`üìÅ File: ${uploadedFile.filename}`);\n      console.log(`üìè Size: ${uploadedFile.size} bytes (${(uploadedFile.size / (1024 * 1024)).toFixed(1)}MB)`);\n      console.log(`üìã Headers: ${rawData.headers.length}`);\n      console.log(`üì¶ Data rows: ${rawData.data.length}`);\n      console.log(`üîë Generated File ID: ${fileId}`);\n      console.log(`üíæ Storage strategy: ${uploadedFile.summary.storageType}`);\n      console.log(`üîç In tempFileMetadata: ${global.tempFileMetadata?.has(fileId) ? 'YES' : 'NO'}`);\n\n      // Return success response with storage information\n      res.json({ \n        success: true,\n        fileId: uploadedFile.id,\n        filename: uploadedFile.filename,\n        size: uploadedFile.size,\n        headers: rawData.headers,\n        rowCount: rawData.data.length,\n        headerCount: rawData.headers.length,\n        preview: rawData.data.slice(0, 3), // First 3 rows for preview\n        storageType: uploadedFile.summary.storageType,\n        isLargeFile: uploadedFile.summary.isLargeFile\n      });\n\n    } catch (error) {\n      console.error(\"‚ùå File upload error:\", error);\n      \n      // Return detailed error information\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      \n      res.status(500).json({ \n        error: \"Failed to upload file\",\n        message: errorMessage,\n        details: \"Please check that your file is a valid CSV or Excel file with headers in the first row\"\n      });\n    }\n  });\n\n  // Column mapping endpoint\n  app.post(\"/api/files/:fileId/mapping\", async (req, res) => {\n    try {\n      const { fileId } = req.params;\n      \n      // Simple validation - just check if mapping exists\n      if (!req.body || typeof req.body !== 'object') {\n        return res.status(400).json({ error: \"Invalid column mapping\" });\n      }\n      \n      const mapping = req.body; // Use mapping directly without strict validation\n      \n      console.log(`üîç Looking for file with ID: ${fileId}`);\n      console.log(`üìÇ Available temp files:`, global.tempFileMetadata ? Array.from(global.tempFileMetadata.keys()) : 'No temp files');\n      \n      // Try to get file from memory first, then database\n      let file = global.tempFileMetadata?.get(fileId);\n      \n      if (!file) {\n        console.log(`‚ö†Ô∏è File ${fileId} not found in memory, checking database...`);\n        // Fallback to database for smaller files\n        file = await storage.getUploadedFile(fileId);\n        if (!file) {\n          console.log(`‚ùå File ${fileId} not found in database either`);\n          if (fileId.startsWith('temp-')) {\n            return res.status(410).json({ \n              error: \"File session expired\", \n              message: \"Your uploaded file is no longer available. This happens when the server restarts. Please re-upload your file.\",\n              action: \"reupload\"\n            });\n          }\n          return res.status(404).json({ error: \"File not found\", fileId });\n        }\n        // Update file with column mapping in database\n        await storage.updateUploadedFile(fileId, {\n          columnMapping: mapping\n        });\n      } else {\n        console.log(`‚úÖ File ${fileId} found in memory, updating mapping...`);\n        // Update file with column mapping in memory\n        file.columnMapping = mapping;\n        global.tempFileMetadata?.set(fileId, file);\n      }\n\n      res.json({ success: true, mapping });\n    } catch (error) {\n      console.error(\"Column mapping error:\", error);\n      res.status(400).json({ error: \"Invalid column mapping\" });\n    }\n  });\n\n  // Process data endpoint\n  app.post(\"/api/files/:fileId/process\", async (req, res) => {\n    try {\n      const { fileId } = req.params;\n      \n      // Try to get file from memory first, then database\n      let file = global.tempFileMetadata?.get(fileId);\n      \n      if (!file) {\n        // Fallback to database for smaller files\n        file = await storage.getUploadedFile(fileId);\n        if (!file || !file.columnMapping) {\n          return res.status(404).json({ error: \"File not found or mapping not set\" });\n        }\n      }\n      \n      if (!file.columnMapping) {\n        return res.status(400).json({ error: \"Column mapping not set\" });\n      }\n\n      // Get data from memory first, then fallback to database\n      let rawData = global.tempFileData?.get(fileId) || [];\n      \n      // If no data in memory, get from database (works for both temp and regular files)\n      if (rawData.length === 0) {\n        rawData = file.data || [];\n        console.log(`üìã Retrieved ${rawData.length} records from database for file ${fileId}`);\n        \n        // Store back in memory for faster access\n        if (rawData.length > 0) {\n          if (!global.tempFileData) {\n            global.tempFileData = new Map();\n          }\n          global.tempFileData.set(fileId, rawData);\n        }\n      }\n      \n      console.log(`Processing ${rawData.length} records with mapping:`, file.columnMapping);\n      \n      if (rawData.length === 0) {\n        console.log(`‚ö†Ô∏è No data found for file ${fileId}`);\n        const storageType = file.summary?.storageType || 'unknown';\n        let errorMessage = \"Your uploaded file data is no longer available. Please re-upload your file and process it immediately.\";\n        \n        if (storageType === 'memory' || storageType === 'memory-only') {\n          errorMessage = \"Your large file data was stored in memory and is no longer available due to server restart. For large files (>10MB), please re-upload and process immediately after upload to avoid this issue.\";\n        }\n        \n        return res.status(410).json({\n          error: \"File data not available\",\n          message: errorMessage,\n          action: \"reupload\",\n          storageType\n        });\n      }\n      \n      // ENHANCED DEBUG: Check unique pickup warehouses in raw data BEFORE filtering\n      const mapping = file.columnMapping;\n      const uniquePickupWarehouses = new Set();\n      const warehouseFrequency = new Map();\n      \n      console.log(`üîç DEBUG MODE ENABLED - Column Mapping Analysis:`);\n      console.log(`üìã Supplier Name Column: \"${mapping.supplierName}\"`);\n      console.log(`üìã Product Name Column: \"${mapping.productName}\"`);\n      console.log(`üìã Status Column: \"${mapping.status}\"`);\n      \n      rawData.forEach((row, index) => {\n        const supplierValue = row[mapping.supplierName];\n        if (supplierValue) {\n          uniquePickupWarehouses.add(supplierValue);\n          warehouseFrequency.set(supplierValue, (warehouseFrequency.get(supplierValue) || 0) + 1);\n        }\n        \n        // Show first 5 rows for debugging\n        if (index < 5) {\n          console.log(`üîç Row ${index + 1} Debug:`, {\n            supplier: supplierValue,\n            product: row[mapping.productName],\n            status: row[mapping.status],\n            awb: row[mapping.awbNo]\n          });\n        }\n      });\n      \n      console.log(`üè™ TOTAL Unique pickup warehouses in raw data: ${uniquePickupWarehouses.size}`);\n      console.log(`üì¶ All pickup warehouses:`, Array.from(uniquePickupWarehouses));\n      \n      // Show frequency distribution\n      const sortedFrequency = Array.from(warehouseFrequency.entries())\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 10);\n      console.log(`üìä Top 10 warehouse frequency:`, sortedFrequency);\n\n      const normalizedData = normalizeData(rawData, file.columnMapping);\n      \n      // Separate cancelled orders\n      const cancelledOrders = normalizedData.filter(row => row.status?.toLowerCase() === 'cancelled');\n      const validOrders = normalizedData.filter(row => row.status?.toLowerCase() !== 'cancelled');\n\n      // OPTIMIZED PROCESSING: Pre-create all unique suppliers first\n      const uniqueSuppliers = new Set(validOrders.map(row => row.supplierName));\n      const supplierMap = new Map();\n      \n      console.log(`üì¶ Creating ${uniqueSuppliers.size} unique suppliers...`);\n      for (const supplierName of uniqueSuppliers) {\n        let supplier = await storage.getSupplierByName(supplierName);\n        if (!supplier) {\n          supplier = await storage.createSupplier({ name: supplierName });\n        }\n        supplierMap.set(supplierName, supplier);\n      }\n      console.log(`‚úÖ Suppliers created. Processing ${validOrders.length} orders in batches...`);\n      \n      // After filtering debug\n      console.log(`üìä After filtering: ${validOrders.length} valid orders, ${cancelledOrders.length} cancelled`);\n      console.log(`üîç Normalized data supplier distribution:`, \n        validOrders.reduce((acc, order) => {\n          acc[order.supplierName] = (acc[order.supplierName] || 0) + 1;\n          return acc;\n        }, {})\n      );\n\n      // Initialize progress tracking\n      global.processingProgress = global.processingProgress || new Map();\n      const totalBatches = Math.ceil(validOrders.length / 1000);\n      global.processingProgress.set(fileId, {\n        status: 'processing',\n        currentBatch: 0,\n        totalBatches,\n        totalRecords: validOrders.length,\n        processedRecords: 0,\n        percentage: 0,\n        message: 'Starting data processing...'\n      });\n      \n      // Process in smaller batches to avoid stack overflow\n      const BATCH_SIZE = 1000;\n      const createdOrders = [];\n      \n      for (let i = 0; i < validOrders.length; i += BATCH_SIZE) {\n        const batch = validOrders.slice(i, i + BATCH_SIZE);\n        const batchNum = Math.floor(i/BATCH_SIZE) + 1;\n        \n        // Update progress\n        global.processingProgress.set(fileId, {\n          status: 'processing',\n          currentBatch: batchNum,\n          totalBatches,\n          totalRecords: validOrders.length,\n          processedRecords: i,\n          percentage: Math.round((i / validOrders.length) * 100),\n          message: `Processing batch ${batchNum} of ${totalBatches}...`\n        });\n        \n        // Fast batch preparation using map instead of loop\n        const ordersToCreate = batch.map(row => ({\n          awbNo: row.awbNo,\n          supplierId: supplierMap.get(row.supplierName)!.id,\n          productName: row.productName,\n          courier: row.courier,\n          qty: parseInt(row.qty || '1'),\n          currency: row.currency || 'INR',\n          status: row.status,\n          orderAccount: row.orderAccount, // Extract order account from the uploaded data\n          channelOrderDate: row.channelOrderDate ? new Date(row.channelOrderDate) : null,\n          orderDate: row.orderDate ? new Date(row.orderDate) : null,\n          deliveredDate: row.deliveredDate ? new Date(row.deliveredDate) : null,\n          rtsDate: row.rtsDate ? new Date(row.rtsDate) : null,\n          fileId: fileId.startsWith('temp-') ? null : fileId,\n          unitPrice: null,\n          lineAmount: null,\n          hsn: null,\n          previousStatus: null\n        }));\n\n        try {\n          const batchResults = await storage.createOrders(ordersToCreate);\n          createdOrders.push(...batchResults);\n          console.log(`‚ö° Batch ${batchNum}/${totalBatches} - ${batchResults.length} orders saved`);\n        } catch (error) {\n          console.error(`‚ùå Error in batch ${Math.floor(i/BATCH_SIZE) + 1}:`, error);\n        }\n      }\n      \n      // Mark processing as complete\n      if (!global.processingProgress) {\n        global.processingProgress = new Map();\n      }\n      global.processingProgress.set(fileId, {\n        status: 'completed',\n        currentBatch: totalBatches,\n        totalBatches,\n        totalRecords: validOrders.length,\n        processedRecords: validOrders.length,\n        percentage: 100,\n        message: `Processing complete! ${createdOrders.length} orders created.`\n      });\n      \n      console.log(`üéâ Processing complete! Total orders created: ${createdOrders.length}`)\n\n      // Generate summary\n      const summary = {\n        totalRecords: rawData.length,\n        validOrders: validOrders.length,\n        cancelledOrders: cancelledOrders.length,\n        deliveredOrders: validOrders.filter(row => row.status?.toLowerCase() === 'delivered').length,\n        uniqueSuppliers: supplierMap.size,\n        ordersCreated: createdOrders.length,\n        processingDate: new Date().toISOString()\n      };\n\n      // Update file with processed data and summary\n      await storage.updateUploadedFile(fileId, {\n        processedData: null, // Don't store large data\n        summary\n      });\n\n      // Clear temporary data after processing (but keep database record for reference)\n      global.tempFileData?.delete(fileId);\n      \n      // For temp files, schedule cleanup after 1 hour\n      if (fileId.startsWith('temp-')) {\n        setTimeout(async () => {\n          try {\n            console.log(`üßπ Cleaning up temporary file: ${fileId}`);\n            await storage.deleteUploadedFile(fileId);\n          } catch (error) {\n            console.error('Error cleaning up temp file:', error);\n          }\n        }, 60 * 60 * 1000); // 1 hour\n      }\n      \n      // Clean up progress after a delay to allow frontend to fetch final status\n      setTimeout(() => {\n        global.processingProgress?.delete(fileId);\n      }, 10000);\n\n      res.json({\n        success: true,\n        summary,\n        cancelledOrders,\n        orderIds: createdOrders.map(o => o.id)\n      });\n    } catch (error) {\n      console.error(\"Data processing error:\", error);\n      \n      // Set error status in progress tracking\n      if (!global.processingProgress) {\n        global.processingProgress = new Map();\n      }\n      global.processingProgress.set(fileId, {\n        status: 'error',\n        currentBatch: 0,\n        totalBatches: 0,\n        totalRecords: 0,\n        processedRecords: 0,\n        percentage: 0,\n        message: 'Processing failed due to an error',\n        errorMessage: error instanceof Error ? error.message : 'Unknown error occurred'\n      });\n      \n      res.status(500).json({ \n        error: \"Failed to process data\",\n        message: error instanceof Error ? error.message : 'Unknown error occurred'\n      });\n    }\n  });\n\n  // Price/HSN endpoints\n  app.get(\"/api/price-entries\", async (req, res) => {\n    try {\n      const { supplier } = req.query;\n      let priceEntries = await storage.getAllPriceEntries();\n      \n      if (supplier) {\n        const supplierEntity = await storage.getSupplierByName(supplier as string);\n        if (supplierEntity) {\n          priceEntries = await storage.getPriceEntriesBySupplier(supplierEntity.id);\n        }\n      }\n\n      // Join with supplier names\n      const enrichedEntries = await Promise.all(\n        priceEntries.map(async (entry) => {\n          const supplier = entry.supplierId ? await storage.getSupplier(entry.supplierId) : null;\n          return {\n            ...entry,\n            supplierName: supplier?.name || 'Unknown'\n          };\n        })\n      );\n\n      res.json(enrichedEntries);\n    } catch (error) {\n      console.error(\"Get price entries error:\", error);\n      res.status(500).json({ error: \"Failed to get price entries\" });\n    }\n  });\n\n  app.post(\"/api/price-entries\", async (req, res) => {\n    try {\n      console.log(\"Received price entry data:\", req.body);\n      \n      // Validate the request body\n      const validationResult = insertPriceEntrySchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        console.error(\"Validation failed:\", validationResult.error.errors);\n        return res.status(400).json({ \n          error: \"Validation failed\",\n          details: validationResult.error.errors \n        });\n      }\n\n      const priceEntryData = validationResult.data;\n      \n      // Ensure supplierId exists if provided\n      if (priceEntryData.supplierId) {\n        const supplier = await storage.getSupplier(priceEntryData.supplierId);\n        if (!supplier) {\n          return res.status(400).json({ error: \"Invalid supplier ID\" });\n        }\n      }\n      \n      const priceEntry = await storage.createPriceEntry(priceEntryData);\n      console.log(\"Price entry created successfully:\", priceEntry);\n      \n      res.json(priceEntry);\n    } catch (error) {\n      console.error(\"Create price entry error:\", error);\n      res.status(500).json({ \n        error: \"Failed to create price entry\",\n        details: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  app.put(\"/api/price-entries/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      console.log('Update request received:', { id, updates });\n      \n      // CRITICAL FIX: Ensure all date fields are proper Date objects\n      const processedUpdates = { ...updates };\n      \n      // Convert effectiveFrom if it exists\n      if (processedUpdates.effectiveFrom) {\n        if (typeof processedUpdates.effectiveFrom === 'string') {\n          processedUpdates.effectiveFrom = new Date(processedUpdates.effectiveFrom);\n        }\n        console.log('Processed effectiveFrom:', processedUpdates.effectiveFrom);\n      }\n      \n      // Convert effectiveTo if it exists and is not null\n      if (processedUpdates.effectiveTo !== undefined) {\n        if (processedUpdates.effectiveTo === null || processedUpdates.effectiveTo === '') {\n          processedUpdates.effectiveTo = null;\n        } else if (typeof processedUpdates.effectiveTo === 'string') {\n          processedUpdates.effectiveTo = new Date(processedUpdates.effectiveTo);\n        }\n        console.log('Processed effectiveTo:', processedUpdates.effectiveTo);\n      }\n      \n      // Remove any undefined values to prevent Drizzle issues\n      Object.keys(processedUpdates).forEach(key => {\n        if (processedUpdates[key] === undefined) {\n          delete processedUpdates[key];\n        }\n      });\n      \n      console.log('Final processed updates:', processedUpdates);\n      \n      const updatedEntry = await storage.updatePriceEntry(id, processedUpdates);\n      \n      if (!updatedEntry) {\n        return res.status(404).json({ error: \"Price entry not found\" });\n      }\n      \n      console.log('Price entry updated successfully:', updatedEntry);\n      res.json(updatedEntry);\n    } catch (error) {\n      console.error(\"Update price entry error:\", error);\n      res.status(500).json({ \n        error: \"Failed to update price entry\",\n        details: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  app.delete(\"/api/price-entries/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deletePriceEntry(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Price entry not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Delete price entry error:\", error);\n      res.status(500).json({ error: \"Failed to delete price entry\" });\n    }\n  });\n\n  // Bulk upload price entries from Excel/CSV\n  app.post(\"/api/price-entries/bulk-upload\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ \n          error: \"No file uploaded\",\n          message: \"Please select a CSV or Excel file to upload\"\n        });\n      }\n\n      // Check if supplierName is provided in request body (for single supplier uploads)\n      const { supplierName } = req.body;\n\n      console.log(`üì§ Processing price list upload: ${req.file.originalname}`);\n      console.log(`üìã File details: MIME: ${req.file.mimetype}, Size: ${req.file.size} bytes`);\n      console.log(`üè¢ Single supplier mode: ${supplierName ? 'YES (' + supplierName + ')' : 'NO (multi-supplier file expected)'}`);\n\n      // Process the uploaded file\n      const rawData = await processCSVData(req.file.buffer, req.file.mimetype, req.file.originalname);\n\n      if (!rawData.headers || rawData.headers.length === 0) {\n        return res.status(400).json({ \n          error: \"No headers found\",\n          message: \"The file must contain column headers in the first row\"\n        });\n      }\n\n      // Get all suppliers for reference\n      const allSuppliers = await storage.getAllSuppliers();\n\n      // Expected format for price list:\n      // Supplier Name, Product Name, Price Before GST (INR), GST Rate (%), Price After GST (INR), HSN Code, Currency, Effective From, Effective To\n      let processedCount = 0;\n      const errors = [];\n      const skippedCount = 0;\n\n      for (let i = 0; i < rawData.data.length; i++) {\n        const row = rawData.data[i];\n        try {\n          // Map columns (flexible mapping for both single and multi-supplier files)\n          const rowSupplierName = row['Supplier Name'] || row['supplier_name'] || row['SupplierName'] || supplierName || '';\n          const productName = row['Product Name'] || row['product_name'] || row['ProductName'] || '';\n          const priceBeforeGst = parseFloat(row['Price Before GST (INR)'] || row['price_before_gst'] || row['PriceBeforeGST'] || '0');\n          const gstRate = parseFloat(row['GST Rate (%)'] || row['gst_rate'] || row['GSTRate'] || '18'); // Default 18%\n          const priceAfterGst = parseFloat(row['Price After GST (INR)'] || row['price_after_gst'] || row['PriceAfterGST'] || '0');\n          const hsnCode = row['HSN Code'] || row['hsn_code'] || row['HSN'] || '';\n          const currency = row['Currency'] || row['currency'] || 'INR';\n          const effectiveFromStr = row['Effective From (YYYY-MM-DD)'] || row['effective_from'] || new Date().toISOString().split('T')[0];\n          const effectiveToStr = row['Effective To (YYYY-MM-DD)'] || row['effective_to'] || null;\n\n          // Validate required fields\n          if (!rowSupplierName) {\n            errors.push(`Row ${i + 2}: Supplier name is required (check \"Supplier Name\" column)`);\n            continue;\n          }\n\n          if (!productName) {\n            errors.push(`Row ${i + 2}: Product name is required`);\n            continue;\n          }\n          \n          // Ensure dates are strings, not Date objects\n          const effectiveFrom = typeof effectiveFromStr === 'string' ? effectiveFromStr : new Date().toISOString().split('T')[0];\n          const effectiveTo = effectiveToStr && typeof effectiveToStr === 'string' ? effectiveToStr : null;\n\n          // Find or create supplier for this row\n          let supplier = allSuppliers.find(s => s.name === rowSupplierName);\n          \n          if (!supplier) {\n            // Create new supplier if not exists\n            supplier = await storage.createSupplier({\n              name: rowSupplierName,\n              contactEmail: '',\n              contactPhone: '',\n              orderAccount: ''\n            });\n            console.log(`üÜï Created new supplier: ${rowSupplierName}`);\n            allSuppliers.push(supplier); // Add to local cache\n          }\n\n          // Allow \"0\" as valid price - only reject negative prices\n          if ((priceBeforeGst < 0 && priceAfterGst < 0) || (isNaN(priceBeforeGst) && isNaN(priceAfterGst))) {\n            errors.push(`Row ${i + 2}: Invalid price values (negative values not allowed)`);\n            continue;\n          }\n\n          // Check if price entry already exists for this supplier-product combination\n          const existingPrices = await storage.getAllPriceEntries();\n          const existingPrice = existingPrices.find(p => \n            p.supplierId === supplier.id && \n            p.productName === productName\n          );\n\n          if (existingPrice) {\n            // Calculate final price - use provided after GST price or calculate from before GST + rate\n            // Allow \"0\" as valid price - only reject negative or NaN values\n            let finalPrice: number;\n            if (priceAfterGst >= 0 && !isNaN(priceAfterGst)) {\n              // Use provided after GST price (including \"0\")\n              finalPrice = priceAfterGst;\n            } else if (priceBeforeGst >= 0 && !isNaN(priceBeforeGst)) {\n              // Calculate from before GST price and rate (including \"0\")\n              finalPrice = priceBeforeGst * (1 + gstRate / 100);\n            } else {\n              errors.push(`Row ${i + 2}: Both price values are invalid (must be 0 or positive numbers)`);\n              continue;\n            }\n            \n            // Update existing price entry\n            await storage.updatePriceEntry(existingPrice.id, {\n              price: finalPrice.toString(),\n              priceBeforeGst: (priceBeforeGst || (finalPrice / (1 + gstRate / 100))).toString(),\n              gstRate: gstRate.toString(),\n              hsn: hsnCode,\n              currency,\n              effectiveFrom: new Date(effectiveFrom),\n              effectiveTo: effectiveTo ? new Date(effectiveTo) : null\n            });\n          } else {\n            // Calculate final price - use provided after GST price or calculate from before GST + rate\n          // Allow \"0\" as valid price - only reject negative or NaN values\n          let finalPrice: number;\n          if (priceAfterGst >= 0 && !isNaN(priceAfterGst)) {\n            // Use provided after GST price (including \"0\")\n            finalPrice = priceAfterGst;\n          } else if (priceBeforeGst >= 0 && !isNaN(priceBeforeGst)) {\n            // Calculate from before GST price and rate (including \"0\")\n            finalPrice = priceBeforeGst * (1 + gstRate / 100);\n          } else {\n            errors.push(`Row ${i + 2}: Both price values are invalid (must be 0 or positive numbers)`);\n            continue;\n          }\n          \n          // Create new price entry\n            await storage.createPriceEntry({\n              supplierId: supplier.id,\n              productName,\n              price: finalPrice.toString(),\n              priceBeforeGst: (priceBeforeGst || (finalPrice / (1 + gstRate / 100))).toString(),\n              gstRate: gstRate.toString(),\n              hsn: hsnCode,\n              currency,\n              effectiveFrom: new Date(effectiveFrom),\n              effectiveTo: effectiveTo ? new Date(effectiveTo) : null\n            });\n          }\n\n          processedCount++;\n        } catch (error) {\n          errors.push(`Row ${i + 2}: ${error.message}`);\n        }\n      }\n\n      // Collect stats about suppliers processed\n      const uniqueSuppliers = new Set();\n      for (let i = 0; i < rawData.data.length; i++) {\n        const row = rawData.data[i];\n        const rowSupplierName = row['Supplier Name'] || row['supplier_name'] || row['SupplierName'] || supplierName || '';\n        if (rowSupplierName) {\n          uniqueSuppliers.add(rowSupplierName);\n        }\n      }\n\n      console.log(`‚úÖ Processed ${processedCount} price entries for ${uniqueSuppliers.size} suppliers: ${Array.from(uniqueSuppliers).join(', ')}`);\n      \n      res.json({ \n        success: true, \n        details: {\n          processed: processedCount,\n          skipped: rawData.data.length - processedCount,\n          errors: errors.length > 0 ? errors : [],\n          suppliers: Array.from(uniqueSuppliers)\n        },\n        message: `Successfully processed ${processedCount} price entries for ${uniqueSuppliers.size} supplier(s)${errors.length > 0 ? ` with ${errors.length} errors` : ''}`\n      });\n\n    } catch (error) {\n      console.error(\"Bulk price upload error:\", error);\n      res.status(500).json({ \n        error: \"Failed to process price list upload\",\n        message: error.message\n      });\n    }\n  });\n\n  // Suppliers endpoint\n  app.get(\"/api/suppliers\", async (req, res) => {\n    try {\n      const suppliers = await storage.getAllSuppliers();\n      res.json(suppliers);\n    } catch (error) {\n      console.error(\"Get suppliers error:\", error);\n      res.status(500).json({ error: \"Failed to get suppliers\" });\n    }\n  });\n\n  // Get suppliers with missing price counts and sorting\n  app.get(\"/api/suppliers/with-missing-prices\", async (req, res) => {\n    try {\n      const { sortBy = 'missing_prices', sortOrder = 'desc' } = req.query;\n      \n      // Validate sort parameters to prevent SQL injection\n      const validSortColumns = ['name', 'missing_prices', 'total_orders', 'created_at'];\n      const validSortOrder = ['asc', 'desc'];\n      \n      const safeSortBy = validSortColumns.includes(sortBy as string) ? sortBy : 'missing_prices';\n      const safeSortOrder = validSortOrder.includes((sortOrder as string)?.toLowerCase()) ? (sortOrder as string).toUpperCase() : 'DESC';\n      \n      const sortColumn = safeSortBy === 'name' ? 's.name' : safeSortBy;\n      \n      const suppliers = await storage.getAllSuppliers();\n      const orders = await storage.getAllOrders();\n      \n      // Create a map of existing price entries (supplier-product combinations)\n      // This includes ALL prices - even \"0\" prices are valid and should NOT be counted as missing\n      const priceEntries = await storage.getAllPriceEntries();\n      const existingPrices = new Map();\n      priceEntries.forEach(entry => {\n        const key = `${entry.supplierId}-${entry.productName}`;\n        existingPrices.set(key, { \n          price: entry.price, \n          hasPrice: true \n        });\n      });\n\n      // Process data in memory - count unique products missing prices, not individual orders\n      const supplierStats = suppliers.map(supplier => {\n        const supplierOrders = orders.filter(order => order.supplierId === supplier.id);\n        const totalOrders = supplierOrders.length;\n        \n        // Find unique products for this supplier that need price entries\n        // Only count as missing if NO price entry exists (even \"0\" is a valid price)\n        const uniqueProducts = new Map();\n        supplierOrders.forEach(order => {\n          const key = `${supplier.id}-${order.productName}`;\n          const priceEntry = existingPrices.get(key);\n          \n          // Only add to missing if NO price entry exists at all\n          // \"0\" prices are valid and should NOT be counted as missing\n          if (!priceEntry || !priceEntry.hasPrice) {\n            uniqueProducts.set(order.productName, true);\n          }\n        });\n        \n        const missingPriceProducts = uniqueProducts.size;\n        const totalUniqueProducts = new Set(supplierOrders.map(order => order.productName)).size;\n        const missingPricePercentage = totalUniqueProducts > 0 ? Math.round((missingPriceProducts * 100) / totalUniqueProducts * 100) / 100 : 0;\n        \n        return {\n          id: supplier.id,\n          name: supplier.name,\n          order_account: supplier.orderAccount,\n          created_at: supplier.createdAt,\n          total_orders: totalOrders,\n          missing_prices: missingPriceProducts, // Count unique products, not orders\n          missing_price_percentage: missingPricePercentage,\n          total_unique_products: totalUniqueProducts\n        };\n      });\n      \n      // Sort the results\n      supplierStats.sort((a, b) => {\n        let aVal = a[safeSortBy];\n        let bVal = b[safeSortBy];\n        \n        if (safeSortBy === 'name') {\n          aVal = a.name;\n          bVal = b.name;\n        }\n        \n        if (typeof aVal === 'string' && typeof bVal === 'string') {\n          return safeSortOrder === 'ASC' ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);\n        }\n        \n        if (safeSortOrder === 'ASC') {\n          return aVal - bVal;\n        } else {\n          return bVal - aVal;\n        }\n      });\n      \n      res.json(supplierStats);\n    } catch (error) {\n      console.error(\"Error fetching suppliers with missing prices:\", error);\n      res.status(500).json({ error: \"Failed to fetch supplier data\", suppliers: [] });\n    }\n  });\n\n  // Update supplier order account\n  app.patch(\"/api/suppliers/:id/order-account\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { orderAccount } = req.body;\n      \n      const updated = await storage.updateSupplierOrderAccount(id, orderAccount);\n      if (!updated) {\n        return res.status(404).json({ error: \"Supplier not found\" });\n      }\n      \n      res.json({ success: true, supplier: updated });\n    } catch (error) {\n      console.error(\"Update supplier order account error:\", error);\n      res.status(500).json({ error: \"Failed to update supplier order account\" });\n    }\n  });\n\n  // Orders endpoint - Get all saved orders\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Get orders error:\", error);\n      res.status(500).json({ error: \"Failed to get orders\" });\n    }\n  });\n\n  // Progress tracking endpoint\n  app.get(\"/api/files/:fileId/progress\", async (req, res) => {\n    try {\n      const { fileId } = req.params;\n      const progress = global.processingProgress?.get(fileId);\n      \n      if (!progress) {\n        return res.status(404).json({ error: \"Progress not found\" });\n      }\n      \n      res.json(progress);\n    } catch (error) {\n      console.error(\"Get progress error:\", error);\n      res.status(500).json({ error: \"Failed to get progress\" });\n    }\n  });\n\n  // Dashboard stats endpoint\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      const suppliers = await storage.getAllSuppliers();\n      const priceEntries = await storage.getAllPriceEntries();\n      \n      // Calculate unique products from orders\n      const uniqueProducts = new Set();\n      orders.forEach(order => {\n        if (order.productName && order.productName.trim()) {\n          uniqueProducts.add(order.productName.trim());\n        }\n      });\n\n      // Calculate average order value from delivered orders with prices\n      const deliveredOrders = orders.filter(o => \n        o.status?.toLowerCase() === 'delivered' || o.status?.toLowerCase() === 'completed'\n      );\n      \n      let totalOrderValue = 0;\n      let validOrdersCount = 0;\n      \n      deliveredOrders.forEach(order => {\n        // Find price entry for this order\n        const priceEntry = priceEntries.find(entry => \n          entry.supplierId === order.supplierId && \n          entry.productName === order.productName\n        );\n        \n        if (priceEntry && (priceEntry.price > 0 || priceEntry.unitPrice > 0)) {\n          const unitPrice = parseFloat(String(priceEntry.price || priceEntry.unitPrice || 0));\n          const deliveredQty = parseInt(String(order.deliveredQty || order.qty || 0));\n          \n          if (unitPrice > 0 && deliveredQty > 0) {\n            totalOrderValue += unitPrice * deliveredQty;\n            validOrdersCount++;\n          }\n        }\n      });\n      \n      const averageOrderValue = validOrdersCount > 0 ? totalOrderValue / validOrdersCount : 0;\n      \n      const stats = {\n        totalOrders: orders.length,\n        totalSuppliers: suppliers.length,\n        totalPriceEntries: priceEntries.length,\n        uniqueProducts: uniqueProducts.size,\n        averageOrderValue: averageOrderValue,\n        deliveredOrders: deliveredOrders.length,\n        cancelledOrders: orders.filter(o => o.status?.toLowerCase() === 'cancelled').length,\n        rtsOrders: orders.filter(o => o.status?.toLowerCase() === 'rts').length,\n        lastUpdated: new Date().toISOString()\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get dashboard stats error:\", error);\n      res.status(500).json({ error: \"Failed to get dashboard stats\" });\n    }\n  });\n\n  // Helper function to generate supplier ID from name and product\n  const generateSupplierProductId = (supplierName: string, productName: string) => {\n    // Format: \"SupplierNameProductName\" (no separator, full names)\n    return `${supplierName}${productName}`;\n  };\n\n  // Get missing price entries (vendor-product combinations that need prices)\n  app.get(\"/api/missing-price-entries\", async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      const priceEntries = await storage.getAllPriceEntries();\n      const suppliers = await storage.getAllSuppliers();\n      \n      // Create a map of existing price entries\n      const existingPrices = new Map();\n      priceEntries.forEach(entry => {\n        const key = `${entry.supplierId}-${entry.productName}`;\n        existingPrices.set(key, true);\n      });\n\n      // Find unique vendor-product combinations from orders\n      const combinations = new Map();\n      for (const order of orders) {\n        // Get supplier name - either from order directly or from supplier table\n        let supplierName = order.supplierName;\n        if (!supplierName && order.supplierId) {\n          const supplier = suppliers.find(s => s.id === order.supplierId);\n          supplierName = supplier?.name || 'Unknown Supplier';\n        }\n        if (!supplierName || supplierName === 'undefined') {\n          supplierName = 'Unknown Supplier';\n        }\n\n        const key = `${supplierName}-${order.productName}`;\n        if (!combinations.has(key)) {\n          combinations.set(key, {\n            supplierName: supplierName,\n            productName: order.productName,\n            orderCount: 1,\n            latestOrderDate: order.orderDate,\n            supplierProductId: generateSupplierProductId(supplierName, order.productName)\n          });\n        } else {\n          const existing = combinations.get(key);\n          existing.orderCount += 1;\n          if (new Date(order.orderDate) > new Date(existing.latestOrderDate)) {\n            existing.latestOrderDate = order.orderDate;\n          }\n        }\n      }\n\n      // Filter out combinations that already have price entries\n      const missing = [];\n      combinations.forEach((combo, key) => {\n        const supplier = suppliers.find(s => s.name === combo.supplierName);\n        const priceKey = supplier ? `${supplier.id}-${combo.productName}` : null;\n        \n        if (!priceKey || !existingPrices.has(priceKey)) {\n          missing.push({\n            ...combo,\n            supplierId: supplier?.id || null,\n            needsPricing: true\n          });\n        }\n      });\n\n      res.json(missing);\n    } catch (error) {\n      console.error(\"Get missing price entries error:\", error);\n      res.status(500).json({ error: \"Failed to get missing price entries\" });\n    }\n  });\n\n  // Export missing price entries as CSV template for bulk upload\n  app.get(\"/api/export/missing-price-entries\", async (req, res) => {\n    const { supplier } = req.query; // Optional supplier filter\n    try {\n      const orders = await storage.getAllOrders();\n      const priceEntries = await storage.getAllPriceEntries();\n      const suppliers = await storage.getAllSuppliers();\n      \n      // Create a map of existing price entries\n      const existingPrices = new Map();\n      priceEntries.forEach(entry => {\n        const key = `${entry.supplierId}-${entry.productName}`;\n        existingPrices.set(key, true);\n      });\n\n      // Find unique vendor-product combinations from orders\n      const combinations = new Map();\n      for (const order of orders) {\n        // Get supplier name - either from order directly or from supplier table\n        let supplierName = order.supplierName;\n        if (!supplierName && order.supplierId) {\n          const foundSupplier = suppliers.find(s => s.id === order.supplierId);\n          supplierName = foundSupplier?.name || 'Unknown Supplier';\n        }\n        if (!supplierName || supplierName === 'undefined') {\n          supplierName = 'Unknown Supplier';\n        }\n\n        // Filter by specific supplier if requested\n        if (supplier && supplierName !== supplier) {\n          continue;\n        }\n\n        const key = `${supplierName}-${order.productName}`;\n        if (!combinations.has(key)) {\n          combinations.set(key, {\n            supplierName: supplierName,\n            productName: order.productName,\n            orderCount: 1,\n            latestOrderDate: order.orderDate,\n            supplierProductId: generateSupplierProductId(supplierName, order.productName)\n          });\n        } else {\n          const existing = combinations.get(key);\n          existing.orderCount += 1;\n          if (new Date(order.orderDate) > new Date(existing.latestOrderDate)) {\n            existing.latestOrderDate = order.orderDate;\n          }\n        }\n      }\n\n      // Filter out combinations that already have price entries\n      const missing = [];\n      combinations.forEach((combo, key) => {\n        const supplier = suppliers.find(s => s.name === combo.supplierName);\n        const priceKey = supplier ? `${supplier.id}-${combo.productName}` : null;\n        \n        if (!priceKey || !existingPrices.has(priceKey)) {\n          missing.push({\n            supplierName: combo.supplierName,\n            productName: combo.productName,\n            orderCount: combo.orderCount,\n            supplierProductId: combo.supplierProductId,\n            priceBeforeGST: '', // Empty for user to fill\n            gstRate: '', // Empty for user to fill  \n            priceAfterGST: '', // Will be calculated\n            hsn: '', // Empty for user to fill\n            currency: 'INR',\n            effectiveFrom: new Date().toISOString().split('T')[0],\n            effectiveTo: ''\n          });\n        }\n      });\n      \n      console.log(`üìã Export Result: Found ${missing.length} missing price entries`);\n      console.log('Sample missing entries:', missing.slice(0, 3));\n\n      // Generate Excel content with GST calculations\n      const excelHeaders = [\n        'Supplier Name',\n        'Product Name', \n        'Order Count',\n        'Supplier Product ID',\n        'Price Before GST (INR)',\n        'GST Rate (%)',\n        'Price After GST (INR)', \n        'HSN Code',\n        'Currency',\n        'Effective From (YYYY-MM-DD)',\n        'Effective To (YYYY-MM-DD)'\n      ];\n\n      const excelRows = missing.map(item => [\n        item.supplierName,\n        item.productName,\n        item.orderCount,\n        item.supplierProductId,\n        item.priceBeforeGST,\n        item.gstRate,\n        item.priceAfterGST,\n        item.hsn,\n        item.currency,\n        item.effectiveFrom,\n        item.effectiveTo\n      ]);\n\n      // Create workbook and worksheet\n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.aoa_to_sheet([excelHeaders, ...excelRows]);\n      \n      // Add some styling and formulas for GST calculation\n      // Set column widths\n      const columnWidths = [\n        { wch: 25 }, // Supplier Name\n        { wch: 30 }, // Product Name\n        { wch: 12 }, // Order Count\n        { wch: 25 }, // Supplier Product ID\n        { wch: 18 }, // Price Before GST\n        { wch: 12 }, // GST Rate\n        { wch: 18 }, // Price After GST\n        { wch: 12 }, // HSN Code\n        { wch: 10 }, // Currency\n        { wch: 18 }, // Effective From\n        { wch: 18 }  // Effective To\n      ];\n      worksheet['!cols'] = columnWidths;\n\n      // Add formulas for Price After GST calculation (starting from row 2)\n      for (let i = 0; i < missing.length; i++) {\n        const rowNum = i + 2; // Excel rows are 1-indexed, and we have header\n        const priceAfterGSTCell = `G${rowNum}`;\n        // Formula: Price Before GST * (1 + GST Rate / 100)\n        worksheet[priceAfterGSTCell] = {\n          f: `E${rowNum}*(1+F${rowNum}/100)`,\n          t: 'n'\n        };\n      }\n\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Missing Price Entries');\n      \n      const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"missing-price-entries-template.xlsx\"');\n      res.send(excelBuffer);\n      \n    } catch (error) {\n      console.error(\"Export missing price entries error:\", error);\n      res.status(500).json({ error: \"Failed to export missing price entries\" });\n    }\n  });\n\n  // Bulk upload price entries from CSV/Excel\n  app.post(\"/api/price-entries/bulk-upload\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file provided\" });\n      }\n\n      console.log(`üìÅ Bulk Upload Started: ${req.file.originalname} (${req.file.size} bytes)`);\n      console.log(`üìã MIME Type: ${req.file.mimetype}`);\n\n      let parsedData;\n      \n      // Handle Excel files\n      if (req.file.mimetype.includes('excel') || req.file.mimetype.includes('spreadsheet')) {\n        const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        \n        // Use defval option to handle empty cells and preserve formulas\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { \n          header: 1, \n          raw: false, \n          defval: '',\n          blankrows: false\n        });\n        \n        const headers = jsonData[0] as string[];\n        const dataRows = jsonData.slice(1).filter(row => Array.isArray(row) && row.some(cell => cell !== ''));\n        parsedData = { headers, dataRows };\n        console.log(`üìä Excel parsed: ${headers.length} columns, ${dataRows.length} rows`);\n      } \n      // Handle CSV files\n      else if (req.file.mimetype.includes('csv')) {\n        const fileContent = req.file.buffer.toString('utf-8');\n        const lines = fileContent.split('\\n').filter(line => line.trim());\n        \n        if (lines.length < 2) {\n          return res.status(400).json({ error: \"CSV file should have header and at least one data row\" });\n        }\n\n        const headers = lines[0].split(',').map(h => h.replace(/\"/g, '').trim());\n        const dataRows = lines.slice(1).map(line => line.split(',').map(cell => cell.replace(/\"/g, '').trim()));\n        parsedData = { headers, dataRows };\n        console.log(`üìä CSV parsed: ${headers.length} columns, ${dataRows.length} rows`);\n      } else {\n        return res.status(400).json({ error: \"Unsupported file type. Please upload CSV or Excel file.\" });\n      }\n\n      const { headers, dataRows } = parsedData;\n      \n      console.log(`üìã Headers detected:`, headers);\n      console.log(`üìä First row sample:`, dataRows[0]);\n      console.log(`üìä Second row sample:`, dataRows[1]);\n      console.log(`üìä Third row sample:`, dataRows[2]);\n      \n      // Check actual column counts in data rows\n      for (let i = 0; i < Math.min(5, dataRows.length); i++) {\n        const row = Array.isArray(dataRows[i]) ? dataRows[i] : dataRows[i].split(',').map(cell => cell.replace(/\"/g, '').trim());\n        console.log(`üìä Row ${i + 1} has ${row.length} columns:`, row.slice(0, 5), '...');\n      }\n      \n      // Expected headers: Supplier Name, Product Name, Order Count, Supplier Product ID, Price Before GST, GST Rate, Price After GST, HSN Code, Currency, Effective From, Effective To\n      const expectedHeaders = ['Supplier Name', 'Product Name', 'Order Count', 'Supplier Product ID', 'Price Before GST (INR)', 'GST Rate (%)', 'Price After GST (INR)', 'HSN Code', 'Currency', 'Effective From (YYYY-MM-DD)', 'Effective To (YYYY-MM-DD)'];\n      \n      const results = {\n        totalRows: dataRows.length,\n        processed: 0,\n        skipped: 0,\n        errors: [] as string[]\n      };\n\n      for (let i = 0; i < dataRows.length; i++) {\n        try {\n          const row = Array.isArray(dataRows[i]) ? dataRows[i] : dataRows[i].split(',').map(cell => cell.replace(/\"/g, '').trim());\n          \n          if (row.length < 8) { // Reduced from 11 to 8 - only need core fields\n            results.skipped++;\n            results.errors.push(`Row ${i + 2}: Insufficient columns - has ${row.length}, need at least 8`);\n            continue;\n          }\n\n          const [supplierName, productName, orderCount, supplierProductId, priceBeforeGST, gstRate, priceAfterGST, hsn, currency, effectiveFrom, effectiveTo] = row;\n          \n          console.log(`üîç Processing row ${i + 2}: Supplier=${supplierName}, Product=${productName}, Price=${priceBeforeGST}, HSN=${hsn}`);\n          \n          // Clean and validate price - handle various Excel formats\n          let cleanPrice = '';\n          if (priceBeforeGST !== undefined && priceBeforeGST !== null && priceBeforeGST !== '') {\n            if (typeof priceBeforeGST === 'number') {\n              cleanPrice = priceBeforeGST.toString();\n            } else {\n              cleanPrice = String(priceBeforeGST).replace(/[^\\d.-]/g, '');\n            }\n          }\n          \n          const cleanHSN = hsn ? String(hsn).trim() : '';\n          \n          console.log(`üßπ Cleaned values - Original Price: \"${priceBeforeGST}\", Clean Price: \"${cleanPrice}\", HSN: \"${cleanHSN}\"`);\n          \n          // Skip if price before GST or HSN is empty - but allow \"0\" as valid price\n          if (!cleanPrice || !cleanHSN || parseFloat(cleanPrice) < 0 || isNaN(parseFloat(cleanPrice))) {\n            console.log(`‚ùå Skipping row ${i + 2}: Price=${cleanPrice}, HSN=${cleanHSN}`);\n            results.skipped++;\n            results.errors.push(`Row ${i + 2}: Missing price (${cleanPrice}) or HSN (${cleanHSN}) - negative prices not allowed`);\n            continue;\n          }\n\n          // Find supplier\n          const suppliers = await storage.getAllSuppliers();\n          const supplier = suppliers.find(s => s.name === supplierName);\n          \n          if (!supplier) {\n            results.skipped++;\n            results.errors.push(`Row ${i + 2}: Supplier \"${supplierName}\" not found`);\n            continue;\n          }\n\n          // Handle dates - schema expects timestamp format\n          const currentDate = new Date();\n          let fromDate = currentDate;\n          let toDate = null;\n          \n          // Simple date handling - use today's date for effectiveFrom if empty\n          if (effectiveFrom && effectiveFrom.toString().trim()) {\n            try {\n              fromDate = new Date(effectiveFrom.toString());\n              if (isNaN(fromDate.getTime())) {\n                fromDate = currentDate;\n              }\n            } catch {\n              fromDate = currentDate;\n            }\n          }\n          \n          if (effectiveTo && effectiveTo.toString().trim()) {\n            try {\n              toDate = new Date(effectiveTo.toString());\n              if (isNaN(toDate.getTime())) {\n                toDate = null;\n              }\n            } catch {\n              toDate = null;\n            }\n          }\n\n          // Create price entry (use price before GST for calculations)\n          const priceEntryData = {\n            supplierId: supplier.id,\n            productName: productName.trim(),\n            currency: currency || 'INR',\n            price: cleanPrice, // Store cleaned price before GST\n            hsn: cleanHSN,\n            effectiveFrom: fromDate,\n            effectiveTo: toDate\n          };\n\n          console.log(`üíæ Creating price entry:`, priceEntryData);\n          await storage.createPriceEntry(priceEntryData);\n          results.processed++;\n          console.log(`‚úÖ Successfully created price entry for ${productName}`);\n\n        } catch (rowError) {\n          console.error(`‚ùå Error processing row ${i + 2}:`, rowError);\n          results.skipped++;\n          results.errors.push(`Row ${i + 2}: ${rowError instanceof Error ? rowError.message : 'Processing error'}`);\n        }\n      }\n\n      console.log(`üìä Final Results:`, results);\n      console.log(`üìã All Errors:`, results.errors);\n\n      res.json({\n        success: true,\n        message: `Bulk upload completed: ${results.processed} entries added, ${results.skipped} skipped`,\n        details: results\n      });\n\n    } catch (error) {\n      console.error(\"Bulk upload error:\", error);\n      res.status(500).json({ \n        error: \"Failed to process bulk upload\",\n        details: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Orders endpoint\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Get orders error:\", error);\n      res.status(500).json({ error: \"Failed to get orders\" });\n    }\n  });\n\n  // Calculate payouts endpoint\n  app.post(\"/api/calculate-payouts\", async (req, res) => {\n    try {\n      const { fileId, pricingBasis = 'deliveredDate' } = req.body;\n      \n      const orders = fileId ? await storage.getOrdersByFileId(fileId) : await storage.getAllOrders();\n      const priceEntries = await storage.getAllPriceEntries();\n      const suppliers = await storage.getAllSuppliers();\n\n      const results = await calculatePayouts(orders, priceEntries, suppliers, pricingBasis);\n      \n      res.json(results);\n    } catch (error) {\n      console.error(\"Calculate payouts error:\", error);\n      res.status(500).json({ error: \"Failed to calculate payouts\" });\n    }\n  });\n\n  // Reports endpoint\n  app.post(\"/api/reports/generate\", async (req, res) => {\n    try {\n      const filters = reportFiltersSchema.parse(req.body);\n      \n      const orders = await storage.getAllOrders();\n      const priceEntries = await storage.getAllPriceEntries();\n      const suppliers = await storage.getAllSuppliers();\n      const reconLogs = await storage.getAllReconciliationLogs();\n\n      const reports = await generateReports(orders, priceEntries, suppliers, reconLogs, filters);\n      \n      res.json(reports);\n    } catch (error) {\n      console.error(\"Generate reports error:\", error);\n      res.status(500).json({ error: \"Failed to generate reports\" });\n    }\n  });\n\n  // Export endpoints\n  app.get(\"/api/export/:reportType\", async (req, res) => {\n    try {\n      const { reportType } = req.params;\n      const filters = req.query;\n      \n      // TODO: Implement CSV export functionality\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=${reportType}.csv`);\n      res.send('Export functionality to be implemented');\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      res.status(500).json({ error: \"Failed to export data\" });\n    }\n  });\n\n  // Reconciliation endpoint\n  app.post(\"/api/reconciliation/process\", async (req, res) => {\n    try {\n      const { newOrders } = req.body;\n      const reconciliationLogs = [];\n\n      for (const newOrder of newOrders) {\n        const existingOrder = await storage.getOrderByAwbNo(newOrder.awbNo);\n        \n        if (existingOrder && existingOrder.status !== newOrder.status) {\n          // Status change detected\n          const impact = calculateStatusChangeImpact(existingOrder, newOrder);\n          \n          const log = await storage.createReconciliationLog({\n            awbNo: newOrder.awbNo,\n            orderId: existingOrder.id,\n            previousStatus: existingOrder.status,\n            newStatus: newOrder.status,\n            impact: impact,\n            note: `Status changed from ${existingOrder.status} to ${newOrder.status}`\n          });\n          \n          reconciliationLogs.push(log);\n          \n          // Update order status\n          await storage.updateOrder(existingOrder.id, {\n            previousStatus: existingOrder.status,\n            status: newOrder.status\n          });\n        }\n      }\n\n      res.json({ reconciliationLogs, processed: newOrders.length });\n    } catch (error) {\n      console.error(\"Reconciliation error:\", error);\n      res.status(500).json({ error: \"Failed to process reconciliation\" });\n    }\n  });\n\n  // Clear all orders data endpoint\n  app.delete(\"/api/orders/clear-all\", async (req, res) => {\n    try {\n      await storage.clearAllOrders();\n      \n      // Also clear temporary file data\n      if (global.tempFileData) {\n        global.tempFileData.clear();\n      }\n      \n      console.log(\"üóëÔ∏è All orders data cleared successfully\");\n      res.json({ success: true, message: \"All orders data cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing orders data:\", error);\n      res.status(500).json({ error: \"Failed to clear orders data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nfunction calculateStatusChangeImpact(existingOrder: any, newOrder: any): number {\n  // Simple impact calculation - in real implementation this would be more complex\n  if (existingOrder.status === 'Delivered' && ['RTS', 'RTO', 'Returned'].includes(newOrder.status)) {\n    return -(existingOrder.lineAmount || 0);\n  } else if (['RTS', 'RTO', 'Returned'].includes(existingOrder.status) && newOrder.status === 'Delivered') {\n    return (existingOrder.lineAmount || 0);\n  }\n  return 0;\n}\n","size_bytes":74047},"server/storage.ts":{"content":"import { type User, type InsertUser, type UploadedFile, type InsertUploadedFile, type Supplier, type InsertSupplier, type PriceEntry, type InsertPriceEntry, type Order, type InsertOrder, type ReconciliationLog, type InsertReconciliationLog } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // File methods\n  createUploadedFile(file: InsertUploadedFile): Promise<UploadedFile>;\n  getUploadedFile(id: string): Promise<UploadedFile | undefined>;\n  updateUploadedFile(id: string, updates: Partial<UploadedFile>): Promise<UploadedFile | undefined>;\n  getAllUploadedFiles(): Promise<UploadedFile[]>;\n  \n  // Supplier methods\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  getSupplier(id: string): Promise<Supplier | undefined>;\n  getSupplierByName(name: string): Promise<Supplier | undefined>;\n  getAllSuppliers(): Promise<Supplier[]>;\n  updateSupplierOrderAccount(id: string, orderAccount: string | null): Promise<Supplier | undefined>;\n  \n  // Price entry methods\n  createPriceEntry(priceEntry: InsertPriceEntry): Promise<PriceEntry>;\n  getPriceEntry(id: string): Promise<PriceEntry | undefined>;\n  getAllPriceEntries(): Promise<PriceEntry[]>;\n  getPriceEntriesBySupplier(supplierId: string): Promise<PriceEntry[]>;\n  updatePriceEntry(id: string, updates: Partial<PriceEntry>): Promise<PriceEntry | undefined>;\n  deletePriceEntry(id: string): Promise<boolean>;\n  \n  // Order methods\n  createOrder(order: InsertOrder): Promise<Order>;\n  createOrders(orders: InsertOrder[]): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrderByAwbNo(awbNo: string): Promise<Order | undefined>;\n  getAllOrders(): Promise<Order[]>;\n  getOrdersByFileId(fileId: string): Promise<Order[]>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n  clearAllOrders(): Promise<void>;\n  \n  // Reconciliation log methods\n  createReconciliationLog(log: InsertReconciliationLog): Promise<ReconciliationLog>;\n  getAllReconciliationLogs(): Promise<ReconciliationLog[]>;\n  getReconciliationLogsByAwbNo(awbNo: string): Promise<ReconciliationLog[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private uploadedFiles: Map<string, UploadedFile>;\n  private suppliers: Map<string, Supplier>;\n  private priceEntries: Map<string, PriceEntry>;\n  private orders: Map<string, Order>;\n  private reconciliationLogs: Map<string, ReconciliationLog>;\n\n  constructor() {\n    this.users = new Map();\n    this.uploadedFiles = new Map();\n    this.suppliers = new Map();\n    this.priceEntries = new Map();\n    this.orders = new Map();\n    this.reconciliationLogs = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // File methods\n  async createUploadedFile(file: InsertUploadedFile): Promise<UploadedFile> {\n    const id = randomUUID();\n    const uploadedFile: UploadedFile = { \n      ...file, \n      id,\n      uploadedAt: new Date()\n    };\n    this.uploadedFiles.set(id, uploadedFile);\n    return uploadedFile;\n  }\n\n  async getUploadedFile(id: string): Promise<UploadedFile | undefined> {\n    return this.uploadedFiles.get(id);\n  }\n\n  async updateUploadedFile(id: string, updates: Partial<UploadedFile>): Promise<UploadedFile | undefined> {\n    const existing = this.uploadedFiles.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.uploadedFiles.set(id, updated);\n    return updated;\n  }\n\n  async getAllUploadedFiles(): Promise<UploadedFile[]> {\n    return Array.from(this.uploadedFiles.values());\n  }\n\n  // Supplier methods\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const id = randomUUID();\n    const newSupplier: Supplier = { \n      ...supplier, \n      id,\n      createdAt: new Date()\n    };\n    this.suppliers.set(id, newSupplier);\n    return newSupplier;\n  }\n\n  async getSupplier(id: string): Promise<Supplier | undefined> {\n    return this.suppliers.get(id);\n  }\n\n  async getSupplierByName(name: string): Promise<Supplier | undefined> {\n    return Array.from(this.suppliers.values()).find(s => s.name === name);\n  }\n\n  async getAllSuppliers(): Promise<Supplier[]> {\n    return Array.from(this.suppliers.values());\n  }\n\n  async updateSupplierOrderAccount(id: string, orderAccount: string | null): Promise<Supplier | undefined> {\n    const supplier = this.suppliers.get(id);\n    if (!supplier) return undefined;\n    \n    const updated = { ...supplier, orderAccount };\n    this.suppliers.set(id, updated);\n    return updated;\n  }\n\n  // Price entry methods\n  async createPriceEntry(priceEntry: InsertPriceEntry): Promise<PriceEntry> {\n    const id = randomUUID();\n    const newPriceEntry: PriceEntry = { \n      ...priceEntry, \n      currency: priceEntry.currency || \"INR\",\n      supplierId: priceEntry.supplierId || null,\n      effectiveTo: priceEntry.effectiveTo || null,\n      id,\n      createdAt: new Date()\n    };\n    this.priceEntries.set(id, newPriceEntry);\n    return newPriceEntry;\n  }\n\n  async getPriceEntry(id: string): Promise<PriceEntry | undefined> {\n    return this.priceEntries.get(id);\n  }\n\n  async getAllPriceEntries(): Promise<PriceEntry[]> {\n    return Array.from(this.priceEntries.values());\n  }\n\n  async getPriceEntriesBySupplier(supplierId: string): Promise<PriceEntry[]> {\n    return Array.from(this.priceEntries.values()).filter(pe => pe.supplierId === supplierId);\n  }\n\n  async updatePriceEntry(id: string, updates: Partial<PriceEntry>): Promise<PriceEntry | undefined> {\n    const existing = this.priceEntries.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.priceEntries.set(id, updated);\n    return updated;\n  }\n\n  async deletePriceEntry(id: string): Promise<boolean> {\n    return this.priceEntries.delete(id);\n  }\n\n  // Order methods\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const newOrder: Order = { \n      ...order,\n      fileId: order.fileId || null,\n      id,\n      createdAt: new Date()\n    };\n    this.orders.set(id, newOrder);\n    return newOrder;\n  }\n\n  async createOrders(orders: InsertOrder[]): Promise<Order[]> {\n    const createdOrders: Order[] = [];\n    for (const order of orders) {\n      const created = await this.createOrder(order);\n      createdOrders.push(created);\n    }\n    return createdOrders;\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getOrderByAwbNo(awbNo: string): Promise<Order | undefined> {\n    return Array.from(this.orders.values()).find(o => o.awbNo === awbNo);\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values());\n  }\n\n  async getOrdersByFileId(fileId: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(o => o.fileId === fileId);\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const existing = this.orders.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  async clearAllOrders(): Promise<void> {\n    this.orders.clear();\n  }\n\n  // Reconciliation log methods\n  async createReconciliationLog(log: InsertReconciliationLog): Promise<ReconciliationLog> {\n    const id = randomUUID();\n    const newLog: ReconciliationLog = { \n      ...log,\n      previousStatus: log.previousStatus || null,\n      orderId: log.orderId || null,\n      note: log.note || null,\n      id,\n      timestamp: new Date()\n    };\n    this.reconciliationLogs.set(id, newLog);\n    return newLog;\n  }\n\n  async getAllReconciliationLogs(): Promise<ReconciliationLog[]> {\n    return Array.from(this.reconciliationLogs.values());\n  }\n\n  async getReconciliationLogsByAwbNo(awbNo: string): Promise<ReconciliationLog[]> {\n    return Array.from(this.reconciliationLogs.values()).filter(log => log.awbNo === awbNo);\n  }\n}\n\n// Storage instance is now created in routes.ts with DrizzleStorage\n// export const storage = new MemStorage();\n","size_bytes":8676},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, json, integer, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const uploadedFiles = pgTable(\"uploaded_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  size: integer(\"size\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  data: json(\"data\"), // Raw parsed data from CSV/Excel\n  columnMapping: json(\"column_mapping\"),\n  processedData: json(\"processed_data\"),\n  summary: json(\"summary\")\n});\n\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  orderAccount: text(\"order_account\"),\n  gstin: text(\"gstin\"),\n  tradeName: text(\"trade_name\"),\n  address: text(\"address\"), // Bill to address\n  shipToAddress: text(\"ship_to_address\"), \n  placeOfSupply: text(\"place_of_supply\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n}, (table) => ({\n  nameIdx: index(\"suppliers_name_idx\").on(table.name),\n  orderAccountIdx: index(\"suppliers_order_account_idx\").on(table.orderAccount)\n}));\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const priceEntries = pgTable(\"price_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  productName: text(\"product_name\").notNull(),\n  currency: text(\"currency\").notNull().default(\"INR\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(), // Final price (after GST)\n  priceBeforeGst: decimal(\"price_before_gst\", { precision: 10, scale: 2 }).notNull(),\n  gstRate: decimal(\"gst_rate\", { precision: 5, scale: 2 }).notNull().default(\"18.00\"), // GST percentage\n  hsn: text(\"hsn\").notNull(),\n  effectiveFrom: timestamp(\"effective_from\").notNull(),\n  effectiveTo: timestamp(\"effective_to\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n}, (table) => ({\n  supplierProductIdx: index(\"price_entries_supplier_product_idx\").on(table.supplierId, table.productName),\n  supplierIdx: index(\"price_entries_supplier_idx\").on(table.supplierId),\n  effectiveFromIdx: index(\"price_entries_effective_from_idx\").on(table.effectiveFrom)\n}));\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  awbNo: text(\"awb_no\").notNull(),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  productName: text(\"product_name\").notNull(),\n  courier: text(\"courier\"),\n  qty: integer(\"qty\").notNull().default(1),\n  currency: text(\"currency\").default(\"INR\"),\n  status: text(\"status\").notNull(),\n  orderAccount: text(\"order_account\"),\n  channelOrderDate: timestamp(\"channel_order_date\"),\n  orderDate: timestamp(\"order_date\"),\n  deliveredDate: timestamp(\"delivered_date\"),\n  rtsDate: timestamp(\"rts_date\"),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }),\n  lineAmount: decimal(\"line_amount\", { precision: 10, scale: 2 }),\n  hsn: text(\"hsn\"),\n  fileId: varchar(\"file_id\").references(() => uploadedFiles.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  previousStatus: text(\"previous_status\"),\n  deliveryAddress: text(\"delivery_address\"),\n  deliveryCity: text(\"delivery_city\"),\n  deliveryState: text(\"delivery_state\"),\n  deliveryPincode: text(\"delivery_pincode\"),\n  consigneeName: text(\"consignee_name\")\n}, (table) => ({\n  supplierIdx: index(\"orders_supplier_idx\").on(table.supplierId),\n  statusIdx: index(\"orders_status_idx\").on(table.status),\n  awbIdx: index(\"orders_awb_idx\").on(table.awbNo),\n  deliveredDateIdx: index(\"orders_delivered_date_idx\").on(table.deliveredDate),\n  orderDateIdx: index(\"orders_order_date_idx\").on(table.orderDate),\n  channelOrderDateIdx: index(\"orders_channel_order_date_idx\").on(table.channelOrderDate),\n  supplierProductIdx: index(\"orders_supplier_product_idx\").on(table.supplierId, table.productName),\n  deliveryStateIdx: index(\"orders_delivery_state_idx\").on(table.deliveryState)\n}));\n\nexport const reconciliationLog = pgTable(\"reconciliation_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  awbNo: text(\"awb_no\").notNull(),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  previousStatus: text(\"previous_status\"),\n  newStatus: text(\"new_status\").notNull(),\n  impact: decimal(\"impact\", { precision: 10, scale: 2 }).notNull(),\n  note: text(\"note\"),\n  timestamp: timestamp(\"timestamp\").defaultNow()\n});\n\n// Insert schemas\nexport const insertUploadedFileSchema = createInsertSchema(uploadedFiles).omit({\n  id: true,\n  uploadedAt: true\n});\n\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertPriceEntrySchema = createInsertSchema(priceEntries).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertReconciliationLogSchema = createInsertSchema(reconciliationLog).omit({\n  id: true,\n  timestamp: true\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUploadedFile = z.infer<typeof insertUploadedFileSchema>;\nexport type UploadedFile = typeof uploadedFiles.$inferSelect;\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertPriceEntry = z.infer<typeof insertPriceEntrySchema>;\nexport type PriceEntry = typeof priceEntries.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertReconciliationLog = z.infer<typeof insertReconciliationLogSchema>;\nexport type ReconciliationLog = typeof reconciliationLog.$inferSelect;\n\n// Additional schemas for API requests\nexport const columnMappingSchema = z.object({\n  supplierName: z.string(),\n  awbNo: z.string(),\n  productName: z.string(),\n  status: z.string(),\n  courier: z.string().optional(),\n  qty: z.string().optional(),\n  currency: z.string().optional(),\n  channelOrderDate: z.string().optional(),\n  orderDate: z.string().optional(),\n  deliveredDate: z.string().optional(),\n  rtsDate: z.string().optional(),\n  deliveryAddress: z.string().optional(),\n  deliveryCity: z.string().optional(),\n  deliveryState: z.string().optional(),\n  deliveryPincode: z.string().optional(),\n  consigneeName: z.string().optional()\n});\n\nexport const reportFiltersSchema = z.object({\n  periodFrom: z.string().optional(),\n  periodTo: z.string().optional(),\n  currency: z.string().optional(),\n  minAmount: z.number().optional(),\n  supplier: z.string().optional()\n});\n\nexport type ColumnMapping = z.infer<typeof columnMappingSchema>;\nexport type ReportFilters = z.infer<typeof reportFiltersSchema>;\n","size_bytes":7721},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport DataManagement from \"@/pages/data-management\";\nimport PriceManagement from \"@/pages/price-management\";\nimport Reports from \"@/pages/reports\";\nimport SupplierPerformance from \"@/pages/supplier-performance\";\nimport SupplierInformation from \"@/pages/supplier-information\";\nimport GSTInvoice from \"@/pages/gst-invoice\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/data-management\" component={DataManagement} />\n      <Route path=\"/price-management\" component={PriceManagement} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/supplier-performance\" component={SupplierPerformance} />\n      <Route path=\"/supplier/:supplierName\" component={SupplierInformation} />\n      <Route path=\"/gst-invoice\" component={GSTInvoice} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1440},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Global error handlers to prevent unhandled rejections\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('Unhandled promise rejection:', event.reason);\n  event.preventDefault();\n});\n\nwindow.addEventListener('error', (event) => {\n  console.error('Global error:', event.error);\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":465},"client/src/components/column-mapping.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Table2, Wand2, Info, CheckCircle, MinusCircle, AlertCircle } from \"lucide-react\";\nimport { detectColumnMapping } from \"@/lib/csv-parser\";\nimport { ProcessingProgress } from \"./processing-progress\";\n\ninterface ColumnMappingProps {\n  fileData: any;\n  onMappingComplete: (mapping: any, processedData: any) => void;\n}\n\nexport function ColumnMapping({ fileData, onMappingComplete }: ColumnMappingProps) {\n  const [mapping, setMapping] = useState<Record<string, string>>({});\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [requiredMappings] = useState([\n    { key: 'supplierName', label: 'SupplierName', required: true },\n    { key: 'awbNo', label: 'AWB No', required: true },\n    { key: 'productName', label: 'ProductName', required: true },\n    { key: 'status', label: 'Status', required: true }\n  ]);\n  \n  const [optionalMappings] = useState([\n    { key: 'orderAccount', label: 'Order Account', required: false },\n    { key: 'courier', label: 'Courier', required: false },\n    { key: 'qty', label: 'Qty', required: false },\n    { key: 'channelOrderDate', label: 'Channel Order Date', required: false },\n    { key: 'orderDate', label: 'Order Date', required: false },\n    { key: 'deliveredDate', label: 'Delivered Date', required: false },\n    { key: 'currency', label: 'Currency', required: false }\n  ]);\n\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (fileData?.headers) {\n      const autoMapping = detectColumnMapping(fileData.headers);\n      setMapping(autoMapping);\n    }\n  }, [fileData]);\n\n  const saveMappingMutation = useMutation({\n    mutationFn: async (mappingData: any) => {\n      return await apiRequest(`/api/files/${fileData.fileId}/mapping`, {\n        method: 'POST',\n        body: JSON.stringify(mappingData)\n      });\n    }\n  });\n\n  const processDataMutation = useMutation({\n    mutationFn: async () => {\n      setIsProcessing(true);\n      return await apiRequest(`/api/files/${fileData.fileId}/process`, {\n        method: 'POST',\n        body: JSON.stringify({})\n      });\n    },\n    onSuccess: (data) => {\n      // Don't immediately show success - let the progress component handle it\n      // setIsProcessing will be set to false by the progress component\n    },\n    onError: (error: any) => {\n      setIsProcessing(false);\n      \n      // Handle specific error cases with better messaging\n      let title = \"Processing failed\";\n      let description = \"There was an error processing your data. Please try again.\";\n      \n      // Check if it's a file session expired error (410 status)\n      if (error?.status === 410 || error?.message?.includes(\"session expired\") || error?.message?.includes(\"reupload\")) {\n        title = \"File Session Expired\";\n        description = \"Your uploaded file is no longer available due to server restart. Please re-upload your file and process it immediately.\";\n      } else if (error?.message) {\n        // Use the specific error message from the server\n        description = error.message;\n      }\n      \n      toast({\n        title,\n        description,\n        variant: \"destructive\"\n      });\n      console.error(\"Data processing error:\", error);\n    }\n  });\n\n  const handleMappingChange = (field: string, column: string) => {\n    setMapping(prev => ({\n      ...prev,\n      [field]: column === \"none\" ? \"\" : column\n    }));\n  };\n\n  const autoMapColumns = () => {\n    if (fileData?.headers) {\n      const autoMapping = detectColumnMapping(fileData.headers);\n      setMapping(autoMapping);\n      toast({\n        title: \"Auto-mapping applied\",\n        description: \"Column mappings have been automatically detected\"\n      });\n    }\n  };\n\n  const resetMapping = () => {\n    setMapping({});\n    toast({\n      title: \"Mapping reset\",\n      description: \"All column mappings have been cleared\"\n    });\n  };\n\n  const processMapping = async () => {\n    // Validate required mappings\n    const missingRequired = requiredMappings.filter(field => !mapping[field.key]);\n    if (missingRequired.length > 0) {\n      toast({\n        title: \"Missing required mappings\",\n        description: `Please map: ${missingRequired.map(f => f.label).join(', ')}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Save mapping first\n    await saveMappingMutation.mutateAsync(mapping);\n    \n    // Then process data\n    processDataMutation.mutate();\n  };\n\n  const getMappingStatus = (field: any) => {\n    const isMapped = !!mapping[field.key];\n    if (field.required && isMapped) {\n      return <CheckCircle className=\"h-4 w-4 text-success\" />;\n    } else if (field.required && !isMapped) {\n      return <AlertCircle className=\"h-4 w-4 text-error\" />;\n    } else if (!field.required && isMapped) {\n      return <CheckCircle className=\"h-4 w-4 text-success\" />;\n    } else {\n      return <MinusCircle className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const requiredMappedCount = requiredMappings.filter(field => mapping[field.key]).length;\n  const isProcessingReady = requiredMappedCount === requiredMappings.length;\n\n  const handleProcessingComplete = (success: boolean, errorMessage?: string) => {\n    setIsProcessing(false);\n    if (success) {\n      toast({\n        title: \"Processing Complete\",\n        description: \"Your data has been successfully processed and is now available in the dashboard.\",\n      });\n      onMappingComplete(mapping, { success: true });\n    } else {\n      let title = \"Processing Failed\";\n      let description = errorMessage || \"There was an error processing your data. Please try again.\";\n      \n      // Handle specific error cases\n      if (errorMessage?.includes(\"session expired\") || errorMessage?.includes(\"reupload\")) {\n        title = \"File Session Expired\";\n        description = \"Your uploaded file is no longer available due to server restart. Please re-upload your file and process it immediately.\";\n      }\n      \n      toast({\n        title,\n        description,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleCancelProcessing = () => {\n    setIsProcessing(false);\n    toast({\n      title: \"Processing Cancelled\",\n      description: \"Data processing has been cancelled.\",\n      variant: \"destructive\"\n    });\n  };\n\n  // Show progress component when processing\n  if (isProcessing) {\n    return (\n      <ProcessingProgress\n        fileId={fileData.fileId}\n        onComplete={handleProcessingComplete}\n        onCancel={handleCancelProcessing}\n      />\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <Table2 className=\"text-primary text-xl\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Column Mapping</h2>\n        </div>\n        <Button\n          variant=\"outline\"\n          onClick={autoMapColumns}\n          data-testid=\"button-auto-map\"\n        >\n          <Wand2 className=\"h-4 w-4 mr-1\" />\n          Auto-map columns\n        </Button>\n      </div>\n\n      {/* Mapping Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Required Mappings */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium text-gray-900 flex items-center\">\n            <AlertCircle className=\"h-4 w-4 text-error mr-2\" />\n            Required Mappings\n          </h3>\n          \n          {requiredMappings.map((field) => (\n            <div key={field.key} className=\"flex items-center space-x-3\" data-testid={`mapping-${field.key}`}>\n              <label className=\"w-32 text-sm font-medium text-gray-700\">\n                {field.label}\n              </label>\n              <Select\n                value={mapping[field.key] || \"none\"}\n                onValueChange={(value) => handleMappingChange(field.key, value)}\n              >\n                <SelectTrigger className=\"flex-1\">\n                  <SelectValue placeholder=\"Select column...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Select column...</SelectItem>\n                  {fileData?.headers?.filter((header: string) => header && header.trim() !== '').map((header: string, index: number) => (\n                    <SelectItem key={`required-${header}-${index}`} value={header}>\n                      {header}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {getMappingStatus(field)}\n            </div>\n          ))}\n        </div>\n\n        {/* Optional Mappings */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium text-gray-900\">Optional Mappings</h3>\n          \n          {optionalMappings.map((field) => (\n            <div key={field.key} className=\"flex items-center space-x-3\" data-testid={`mapping-${field.key}`}>\n              <label className=\"w-32 text-sm font-medium text-gray-700\">\n                {field.label}\n              </label>\n              <Select\n                value={mapping[field.key] || \"none\"}\n                onValueChange={(value) => handleMappingChange(field.key, value)}\n              >\n                <SelectTrigger className=\"flex-1\">\n                  <SelectValue placeholder=\"Select column...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Select column...</SelectItem>\n                  {fileData?.headers?.filter((header: string) => header && header.trim() !== '').map((header: string, index: number) => (\n                    <SelectItem key={`optional-${header}-${index}`} value={header}>\n                      {header}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {getMappingStatus(field)}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Mapping Actions */}\n      <div className=\"mt-6 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n          <Info className=\"h-4 w-4 text-primary\" />\n          <span data-testid=\"text-mapping-status\">\n            {requiredMappedCount} required mappings completed\n          </span>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button \n            variant=\"outline\" \n            onClick={resetMapping}\n            data-testid=\"button-reset-mapping\"\n          >\n            Reset\n          </Button>\n          <Button \n            onClick={processMapping}\n            disabled={!isProcessingReady || processDataMutation.isPending || isProcessing}\n            data-testid=\"button-process-data\"\n          >\n            {processDataMutation.isPending || isProcessing ? (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                <span>Starting...</span>\n              </div>\n            ) : (\n              \"Process Data\"\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11457},"client/src/components/data-transparency.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Database, Users, Package, TrendingUp, Search, Filter, Eye, Download } from \"lucide-react\";\n\nexport function DataTransparency() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedSupplier, setSelectedSupplier] = useState(\"all\");\n  const [orderStatusFilter, setOrderStatusFilter] = useState(\"all\");\n\n  // Fetch all data\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: ['/api/orders'],\n    refetchInterval: 30000\n  });\n\n  const { data: suppliers = [], isLoading: suppliersLoading } = useQuery({\n    queryKey: ['/api/suppliers'],\n    refetchInterval: 30000\n  });\n\n  const { data: priceEntries = [], isLoading: priceLoading } = useQuery({\n    queryKey: ['/api/price-entries'],\n    refetchInterval: 30000\n  });\n\n  const { data: dashboardStats } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    refetchInterval: 30000\n  });\n\n  // Create enriched orders data with supplier names\n  const enrichedOrders = orders.map(order => {\n    const supplier = suppliers.find(s => s.id === order.supplierId);\n    return {\n      ...order,\n      supplierName: supplier?.name || 'Unknown Supplier'\n    };\n  });\n\n  // Create enriched price entries with supplier names\n  const enrichedPriceEntries = priceEntries.map(entry => {\n    const supplier = suppliers.find(s => s.id === entry.supplierId);\n    return {\n      ...entry,\n      supplierName: supplier?.name || 'Unknown Supplier'\n    };\n  });\n\n  // Filter functions\n  const filteredOrders = enrichedOrders.filter(order => {\n    const matchesSearch = order.productName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.supplierName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.awbNo?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSupplier = selectedSupplier === \"all\" || order.supplierName === selectedSupplier;\n    const matchesStatus = orderStatusFilter === \"all\" || order.status?.toLowerCase() === orderStatusFilter.toLowerCase();\n    return matchesSearch && matchesSupplier && matchesStatus;\n  });\n\n  const filteredPriceEntries = enrichedPriceEntries.filter(entry => {\n    const matchesSearch = entry.productName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         entry.supplierName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSupplier = selectedSupplier === \"all\" || entry.supplierName === selectedSupplier;\n    return matchesSearch && matchesSupplier;\n  });\n\n  // Aggregate data for supplier overview\n  const supplierStats = suppliers.map(supplier => {\n    const supplierOrders = enrichedOrders.filter(order => order.supplierId === supplier.id);\n    const supplierPrices = enrichedPriceEntries.filter(entry => entry.supplierId === supplier.id);\n    const uniqueProducts = new Set(supplierOrders.map(order => order.productName)).size;\n    const deliveredOrders = supplierOrders.filter(order => order.status?.toLowerCase() === 'delivered').length;\n    const rtoOrders = supplierOrders.filter(order => order.status?.toLowerCase() === 'rto').length;\n    const rtsOrders = supplierOrders.filter(order => order.status?.toLowerCase() === 'rts').length;\n\n    return {\n      ...supplier,\n      totalOrders: supplierOrders.length,\n      uniqueProducts,\n      priceEntriesCount: supplierPrices.length,\n      deliveredOrders,\n      rtoOrders,\n      rtsOrders,\n      ordersWithoutPrices: uniqueProducts - supplierPrices.length\n    };\n  });\n\n  // Product analysis\n  const productStats = {};\n  enrichedOrders.forEach(order => {\n    const key = `${order.supplierName}-${order.productName}`;\n    if (!productStats[key]) {\n      productStats[key] = {\n        supplierName: order.supplierName,\n        productName: order.productName,\n        totalOrders: 0,\n        delivered: 0,\n        rto: 0,\n        rts: 0,\n        hasPrice: enrichedPriceEntries.some(pe => \n          pe.supplierId === order.supplierId && \n          pe.productName === order.productName\n        )\n      };\n    }\n    productStats[key].totalOrders++;\n    if (order.status?.toLowerCase() === 'delivered') productStats[key].delivered++;\n    if (order.status?.toLowerCase() === 'rto') productStats[key].rto++;\n    if (order.status?.toLowerCase() === 'rts') productStats[key].rts++;\n  });\n\n  const productStatsArray = Object.values(productStats);\n\n  if (ordersLoading || suppliersLoading || priceLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Database className=\"h-5 w-5\" />\n            <span>Database Transparency</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-muted-foreground\">Loading data...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Eye className=\"h-5 w-5\" />\n            <span>Complete Database Transparency</span>\n          </CardTitle>\n          <CardDescription>\n            View all stored data with complete transparency - suppliers, orders, pricing, and analytics\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-4 w-4 text-blue-600\" />\n              <div>\n                <div className=\"text-2xl font-bold\">{dashboardStats?.totalOrders || 0}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Orders</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-4 w-4 text-green-600\" />\n              <div>\n                <div className=\"text-2xl font-bold\">{suppliers.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Suppliers</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n              <div>\n                <div className=\"text-2xl font-bold\">{priceEntries.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Price Entries</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Database className=\"h-4 w-4 text-orange-600\" />\n              <div>\n                <div className=\"text-2xl font-bold\">{productStatsArray.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Unique Products</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex-1 min-w-64\">\n              <Input\n                placeholder=\"Search products, suppliers, AWB numbers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={selectedSupplier} onValueChange={setSelectedSupplier}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-supplier\">\n                <SelectValue placeholder=\"Filter by supplier\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Suppliers</SelectItem>\n                {suppliers.map(supplier => (\n                  <SelectItem key={supplier.id} value={supplier.name}>\n                    {supplier.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={orderStatusFilter} onValueChange={setOrderStatusFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"delivered\">Delivered</SelectItem>\n                <SelectItem value=\"rto\">RTO</SelectItem>\n                <SelectItem value=\"rts\">RTS</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Data Tables */}\n      <Tabs defaultValue=\"suppliers\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"suppliers\" data-testid=\"tab-suppliers\">Suppliers Overview</TabsTrigger>\n          <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Orders Data</TabsTrigger>\n          <TabsTrigger value=\"pricing\" data-testid=\"tab-pricing\">Pricing Data</TabsTrigger>\n          <TabsTrigger value=\"products\" data-testid=\"tab-products\">Product Analysis</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"suppliers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Supplier Performance Overview</CardTitle>\n              <CardDescription>Complete supplier-wise breakdown with order counts and pricing status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Supplier Name</TableHead>\n                    <TableHead>Total Orders</TableHead>\n                    <TableHead>Unique Products</TableHead>\n                    <TableHead>Price Entries</TableHead>\n                    <TableHead>Missing Prices</TableHead>\n                    <TableHead>Delivered</TableHead>\n                    <TableHead>RTO</TableHead>\n                    <TableHead>RTS</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {supplierStats.map(supplier => (\n                    <TableRow key={supplier.id}>\n                      <TableCell className=\"font-medium\">{supplier.name}</TableCell>\n                      <TableCell>\n                        <Badge variant={supplier.totalOrders > 0 ? \"default\" : \"secondary\"}>\n                          {supplier.totalOrders}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{supplier.uniqueProducts}</TableCell>\n                      <TableCell>\n                        <Badge variant={supplier.priceEntriesCount > 0 ? \"default\" : \"destructive\"}>\n                          {supplier.priceEntriesCount}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={supplier.ordersWithoutPrices > 0 ? \"destructive\" : \"default\"}>\n                          {supplier.ordersWithoutPrices}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{supplier.deliveredOrders}</TableCell>\n                      <TableCell>{supplier.rtoOrders}</TableCell>\n                      <TableCell>{supplier.rtsOrders}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Orders Database</CardTitle>\n              <CardDescription>All orders with supplier mapping and status ({filteredOrders.length} of {orders.length} shown)</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-96 overflow-y-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>AWB No</TableHead>\n                      <TableHead>Order Account</TableHead>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Product</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Qty</TableHead>\n                      <TableHead>Order Date</TableHead>\n                      <TableHead>Delivered Date</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredOrders.slice(0, 100).map(order => (\n                      <TableRow key={order.id}>\n                        <TableCell className=\"font-mono text-xs\">{order.awbNo}</TableCell>\n                        <TableCell className=\"text-sm text-blue-600\">{order.orderAccount || 'N/A'}</TableCell>\n                        <TableCell className=\"font-medium\">{order.supplierName}</TableCell>\n                        <TableCell className=\"max-w-48 truncate\" title={order.productName}>\n                          {order.productName}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={\n                              order.status?.toLowerCase() === 'delivered' ? 'default' : \n                              order.status?.toLowerCase() === 'rto' ? 'destructive' : \n                              order.status?.toLowerCase() === 'rts' ? 'secondary' : 'outline'\n                            }\n                          >\n                            {order.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{order.qty}</TableCell>\n                        <TableCell>{order.orderDate ? new Date(order.orderDate).toLocaleDateString() : '-'}</TableCell>\n                        <TableCell>{order.deliveredDate ? new Date(order.deliveredDate).toLocaleDateString() : '-'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {filteredOrders.length > 100 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    Showing first 100 of {filteredOrders.length} orders. Use filters to narrow down results.\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"pricing\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Pricing Database</CardTitle>\n              <CardDescription>All price entries with supplier mapping ({filteredPriceEntries.length} entries)</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {priceEntries.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Package className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"font-medium mb-2\">No Price Entries Found</h3>\n                  <p>Upload and configure price entries to see pricing data here.</p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Product Name</TableHead>\n                      <TableHead>Price</TableHead>\n                      <TableHead>Currency</TableHead>\n                      <TableHead>HSN</TableHead>\n                      <TableHead>Effective From</TableHead>\n                      <TableHead>Effective To</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPriceEntries.map(entry => (\n                      <TableRow key={entry.id}>\n                        <TableCell className=\"font-medium\">{entry.supplierName}</TableCell>\n                        <TableCell>{entry.productName}</TableCell>\n                        <TableCell className=\"font-mono\">{entry.price}</TableCell>\n                        <TableCell>{entry.currency}</TableCell>\n                        <TableCell>{entry.hsn}</TableCell>\n                        <TableCell>{entry.effectiveFrom ? new Date(entry.effectiveFrom).toLocaleDateString() : '-'}</TableCell>\n                        <TableCell>{entry.effectiveTo ? new Date(entry.effectiveTo).toLocaleDateString() : 'Active'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"products\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Product Analysis</CardTitle>\n              <CardDescription>Supplier-product combinations with order counts and pricing status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Supplier</TableHead>\n                    <TableHead>Product Name</TableHead>\n                    <TableHead>Total Orders</TableHead>\n                    <TableHead>Delivered</TableHead>\n                    <TableHead>RTO</TableHead>\n                    <TableHead>RTS</TableHead>\n                    <TableHead>Price Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {productStatsArray\n                    .filter(product => {\n                      const matchesSearch = product.productName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                                           product.supplierName?.toLowerCase().includes(searchTerm.toLowerCase());\n                      const matchesSupplier = selectedSupplier === \"all\" || product.supplierName === selectedSupplier;\n                      return matchesSearch && matchesSupplier;\n                    })\n                    .sort((a, b) => b.totalOrders - a.totalOrders)\n                    .map((product, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"font-medium\">{product.supplierName}</TableCell>\n                      <TableCell className=\"max-w-64 truncate\" title={product.productName}>\n                        {product.productName}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{product.totalOrders}</Badge>\n                      </TableCell>\n                      <TableCell>{product.delivered}</TableCell>\n                      <TableCell>{product.rto}</TableCell>\n                      <TableCell>{product.rts}</TableCell>\n                      <TableCell>\n                        <Badge variant={product.hasPrice ? \"default\" : \"destructive\"}>\n                          {product.hasPrice ? \"Price Set\" : \"Missing Price\"}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":20236},"client/src/components/file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CloudUpload, FileText, Info } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface FileUploadProps {\n  onFileUploaded: (data: any) => void;\n}\n\nexport function FileUpload({ onFileUploaded }: FileUploadProps) {\n  const [dragActive, setDragActive] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [showProgress, setShowProgress] = useState(false);\n  const [processingStage, setProcessingStage] = useState(\"\");\n  const [fileSize, setFileSize] = useState(0);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      setShowProgress(true);\n      setFileSize(file.size);\n      \n      // Enhanced progress simulation with stages\n      let progress = 0;\n      let currentStage = 0;\n      const stages = [\n        { name: \"Preparing file...\", duration: 500, maxProgress: 20 },\n        { name: \"Uploading...\", duration: 1000, maxProgress: 60 },\n        { name: \"Processing Excel data...\", duration: 800, maxProgress: 85 },\n        { name: \"Analyzing columns...\", duration: 400, maxProgress: 95 }\n      ];\n      \n      const progressInterval = setInterval(() => {\n        if (currentStage < stages.length) {\n          const stage = stages[currentStage];\n          setProcessingStage(stage.name);\n          \n          if (progress < stage.maxProgress) {\n            const increment = (stage.maxProgress - progress) / (stage.duration / 100);\n            progress = Math.min(progress + increment, stage.maxProgress);\n            setUploadProgress(progress);\n          } else {\n            currentStage++;\n          }\n        }\n      }, 100);\n\n      // Add timeout for large files\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5 * 60 * 1000); // 5 minutes timeout\n      \n      const response = await fetch('/api/files/upload', {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n        // Don't set Content-Type for FormData - browser will set it automatically with boundary\n      });\n      \n      clearTimeout(timeoutId);\n\n      clearInterval(progressInterval);\n      setProcessingStage(\"Finalizing...\");\n      setUploadProgress(100);\n      \n      if (!response.ok) {\n        // Check if response is JSON error\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          const errorData = await response.json(); // Keep .json() for fetch calls\n          throw new Error(errorData.error || errorData.message || response.statusText);\n        } else {\n          throw new Error(`Upload failed: ${response.statusText}`);\n        }\n      }\n      \n      // Check if response is JSON before parsing\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json(); // Keep .json() for fetch calls\n      } else {\n        const text = await response.text();\n        console.warn('Non-JSON upload response:', text.substring(0, 200));\n        \n        // If we get HTML, it means Vite intercepted our API call\n        if (text.includes('<!DOCTYPE html>')) {\n          throw new Error('File upload failed: Server configuration issue');\n        }\n        throw new Error('Server returned non-JSON response for file upload');\n      }\n    },\n    onSuccess: (data) => {\n      const sizeInMB = data.size / (1024 * 1024);\n      const sizeText = sizeInMB > 1 \n        ? `${sizeInMB.toFixed(1)} MB` \n        : `${(data.size / 1024).toFixed(1)} KB`;\n      \n      toast({\n        title: \"File uploaded successfully\",\n        description: `${data.filename} (${sizeText}) - Ready for column mapping`\n      });\n      onFileUploaded(data);\n      \n      // Reset states\n      setTimeout(() => {\n        setShowProgress(false);\n        setUploadProgress(0);\n        setProcessingStage(\"\");\n        setFileSize(0);\n      }, 1000);\n    },\n    onError: (error) => {\n      let title = \"Upload failed\";\n      let description = error.message;\n      \n      // Handle specific error cases\n      if (error.name === 'AbortError') {\n        title = \"Upload timeout\";\n        description = \"File upload took too long and was cancelled. Please try uploading a smaller file or check your internet connection.\";\n      } else if (error.message?.includes(\"too large\") || error.message?.includes(\"413\")) {\n        title = \"File too large\";\n        description = \"Your file is too large for database storage. Try uploading a smaller file (under 10MB) or contact support for assistance.\";\n      } else if (error.message?.includes(\"Failed to fetch\")) {\n        title = \"Connection error\";\n        description = \"Could not connect to server. Please check your internet connection and try again.\";\n      }\n      \n      toast({\n        title,\n        description,\n        variant: \"destructive\"\n      });\n      \n      // Reset states\n      setShowProgress(false);\n      setUploadProgress(0);\n      setProcessingStage(\"\");\n      setFileSize(0);\n    }\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFile(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      handleFile(e.target.files[0]);\n    }\n  };\n\n  const handleFile = (file: File) => {\n    // Validate file type\n    const allowedTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    if (!allowedTypes.includes(file.type) && !file.name.toLowerCase().endsWith('.csv')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload CSV or Excel files only\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Validate file size (200MB limit)\n    if (file.size > 200 * 1024 * 1024) {\n      const sizeMB = (file.size / (1024 * 1024)).toFixed(1);\n      toast({\n        title: \"File too large\",\n        description: `Please upload files smaller than 200MB. Current file: ${sizeMB}MB`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Warn about large files (>20MB) that may have storage limitations\n    const LARGE_FILE_WARNING_SIZE = 20 * 1024 * 1024; // 20MB\n    if (file.size > LARGE_FILE_WARNING_SIZE) {\n      const sizeMB = (file.size / (1024 * 1024)).toFixed(1);\n      toast({\n        title: \"Large file detected\",\n        description: `File size: ${sizeMB}MB. Large files are stored in memory and should be processed immediately after upload to avoid data loss on server restart.`,\n        variant: \"default\"\n      });\n    }\n\n    uploadMutation.mutate(file);\n  };\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <CloudUpload className=\"text-primary text-xl\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Data Upload</h2>\n        </div>\n        <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n          <Info className=\"h-4 w-4\" />\n          <span>Supports CSV and Excel files up to 200MB</span>\n        </div>\n      </div>\n\n      {/* File Drop Zone */}\n      <div\n        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors duration-200 ${\n          dragActive \n            ? 'border-primary bg-primary/5' \n            : 'border-gray-300 hover:border-primary'\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        data-testid=\"file-drop-zone\"\n      >\n        <div className=\"flex flex-col items-center space-y-4\">\n          <FileText className=\"h-16 w-16 text-gray-400\" />\n          <div>\n            <p className=\"text-lg font-medium text-gray-700\">Drop your CSV/Excel file here</p>\n            <p className=\"text-sm text-gray-500 mt-1\">or click to browse files</p>\n          </div>\n          <Button \n            onClick={openFileDialog}\n            disabled={uploadMutation.isPending}\n            data-testid=\"button-choose-file\"\n          >\n            Choose File\n          </Button>\n        </div>\n      </div>\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".csv,.xls,.xlsx\"\n        onChange={handleFileInput}\n        className=\"hidden\"\n      />\n\n      {/* Enhanced Upload Progress */}\n      {showProgress && (\n        <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\" data-testid=\"upload-progress\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-primary\"></div>\n              <span className=\"text-sm font-medium text-gray-900\">{processingStage || \"Processing...\"}</span>\n            </div>\n            <span className=\"text-sm font-semibold text-primary\">{Math.round(uploadProgress)}%</span>\n          </div>\n          <Progress value={uploadProgress} className=\"h-3 mb-2\" />\n          {fileSize > 0 && (\n            <div className=\"flex justify-between items-center text-xs text-gray-600\">\n              <span>File size: {(fileSize / (1024 * 1024)).toFixed(1)} MB</span>\n              <span>Fast processing enabled for large files</span>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10424},"client/src/components/payout-summary.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { DollarSign, Building2, CheckCheck, Clock, Eye } from \"lucide-react\";\n\nexport function PayoutSummary() {\n  const [selectedSupplier, setSelectedSupplier] = useState(\"\");\n\n  // Mock data for demonstration - in real app this would come from API\n  const mockSummaryData = {\n    totalPayout: \"‚Çπ12,45,680.50\",\n    suppliersCount: 47,\n    deliveredOrders: 2156,\n    lastUpdated: \"2 minutes ago\"\n  };\n\n  const mockTopSuppliers = [\n    {\n      id: \"sup-001\",\n      name: \"Supplier ABC Ltd\",\n      initials: \"ABC\",\n      totalOrders: 324,\n      deliveredCount: 298,\n      rtsCount: 26,\n      netPayable: \"‚Çπ2,84,560.50\",\n      currency: \"INR\",\n      bgColor: \"bg-primary\"\n    },\n    {\n      id: \"sup-002\", \n      name: \"XYZ Electronics\",\n      initials: \"XYZ\",\n      totalOrders: 289,\n      deliveredCount: 267,\n      rtsCount: 22,\n      netPayable: \"‚Çπ2,45,890.25\",\n      currency: \"INR\",\n      bgColor: \"bg-green-600\"\n    },\n    {\n      id: \"sup-003\",\n      name: \"Global Tech Solutions\", \n      initials: \"GT\",\n      totalOrders: 245,\n      deliveredCount: 231,\n      rtsCount: 14,\n      netPayable: \"‚Çπ1,98,750.00\",\n      currency: \"INR\",\n      bgColor: \"bg-purple-600\"\n    }\n  ];\n\n  const handleViewSupplierDetails = (supplierId: string) => {\n    setSelectedSupplier(supplierId);\n    // In real app, this would navigate to detailed supplier view\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <DollarSign className=\"text-primary text-xl\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Final Payout Summary</h2>\n        </div>\n        <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n          <Clock className=\"h-4 w-4\" />\n          <span data-testid=\"text-last-updated\">Last updated: {mockSummaryData.lastUpdated}</span>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n        <Card className=\"p-6 bg-green-50 border-green-200\">\n          <CardContent className=\"p-0\">\n            <div className=\"text-center\">\n              <DollarSign className=\"mx-auto h-8 w-8 text-green-600 mb-2\" />\n              <p className=\"text-2xl font-bold text-green-900\" data-testid=\"text-total-payout\">\n                {mockSummaryData.totalPayout}\n              </p>\n              <p className=\"text-sm text-green-700\">Total Payable (INR)</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"p-6 bg-blue-50 border-blue-200\">\n          <CardContent className=\"p-0\">\n            <div className=\"text-center\">\n              <Building2 className=\"mx-auto h-8 w-8 text-blue-600 mb-2\" />\n              <p className=\"text-2xl font-bold text-blue-900\" data-testid=\"text-suppliers-count\">\n                {mockSummaryData.suppliersCount}\n              </p>\n              <p className=\"text-sm text-blue-700\">Suppliers to Pay</p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"p-6 bg-purple-50 border-purple-200\">\n          <CardContent className=\"p-0\">\n            <div className=\"text-center\">\n              <CheckCheck className=\"mx-auto h-8 w-8 text-purple-600 mb-2\" />\n              <p className=\"text-2xl font-bold text-purple-900\" data-testid=\"text-delivered-orders-summary\">\n                {mockSummaryData.deliveredOrders}\n              </p>\n              <p className=\"text-sm text-purple-700\">Delivered Orders</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Top Suppliers Table */}\n      <div>\n        <h3 className=\"font-medium text-gray-900 mb-4\">Top Suppliers by Payout</h3>\n        <div className=\"overflow-hidden border border-gray-200 rounded-lg\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"bg-gray-50\">\n                <TableHead>Supplier</TableHead>\n                <TableHead>Orders</TableHead>\n                <TableHead>Delivered</TableHead>\n                <TableHead>RTS/RTO</TableHead>\n                <TableHead>Net Payable</TableHead>\n                <TableHead>Currency</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {mockTopSuppliers.map((supplier) => (\n                <TableRow key={supplier.id} className=\"hover:bg-gray-50\">\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 ${supplier.bgColor} text-white rounded-full flex items-center justify-center text-sm font-medium`}>\n                        {supplier.initials}\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\" data-testid={`text-supplier-name-${supplier.id}`}>\n                          {supplier.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">{supplier.id.toUpperCase()}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell data-testid={`text-total-orders-${supplier.id}`}>{supplier.totalOrders}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                      {supplier.deliveredCount}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\n                      {supplier.rtsCount}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"font-semibold\" data-testid={`text-net-payable-${supplier.id}`}>\n                    {supplier.netPayable}\n                  </TableCell>\n                  <TableCell className=\"text-gray-600\">{supplier.currency}</TableCell>\n                  <TableCell>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleViewSupplierDetails(supplier.id)}\n                      data-testid={`button-view-details-${supplier.id}`}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      View Details\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6969},"client/src/components/price-hsn-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { Tags, Upload, Plus, Edit, Trash2, Database, Download, ExternalLink, Search, Filter, FileDown, FileUp } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from 'wouter';\nimport * as XLSX from 'xlsx';\n\ninterface PriceHSNManagementProps {\n  onSetupComplete: () => void;\n}\n\ninterface PriceEntryForm {\n  supplierId: string;\n  productName: string;\n  currency: string;\n  price: number;\n  hsn: string;\n  effectiveFrom: string;\n  effectiveTo?: string;\n}\n\nexport function PriceHSNManagement({ onSetupComplete }: PriceHSNManagementProps) {\n  const [selectedSupplier, setSelectedSupplier] = useState(\"all\");\n  const [pricingBasis, setPricingBasis] = useState(\"delivered_date\");\n  const [showPriceModal, setShowPriceModal] = useState(false);\n  const [showBulkImportModal, setShowBulkImportModal] = useState(false);\n  const [showBulkAddModal, setShowBulkAddModal] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<any>(null);\n  const [bulkPrices, setBulkPrices] = useState<{[key: string]: { price: string, hsn: string, gstRate?: string }}>({});\n  const [selectedBulkFile, setSelectedBulkFile] = useState<File | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  \n  // Missing products modal filters\n  const [supplierSearchQuery, setSupplierSearchQuery] = useState('');\n  const [minOrderCount, setMinOrderCount] = useState('');\n  const [maxOrderCount, setMaxOrderCount] = useState('');\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { register, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<PriceEntryForm>({\n    defaultValues: {\n      supplierId: '',\n      productName: '',\n      currency: 'INR',\n      price: 0,\n      hsn: '',\n      effectiveFrom: '',\n      effectiveTo: ''\n    }\n  });\n\n  // Fetch price entries\n  const { data: priceEntries = [], isLoading: loadingPrices, error: priceEntriesError } = useQuery({\n    queryKey: ['/api/price-entries', selectedSupplier],\n    queryFn: async () => {\n      const params = (selectedSupplier && selectedSupplier !== 'all') ? `?supplier=${selectedSupplier}` : '';\n      const response = await fetch(`/api/price-entries${params}`);\n      if (!response.ok) {\n        console.error(`API Error: ${response.status} ${response.statusText}`);\n        throw new Error(`Failed to fetch price entries: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('Price entries data type:', typeof data, 'isArray:', Array.isArray(data), 'data:', data);\n      return Array.isArray(data) ? data : [];\n    },\n    retry: 3,\n    retryDelay: 1000\n  });\n\n  // Fetch suppliers\n  const { data: suppliers = [] } = useQuery({\n    queryKey: ['/api/suppliers'],\n    queryFn: async () => {\n      const response = await fetch('/api/suppliers');\n      return response.json(); // Keep .json() for fetch calls\n    }\n  });\n\n  // Fetch missing price entries (vendor-product combinations needing prices)\n  const { data: missingPriceEntries = [] } = useQuery({\n    queryKey: ['/api/missing-price-entries'],\n    queryFn: async () => {\n      const response = await fetch('/api/missing-price-entries');\n      return response.json(); // Keep .json() for fetch calls\n    }\n  });\n\n  // Filter missing price entries based on search and order count filters\n  const filteredMissingEntries = missingPriceEntries.filter((entry: any) => {\n    // Supplier name filter\n    const supplierMatch = !supplierSearchQuery || \n      entry.supplierName.toLowerCase().includes(supplierSearchQuery.toLowerCase());\n    \n    // Order count filter\n    const orderCount = entry.orderCount || 0;\n    const minMatch = !minOrderCount || orderCount >= parseInt(minOrderCount);\n    const maxMatch = !maxOrderCount || orderCount <= parseInt(maxOrderCount);\n    \n    return supplierMatch && minMatch && maxMatch;\n  });\n\n  const createPriceEntryMutation = useMutation({\n    mutationFn: async (data: PriceEntryForm) => {\n      // Convert date strings to Date objects for database\n      const processedData = {\n        ...data,\n        effectiveFrom: data.effectiveFrom ? new Date(data.effectiveFrom) : new Date(),\n        effectiveTo: data.effectiveTo && data.effectiveTo.trim() ? new Date(data.effectiveTo) : null,\n      };\n      \n      return await apiRequest('POST', '/api/price-entries', processedData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Price entry created\",\n        description: \"Price/HSN entry has been successfully added\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/price-entries'] });\n      reset();\n      setShowPriceModal(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to create entry\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updatePriceEntryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: Partial<PriceEntryForm> }) => {\n      console.log('Updating price entry:', id, data);\n      try {\n        // Convert date strings to Date objects for database\n        const processedData = {\n          ...data,\n          effectiveFrom: data.effectiveFrom ? new Date(data.effectiveFrom) : undefined,\n          effectiveTo: data.effectiveTo && data.effectiveTo.trim() ? new Date(data.effectiveTo) : null,\n        };\n        \n        console.log('Processed data for API:', processedData);\n        \n        const response = await fetch(`/api/price-entries/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(processedData),\n        });\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('API Error Response:', errorText);\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('Price entry updated successfully:', result);\n        return result;\n      } catch (error) {\n        console.error('Update API error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      console.log('Update mutation succeeded:', data);\n      toast({\n        title: \"Price entry updated\",\n        description: \"Price/HSN entry has been successfully updated\"\n      });\n      // Force cache refresh to show updated values immediately\n      queryClient.invalidateQueries({ queryKey: ['/api/price-entries'] });\n      queryClient.refetchQueries({ queryKey: ['/api/price-entries'] });\n      setEditingEntry(null);\n      setShowPriceModal(false);\n      reset();\n    },\n    onError: (error) => {\n      console.error('Update price entry error:', error);\n      toast({\n        title: \"Update Failed\", \n        description: \"Could not update price entry. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deletePriceEntryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/price-entries/${id}`, undefined);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Price entry deleted\",\n        description: \"Price/HSN entry has been successfully deleted\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/price-entries'] });\n    }\n  });\n\n  const onSubmit = async (data: PriceEntryForm) => {\n    console.log('Form submitted with data:', data);\n\n    // Validate required fields\n    if (!data.supplierId) {\n      toast({\n        title: \"Error\",\n        description: \"Supplier select karna zaroori hai\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!data.productName?.trim()) {\n      toast({\n        title: \"Error\", \n        description: \"Product name fill karna zaroori hai\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!data.hsn?.trim()) {\n      toast({\n        title: \"Error\", \n        description: \"HSN code fill karna zaroori hai\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!data.effectiveFrom) {\n      toast({\n        title: \"Error\", \n        description: \"Effective date select karna zaroori hai\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Allow price = 0 as it's a valid price (not missing price)\n    if (data.price < 0) {\n      toast({\n        title: \"Error\", \n        description: \"Price negative nahi ho sakta\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      // Calculate GST amounts automatically\n      const finalPrice = parseFloat(data.price.toString());\n      const gstRate = 18.0; // Default GST rate - can be made configurable later\n      const priceBeforeGst = finalPrice / (1 + gstRate/100);\n      \n      console.log('GST Calculation:', {\n        finalPrice,\n        gstRate,\n        priceBeforeGst: priceBeforeGst.toFixed(2)\n      });\n      \n      // Format the data with automatic GST calculation\n      const formattedData = {\n        supplierId: data.supplierId || '',\n        productName: data.productName.trim(),\n        currency: data.currency || 'INR',\n        price: finalPrice,\n        priceBeforeGst: parseFloat(priceBeforeGst.toFixed(2)),\n        gstRate: gstRate,\n        hsn: data.hsn.trim(),\n        effectiveFrom: data.effectiveFrom,\n        effectiveTo: data.effectiveTo || ''\n      };\n\n      console.log('Sending data to API:', formattedData);\n\n      if (editingEntry) {\n        await updatePriceEntryMutation.mutateAsync({ id: editingEntry.id, data: formattedData });\n      } else {\n        await createPriceEntryMutation.mutateAsync(formattedData);\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Entry save nahi ho paa rahi. Try again kijiye\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const openEditModal = (entry: any) => {\n    setEditingEntry(entry);\n    setValue('supplierId', entry.supplierId);\n    setValue('productName', entry.productName);\n    setValue('currency', entry.currency);\n    setValue('price', parseFloat(entry.price));\n    setValue('hsn', entry.hsn);\n    setValue('effectiveFrom', entry.effectiveFrom?.split('T')[0] || '');\n    setValue('effectiveTo', entry.effectiveTo?.split('T')[0] || '');\n    setShowPriceModal(true);\n  };\n\n  const quickAddFromMissing = (missingEntry: any) => {\n    setEditingEntry(null);\n    \n    // Find supplier ID from suppliers list\n    const supplierMatch = suppliers.find((s: any) => s.name === missingEntry.supplierName);\n    const supplierId = supplierMatch?.id || '';\n    \n    reset({\n      supplierId: supplierId,\n      productName: missingEntry.productName,\n      currency: 'INR',\n      price: 0,\n      hsn: '',\n      effectiveFrom: new Date().toISOString().split('T')[0],\n      effectiveTo: ''\n    });\n    \n    setShowPriceModal(true);\n    \n    toast({\n      title: \"Quick Add Mode\",\n      description: `Adding price for ${missingEntry.productName} from ${missingEntry.supplierName}`,\n    });\n  };\n\n  // Handle bulk price updates\n  const updateBulkPrice = (productKey: string, field: 'price' | 'hsn' | 'gstRate', value: string) => {\n    setBulkPrices(prev => ({\n      ...prev,\n      [productKey]: {\n        ...prev[productKey],\n        [field]: value\n      }\n    }));\n  };\n\n  const saveBulkPrices = async () => {\n    const entries = Object.entries(bulkPrices).filter(([_, data]) => \n      data.price && parseFloat(data.price) > 0 && data.hsn?.trim() && data.gstRate\n    );\n\n    if (entries.length === 0) {\n      toast({\n        title: \"No entries to save\",\n        description: \"Please fill price and HSN for at least one product\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      for (const [productKey, data] of entries) {\n        const entry = missingPriceEntries.find((e: any) => \n          `${e.supplierName}_${e.productName}` === productKey\n        );\n        \n        if (entry) {\n          const supplierMatch = suppliers.find((s: any) => s.name === entry.supplierName);\n          const finalPrice = parseFloat(data.price);\n          const gstRate = parseFloat(data.gstRate) || 18.0;\n          const priceBeforeGst = finalPrice / (1 + gstRate/100);\n          \n          const formattedData = {\n            supplierId: supplierMatch?.id || '',\n            productName: entry.productName,\n            currency: 'INR',\n            price: finalPrice,\n            priceBeforeGst: parseFloat(priceBeforeGst.toFixed(2)),\n            gstRate: gstRate,\n            hsn: data.hsn.trim(),\n            effectiveFrom: new Date().toISOString().split('T')[0],\n            effectiveTo: ''\n          };\n\n          await createPriceEntryMutation.mutateAsync(formattedData);\n        }\n      }\n\n      toast({\n        title: \"Bulk prices saved\",\n        description: `Successfully added ${entries.length} price entries`\n      });\n      \n      setBulkPrices({});\n      setShowBulkAddModal(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/price-entries'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/missing-price-entries'] });\n      \n    } catch (error) {\n      console.error('Bulk save error:', error);\n      toast({\n        title: \"Error saving prices\",\n        description: \"Some entries might not have been saved. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Download all price entries as Excel\n  const downloadAllPricesExcel = async () => {\n    try {\n      // Get all price entries (not filtered by supplier)\n      const response = await fetch('/api/price-entries');\n      if (!response.ok) {\n        throw new Error('Failed to fetch price entries');\n      }\n      \n      const allPriceEntries = await response.json();\n      \n      if (!Array.isArray(allPriceEntries) || allPriceEntries.length === 0) {\n        toast({\n          title: \"No Data to Export\",\n          description: \"No price entries found in the database\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Get orders to calculate order count per product\n      const ordersResponse = await fetch('/api/orders');\n      const orders = ordersResponse.ok ? await ordersResponse.json() : [];\n      \n      // Calculate order count for each supplier-product combination\n      const orderCounts = new Map();\n      if (Array.isArray(orders)) {\n        orders.forEach((order: any) => {\n          const key = `${order.supplierId}_${order.productName}`;\n          orderCounts.set(key, (orderCounts.get(key) || 0) + 1);\n        });\n      }\n\n      // Format data according to user's screenshot format\n      const worksheetData = [\n        [\n          'Supplier Name',\n          'Product Name', \n          'Order Count',\n          'Supplier Product ID',\n          'Price Before GST (INR)',\n          'GST Rate (%)',\n          'Price After GST (INR)',\n          'HSN Code',\n          'Currency',\n          'Effective From (YYYY-MM-DD)',\n          'Effective To (YYYY-MM-DD)'\n        ]\n      ];\n\n      allPriceEntries.forEach((entry: any) => {\n        const orderCount = orderCounts.get(`${entry.supplierId}_${entry.productName}`) || 0;\n        \n        // Format Supplier Product ID: Supplier NameProduct Name (no special characters)\n        const supplierName = (entry.supplierName || 'Unknown').toUpperCase();\n        const productName = (entry.productName || '');\n        const supplierProductId = `${supplierName}${productName}`;\n        \n        const effectiveFrom = entry.effectiveFrom ? new Date(entry.effectiveFrom).toISOString().split('T')[0] : '';\n        const effectiveTo = entry.effectiveTo ? new Date(entry.effectiveTo).toISOString().split('T')[0] : '';\n        \n        worksheetData.push([\n          entry.supplierName || 'Unknown',\n          entry.productName || '',\n          orderCount,\n          supplierProductId,\n          parseFloat(String(entry.priceBeforeGst || entry.price || 0)).toFixed(2),\n          parseFloat(String(entry.gstRate || 18)).toFixed(1) + '%',\n          parseFloat(String(entry.price || 0)).toFixed(2),\n          entry.hsn || '',\n          entry.currency || 'INR',\n          effectiveFrom,\n          effectiveTo\n        ]);\n      });\n\n      // Create workbook\n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n      \n      // Auto-size columns\n      const colWidths = [\n        { wch: 20 }, // Supplier Name\n        { wch: 25 }, // Product Name\n        { wch: 12 }, // Order Count\n        { wch: 30 }, // Supplier Product ID\n        { wch: 18 }, // Price Before GST\n        { wch: 12 }, // GST Rate\n        { wch: 18 }, // Price After GST\n        { wch: 12 }, // HSN Code\n        { wch: 10 }, // Currency\n        { wch: 18 }, // Effective From\n        { wch: 18 }  // Effective To\n      ];\n      worksheet['!cols'] = colWidths;\n\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Product Price Database');\n      \n      // Generate filename with current date\n      const currentDate = new Date().toISOString().split('T')[0];\n      const filename = `Product_Price_Database_${currentDate}.xlsx`;\n      \n      // Download the file\n      XLSX.writeFile(workbook, filename);\n      \n      toast({\n        title: \"Excel Downloaded Successfully\",\n        description: `Downloaded ${allPriceEntries.length} price entries to ${filename}`\n      });\n      \n    } catch (error) {\n      console.error('Download error:', error);\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download price database. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Download missing entries as CSV template\n  const downloadMissingEntriesCSV = async () => {\n    try {\n      const response = await fetch('/api/export/missing-price-entries');\n      \n      if (!response.ok) {\n        throw new Error('Failed to download Excel file');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'missing-price-entries-template.xlsx';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Excel Downloaded\",\n        description: \"Template file (.xlsx) download ho gaya. GST calculations ke saath ready hai!\",\n      });\n    } catch (error) {\n      console.error('Excel download error:', error);\n      toast({\n        title: \"Download Failed\",\n        description: \"Excel download nahi ho paya. Try again kijiye.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Handle bulk upload file selection\n  const handleBulkUploadFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Accept both CSV and Excel files\n      const isCSV = file.type === 'text/csv' || file.name.endsWith('.csv');\n      const isExcel = file.type.includes('excel') || file.type.includes('spreadsheet') || \n                     file.name.endsWith('.xlsx') || file.name.endsWith('.xls');\n      \n      if (!isCSV && !isExcel) {\n        toast({\n          title: \"Invalid File Type\", \n          description: \"Please select a CSV or Excel (.xlsx, .xls) file\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      setSelectedBulkFile(file);\n      toast({\n        title: \"File Selected\", \n        description: `${file.name} ready for upload`,\n      });\n    }\n  };\n\n  // Handle drag and drop events\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  };\n\n  const handleFileDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n\n    const files = e.dataTransfer.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      \n      // Accept both CSV and Excel files\n      const isCSV = file.type === 'text/csv' || file.name.endsWith('.csv');\n      const isExcel = file.type.includes('excel') || file.type.includes('spreadsheet') || \n                     file.name.endsWith('.xlsx') || file.name.endsWith('.xls');\n      \n      if (!isCSV && !isExcel) {\n        toast({\n          title: \"Invalid File Type\", \n          description: \"Please drop a CSV or Excel (.xlsx, .xls) file\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      setSelectedBulkFile(file);\n      toast({\n        title: \"File Dropped Successfully\", \n        description: `${file.name} is ready for upload`,\n      });\n    }\n  };\n\n  // Process bulk upload\n  const processBulkUpload = async () => {\n    if (!selectedBulkFile) return;\n\n    setIsBulkUploading(true);\n    setUploadProgress(0);\n    setUploadStage('Preparing file upload...');\n\n    // Simulate progress while uploading\n    let progress = 0;\n    let currentStage = 0;\n    const stages = [\n      { name: \"Uploading file...\", duration: 2000, maxProgress: 20 },\n      { name: \"Processing Excel data...\", duration: 3000, maxProgress: 50 },\n      { name: \"Validating supplier names...\", duration: 2000, maxProgress: 70 },\n      { name: \"Creating price entries...\", duration: 10000, maxProgress: 95 }\n    ];\n\n    const progressInterval = setInterval(() => {\n      if (currentStage < stages.length) {\n        const stage = stages[currentStage];\n        setUploadStage(stage.name);\n        \n        if (progress < stage.maxProgress) {\n          const increment = (stage.maxProgress - progress) / (stage.duration / 200);\n          progress = Math.min(progress + increment, stage.maxProgress);\n          setUploadProgress(progress);\n        } else {\n          currentStage++;\n        }\n      }\n    }, 200);\n\n    const formData = new FormData();\n    formData.append('file', selectedBulkFile);\n\n    try {\n      const response = await fetch('/api/price-entries/bulk-upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      clearInterval(progressInterval);\n      setUploadStage('Finalizing...');\n      setUploadProgress(100);\n\n      const result = await response.json();\n\n      if (response.ok) {\n        if (result.details.processed > 0) {\n          toast({\n            title: \"Bulk Upload Successful\",\n            description: `${result.details.processed} price entries added for ${result.details.suppliers.length} suppliers!`,\n          });\n          \n          // Close modal and reset states\n          setShowBulkImportModal(false);\n          setSelectedBulkFile(null);\n        } else {\n          // Show errors to user when no entries processed\n          const errorPreview = result.details.errors.slice(0, 3).join('\\n');\n          toast({\n            title: \"Upload Failed - No Entries Added\",\n            description: `${result.details.skipped} entries skipped. Common errors:\\n${errorPreview}${result.details.errors.length > 3 ? '\\n...and more' : ''}`,\n            variant: \"destructive\"\n          });\n        }\n        \n        queryClient.invalidateQueries({ queryKey: ['/api/price-entries'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/missing-price-entries'] });\n      } else {\n        throw new Error(result.error);\n      }\n    } catch (error) {\n      clearInterval(progressInterval);\n      console.error('Bulk upload error:', error);\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Failed to upload Excel file\",\n        variant: \"destructive\"\n      });\n    } finally {\n      // Reset loading states\n      setTimeout(() => {\n        setIsBulkUploading(false);\n        setUploadProgress(0);\n        setUploadStage('');\n      }, 1000);\n    }\n  };\n\n  // Export filtered missing entries to Excel\n  const exportFilteredMissingEntries = () => {\n    const exportData = filteredMissingEntries.map((entry: any) => ({\n      'Supplier Name': entry.supplierName,\n      'Product Name': entry.productName,\n      'Order Count': entry.orderCount,\n      'Price Before GST (INR)': '',\n      'GST Rate (%)': '',\n      'Price After GST (INR)': '',\n      'HSN Code': '',\n      'Currency': 'INR',\n      'Effective From (YYYY-MM-DD)': new Date().toISOString().split('T')[0],\n      'Effective To (YYYY-MM-DD)': ''\n    }));\n\n    const ws = XLSX.utils.json_to_sheet(exportData);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, 'Missing Prices');\n    \n    const fileName = `missing-prices-filtered-${new Date().toISOString().split('T')[0]}.xlsx`;\n    XLSX.writeFile(wb, fileName);\n    \n    toast({\n      title: \"Export Successful\",\n      description: `${filteredMissingEntries.length} missing price entries exported to Excel`,\n    });\n  };\n\n  // Import missing prices from Excel/CSV file\n  const handleMissingPricesImport = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n        // Process imported data and update bulkPrices\n        const newBulkPrices: any = {};\n        jsonData.forEach((row: any) => {\n          const supplierName = row['Supplier Name'] || row['supplier_name'];\n          const productName = row['Product Name'] || row['product_name'];\n          const price = row['Price Before GST (INR)'] || row['price_before_gst'] || '';\n          const gstRate = row['GST Rate (%)'] || row['gst_rate'] || '';\n          const hsn = row['HSN Code'] || row['hsn_code'] || '';\n\n          if (supplierName && productName) {\n            const productKey = `${supplierName}_${productName}`;\n            newBulkPrices[productKey] = {\n              price: price.toString(),\n              gstRate: gstRate.toString(),\n              hsn: hsn.toString()\n            };\n          }\n        });\n\n        setBulkPrices(prev => ({ ...prev, ...newBulkPrices }));\n        \n        toast({\n          title: \"Import Successful\",\n          description: `Imported ${Object.keys(newBulkPrices).length} price entries from ${file.name}`,\n        });\n        \n        // Reset file input\n        event.target.value = '';\n      } catch (error) {\n        console.error('Import error:', error);\n        toast({\n          title: \"Import Failed\",\n          description: \"Failed to import Excel file. Please check the format.\",\n          variant: \"destructive\"\n        });\n      }\n    };\n    \n    reader.readAsArrayBuffer(file);\n  };\n\n  // State for bulk upload loading\n  const [isBulkUploading, setIsBulkUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStage, setUploadStage] = useState('');\n\n  const openAddModal = () => {\n    setEditingEntry(null);\n    reset({\n      supplierId: '',\n      productName: '',\n      currency: 'INR',\n      price: 0,\n      hsn: '',\n      effectiveFrom: new Date().toISOString().split('T')[0],\n      effectiveTo: ''\n    });\n    setShowPriceModal(true);\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return 'Present';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatPrice = (price: string, currency: string) => {\n    const symbol = currency === 'INR' ? '‚Çπ' : '$';\n    return `${symbol}${parseFloat(price).toLocaleString()}`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <Tags className=\"text-primary text-xl\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Price/HSN Management</h2>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setShowBulkImportModal(true)} \n            data-testid=\"button-import-price-hsn\"\n            className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100\"\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Bulk Import CSV/Excel\n          </Button>\n          <Button \n            onClick={downloadAllPricesExcel}\n            data-testid=\"button-download-price-database\"\n            variant=\"outline\"\n            className=\"bg-purple-50 border-purple-200 text-purple-700 hover:bg-purple-100\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Download Product Database\n          </Button>\n          <Button \n            onClick={openAddModal} \n            data-testid=\"button-add-price-entry\"\n            className=\"bg-green-600 hover:bg-green-700 text-white\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add New Price/HSN Entry\n          </Button>\n        </div>\n      </div>\n\n      {/* Quick Actions & Info Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-blue-700\">Total Price Entries</p>\n              <p className=\"text-2xl font-bold text-blue-900\" data-testid=\"text-price-entries-count\">\n                {priceEntries.length}\n              </p>\n            </div>\n            <Database className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-gradient-to-r from-green-50 to-green-100 p-4 rounded-lg border border-green-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-green-700\">Active Suppliers</p>\n              <p className=\"text-2xl font-bold text-green-900\">\n                {suppliers.length}\n              </p>\n            </div>\n            <Tags className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-gradient-to-r from-purple-50 to-purple-100 p-4 rounded-lg border border-purple-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-purple-700\">Pricing Basis</p>\n              <Select value={pricingBasis} onValueChange={setPricingBasis}>\n                <SelectTrigger className=\"w-full mt-1\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"delivered_date\">Delivered Date</SelectItem>\n                  <SelectItem value=\"order_date\">Order Date</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Missing Price Entries Alert */}\n      {missingPriceEntries.length > 0 && (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"bg-yellow-100 rounded-full p-2\">\n                <Tags className=\"h-5 w-5 text-yellow-600\" />\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-medium text-yellow-800 mb-1\">\n                Missing Price/HSN Entries Found\n              </h3>\n              <p className=\"text-sm text-yellow-700 mb-3\">\n                Aapke uploaded order data mein <strong>{missingPriceEntries.length}</strong> products hain jinke liye price missing hai. \n                Neeche jo products dikh rahe hain, unpe click karke directly price entry kar sakte hain.\n              </p>\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-medium text-yellow-800\">\n                  Click on any product to add its price:\n                </h4>\n                <div className=\"grid grid-cols-1 gap-2 max-h-40 overflow-y-auto\">\n                  {missingPriceEntries.slice(0, 15).map((entry: any, index: number) => (\n                    <div \n                      key={index} \n                      className=\"bg-white p-3 rounded border hover:bg-gray-50 cursor-pointer transition-colors border-l-4 border-l-yellow-400\"\n                      onClick={() => quickAddFromMissing(entry)}\n                      data-testid={`missing-entry-${index}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-gray-900 text-sm\">{entry.supplierName}</div>\n                          <div className=\"text-gray-600 text-xs mt-1\">{entry.productName}</div>\n                          <div className=\"text-yellow-600 text-xs font-medium\">\n                            {entry.orderCount} orders pending\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Link href={`/supplier/${encodeURIComponent(entry.supplierName)}`}>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={(e) => e.stopPropagation()}\n                              className=\"text-blue-600 border-blue-600 hover:bg-blue-50 text-xs px-2 py-1\"\n                            >\n                              <ExternalLink className=\"h-3 w-3 mr-1\" />\n                              View\n                            </Button>\n                          </Link>\n                          <Button\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              quickAddFromMissing(entry);\n                            }}\n                            className=\"bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1\"\n                          >\n                            Add Price\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  {missingPriceEntries.length > 15 && (\n                    <div className=\"text-xs text-yellow-600 text-center py-2 border-t\">\n                      +{missingPriceEntries.length - 15} more products need pricing\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => setShowBulkAddModal(true)}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  Add All Prices\n                </Button>\n                <Button\n                  size=\"sm\"\n                  onClick={openAddModal}\n                  className=\"bg-yellow-600 hover:bg-yellow-700 text-white\"\n                >\n                  Add Single Entry\n                </Button>\n                <Button\n                  size=\"sm\"\n                  onClick={downloadMissingEntriesCSV}\n                  variant=\"outline\"\n                  className=\"border-green-300 text-green-700 hover:bg-green-50\"\n                >\n                  Download CSV Template\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Filter Controls */}\n      <div className=\"flex items-center justify-between mb-6 p-4 bg-gray-50 rounded-lg border\">\n        <div className=\"flex items-center space-x-4\">\n          <Label className=\"text-sm font-medium text-gray-700\">Filter by Supplier:</Label>\n          <Select value={selectedSupplier} onValueChange={setSelectedSupplier}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"All Suppliers\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Suppliers</SelectItem>\n              {suppliers\n                .filter((supplier: any) => supplier.id && supplier.id.trim() !== '' && supplier.name && supplier.name.trim() !== '')\n                .map((supplier: any) => (\n                <SelectItem key={supplier.id} value={supplier.name}>\n                  {supplier.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"text-sm text-gray-600\">\n          Showing {priceEntries.length} price entries\n        </div>\n      </div>\n\n      {/* Price/HSN Table */}\n      <div className=\"overflow-hidden border border-gray-200 rounded-lg\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"bg-gray-50\">\n              <TableHead>Supplier</TableHead>\n              <TableHead>Product</TableHead>\n              <TableHead>Currency</TableHead>\n              <TableHead>Price Before GST (INR)</TableHead>\n              <TableHead>GST Rate (%)</TableHead>\n              <TableHead>Price After GST (INR)</TableHead>\n              <TableHead>HSN</TableHead>\n              <TableHead>Effective Period</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {loadingPrices ? (\n              <TableRow>\n                <TableCell colSpan={9} className=\"text-center py-8\">Loading...</TableCell>\n              </TableRow>\n            ) : !Array.isArray(priceEntries) ? (\n              <TableRow>\n                <TableCell colSpan={9} className=\"text-center py-8 text-red-600\">\n                  Error loading price entries. Please refresh the page.\n                </TableCell>\n              </TableRow>\n            ) : priceEntries.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={9} className=\"text-center py-12\">\n                  <div className=\"flex flex-col items-center space-y-4\">\n                    <Tags className=\"h-12 w-12 text-gray-400\" />\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-medium text-gray-600\">No Price/HSN Entries Found</p>\n                      <p className=\"text-sm text-gray-500 mt-1\">Add your first price entry to get started</p>\n                    </div>\n                    <Button \n                      onClick={openAddModal}\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add First Entry\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              priceEntries.map((entry: any) => (\n                <TableRow key={entry.id} className=\"hover:bg-gray-50\">\n                  <TableCell data-testid={`cell-supplier-${entry.id}`}>{entry.supplierName}</TableCell>\n                  <TableCell data-testid={`cell-product-${entry.id}`}>{entry.productName}</TableCell>\n                  <TableCell>{entry.currency}</TableCell>\n                  <TableCell className=\"font-medium\">\n                    ‚Çπ{parseFloat(entry.priceBeforeGst || '0').toFixed(2)}\n                  </TableCell>\n                  <TableCell className=\"font-medium text-center\">\n                    {parseFloat(entry.gstRate || '0').toFixed(1)}%\n                  </TableCell>\n                  <TableCell className=\"font-medium\">\n                    {formatPrice(entry.price, entry.currency)}\n                  </TableCell>\n                  <TableCell>{entry.hsn}</TableCell>\n                  <TableCell className=\"text-gray-600\">\n                    {formatDate(entry.effectiveFrom)} to {formatDate(entry.effectiveTo)}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => openEditModal(entry)}\n                        data-testid={`button-edit-${entry.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deletePriceEntryMutation.mutate(entry.id)}\n                        data-testid={`button-delete-${entry.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-error\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Price Entry Modal */}\n      <Dialog open={showPriceModal} onOpenChange={setShowPriceModal}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Tags className=\"h-5 w-5 text-primary\" />\n              <span>{editingEntry ? 'Edit Price/HSN Entry' : 'Add New Price/HSN Entry'}</span>\n            </DialogTitle>\n\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Supplier & Product Section */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900 border-b pb-2\">Basic Information</h4>\n              \n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">\n                  Supplier <span className=\"text-red-500\">*</span>\n                </Label>\n                <Select \n                  value={watch('supplierId') || \"\"} \n                  onValueChange={(value) => setValue('supplierId', value)}\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Choose a supplier...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {suppliers\n                      .filter((supplier: any) => supplier.id && supplier.id.trim() !== '' && supplier.name && supplier.name.trim() !== '')\n                      .map((supplier: any) => (\n                      <SelectItem key={supplier.id} value={supplier.id}>\n                        {supplier.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {errors.supplierId && (\n                  <p className=\"text-sm text-red-600 mt-1\">Supplier is required</p>\n                )}\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">\n                  Product Name <span className=\"text-red-500\">*</span>\n                </Label>\n                <Input \n                  {...register('productName', { required: \"Product name is required\" })} \n                  placeholder=\"Enter product name\"\n                  className=\"mt-1\"\n                />\n                {errors.productName && (\n                  <p className=\"text-sm text-red-600 mt-1\">{errors.productName.message}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Pricing Information Section */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900 border-b pb-2\">Pricing Details</h4>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">Currency</Label>\n                  <Select \n                    value={watch('currency') || \"INR\"} \n                    onValueChange={(value) => setValue('currency', value)}\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"INR\">üáÆüá≥ INR (Indian Rupee)</SelectItem>\n                      <SelectItem value=\"USD\">üá∫üá∏ USD (US Dollar)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    Price <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <Input \n                    type=\"number\" \n                    step=\"0.01\" \n                    {...register('price', { \n                      required: \"Price is required\", \n                      valueAsNumber: true,\n                      min: { value: 0, message: \"Price must be positive\" }\n                    })} \n                    placeholder=\"0.00\"\n                    className=\"mt-1\"\n                  />\n                  {errors.price && (\n                    <p className=\"text-sm text-red-600 mt-1\">{errors.price.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">\n                  HSN Code <span className=\"text-red-500\">*</span>\n                </Label>\n                <Input \n                  {...register('hsn', { required: \"HSN code is required\" })} \n                  placeholder=\"Enter HSN code (8 digits)\"\n                  className=\"mt-1\"\n                />\n                {errors.hsn && (\n                  <p className=\"text-sm text-red-600 mt-1\">{errors.hsn.message}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Date Range Section */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900 border-b pb-2\">Validity Period</h4>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    Effective From <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <Input \n                    type=\"date\" \n                    {...register('effectiveFrom', { required: \"Effective date is required\" })} \n                    className=\"mt-1\"\n                  />\n                  {errors.effectiveFrom && (\n                    <p className=\"text-sm text-red-600 mt-1\">{errors.effectiveFrom.message}</p>\n                  )}\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">Effective To (Optional)</Label>\n                  <Input \n                    type=\"date\" \n                    {...register('effectiveTo')} \n                    className=\"mt-1\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">Leave blank if no end date</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setShowPriceModal(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={createPriceEntryMutation.isPending || updatePriceEntryMutation.isPending}\n                data-testid=\"button-submit-price-entry\"\n                className=\"bg-green-600 hover:bg-green-700 text-white min-w-[120px]\"\n              >\n                {(createPriceEntryMutation.isPending || updatePriceEntryMutation.isPending) ? 'Saving...' : (editingEntry ? 'Update Entry' : 'Save Entry')}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Import Modal */}\n      <Dialog open={showBulkImportModal} onOpenChange={setShowBulkImportModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Upload className=\"h-5 w-5 text-blue-600\" />\n              <span>Bulk Import Price/HSN Entries</span>\n            </DialogTitle>\n\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* Instructions */}\n            <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">How to Bulk Import:</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>1. Download the Excel template with all missing products</li>\n                <li>2. Fill Price Before GST and GST Rate columns (Price After GST will auto-calculate)</li>\n                <li>3. Fill HSN Code for each product</li>\n                <li>4. Save as CSV format and upload the completed file</li>\n              </ul>\n            </div>\n\n            {/* Template Download */}\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n              <div>\n                <p className=\"font-medium text-gray-900\">Download Excel Template</p>\n                <p className=\"text-sm text-gray-600\">Get Excel file with GST calculations and all missing products</p>\n              </div>\n              <Button \n                variant=\"outline\"\n                onClick={downloadMissingEntriesCSV}\n                className=\"bg-green-50 border-green-200 text-green-700 hover:bg-green-100\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download Excel (.xlsx)\n              </Button>\n            </div>\n\n            {/* File Upload Area with Drag & Drop */}\n            <div \n              className={`border-2 border-dashed ${isDragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'} rounded-lg p-8 text-center hover:border-blue-400 transition-colors`}\n              onDrop={handleFileDrop}\n              onDragOver={handleDragOver}\n              onDragEnter={handleDragEnter}\n              onDragLeave={handleDragLeave}\n              data-testid=\"drag-drop-area\"\n            >\n              <Upload className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <div>\n                <p className=\"text-lg font-medium text-gray-700\">Drop File Here or Click to Upload</p>\n                <p className=\"text-sm text-gray-500 mt-1\">CSV or Excel file with GST prices and HSN codes</p>\n              </div>\n              <input\n                type=\"file\"\n                accept=\".csv,.xlsx,.xls\"\n                onChange={handleBulkUploadFile}\n                className=\"hidden\"\n                id=\"bulk-upload-input\"\n              />\n              <label htmlFor=\"bulk-upload-input\">\n                <Button className=\"mt-4 bg-blue-600 hover:bg-blue-700 text-white cursor-pointer\">\n                  Choose File (CSV/Excel)\n                </Button>\n              </label>\n              {selectedBulkFile && (\n                <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <p className=\"text-sm text-green-700 font-medium\">\n                    ‚úì Selected: {selectedBulkFile.name}\n                  </p>\n                  <p className=\"text-xs text-green-600 mt-1\">\n                    Size: {(selectedBulkFile.size / 1024).toFixed(1)} KB\n                  </p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Progress display area */}\n              <div id=\"upload-status\" className=\"min-h-[60px] p-3 bg-gray-50 rounded-lg border\">\n                {isBulkUploading ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-medium text-blue-700\">{uploadStage}</p>\n                      <p className=\"text-sm text-blue-600\">{Math.round(uploadProgress)}%</p>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300 ease-out\"\n                        style={{ width: `${uploadProgress}%` }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-gray-600 text-center\">\n                      Processing large Excel files may take 1-2 minutes. Please wait...\n                    </p>\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-600 text-center\">\n                    Upload results ‡§î‡§∞ errors ‡§Ø‡§π‡§æ‡§Ç ‡§¶‡§ø‡§ñ‡•á‡§Ç‡§ó‡•á\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"flex justify-end space-x-3\">\n                <Button \n                  variant=\"outline\" \n                  disabled={isBulkUploading}\n                  onClick={() => setShowBulkImportModal(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  disabled={!selectedBulkFile || isBulkUploading}\n                  onClick={processBulkUpload}\n                  className=\"bg-green-600 hover:bg-green-700 text-white min-w-[120px]\"\n                >\n                  {isBulkUploading ? 'Processing...' : 'Import Prices'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Add Modal */}\n      <Dialog open={showBulkAddModal} onOpenChange={setShowBulkAddModal}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Database className=\"h-5 w-5 text-blue-600\" />\n              <span>Add Prices for Missing Products</span>\n            </DialogTitle>\n            <DialogDescription>\n              Neeche ki table mein sabhi missing products hain. Price aur HSN code fill karke sabko ek saath save kar sakte hain.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Stats and Controls */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n              <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200 flex-1\">\n                <p className=\"text-sm text-blue-700\">\n                  <strong>{filteredMissingEntries.length}</strong> of <strong>{missingPriceEntries.length}</strong> products shown. \n                  Fill prices and HSN codes for products you want to save.\n                </p>\n              </div>\n              \n              {/* Action Buttons */}\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={exportFilteredMissingEntries}\n                  className=\"bg-green-50 border-green-200 text-green-700 hover:bg-green-100\"\n                  data-testid=\"button-export-filtered\"\n                >\n                  <FileDown className=\"h-4 w-4 mr-2\" />\n                  Export ({filteredMissingEntries.length})\n                </Button>\n                \n                <input\n                  type=\"file\"\n                  accept=\".xlsx,.xls,.csv\"\n                  onChange={handleMissingPricesImport}\n                  style={{ display: 'none' }}\n                  id=\"import-missing-prices\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => document.getElementById('import-missing-prices')?.click()}\n                  className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100\"\n                  data-testid=\"button-import-prices\"\n                >\n                  <FileUp className=\"h-4 w-4 mr-2\" />\n                  Import Prices\n                </Button>\n              </div>\n            </div>\n\n            {/* Filters and Search */}\n            <div className=\"flex flex-col lg:flex-row gap-4 p-4 bg-gray-50 rounded-lg border\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"supplier-search\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  <Search className=\"h-4 w-4 inline mr-1\" />\n                  Search Suppliers\n                </Label>\n                <Input\n                  id=\"supplier-search\"\n                  placeholder=\"Type supplier name to filter...\"\n                  value={supplierSearchQuery}\n                  onChange={(e) => setSupplierSearchQuery(e.target.value)}\n                  className=\"bg-white\"\n                  data-testid=\"input-supplier-search\"\n                />\n              </div>\n              \n              <div className=\"flex gap-3\">\n                <div>\n                  <Label htmlFor=\"min-orders\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    <Filter className=\"h-4 w-4 inline mr-1\" />\n                    Min Orders\n                  </Label>\n                  <Input\n                    id=\"min-orders\"\n                    type=\"number\"\n                    placeholder=\"Min\"\n                    value={minOrderCount}\n                    onChange={(e) => setMinOrderCount(e.target.value)}\n                    className=\"w-20 bg-white\"\n                    min=\"0\"\n                    data-testid=\"input-min-orders\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"max-orders\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Max Orders\n                  </Label>\n                  <Input\n                    id=\"max-orders\"\n                    type=\"number\"\n                    placeholder=\"Max\"\n                    value={maxOrderCount}\n                    onChange={(e) => setMaxOrderCount(e.target.value)}\n                    className=\"w-20 bg-white\"\n                    min=\"0\"\n                    data-testid=\"input-max-orders\"\n                  />\n                </div>\n                \n                {(supplierSearchQuery || minOrderCount || maxOrderCount) && (\n                  <div className=\"flex items-end\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSupplierSearchQuery('');\n                        setMinOrderCount('');\n                        setMaxOrderCount('');\n                      }}\n                      className=\"text-gray-600 hover:text-gray-800\"\n                      data-testid=\"button-clear-filters\"\n                    >\n                      Clear Filters\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"overflow-x-auto border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-gray-50\">\n                    <TableHead className=\"min-w-[160px]\">Supplier</TableHead>\n                    <TableHead className=\"min-w-[180px]\">Product Name</TableHead>\n                    <TableHead className=\"min-w-[110px]\">Supplier Product ID</TableHead>\n                    <TableHead className=\"min-w-[70px] text-center\">Orders</TableHead>\n                    <TableHead className=\"min-w-[110px]\">Price Before GST</TableHead>\n                    <TableHead className=\"min-w-[80px]\">GST Rate (%)</TableHead>\n                    <TableHead className=\"min-w-[100px]\">HSN Code</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredMissingEntries.map((entry: any, index: number) => {\n                    const productKey = `${entry.supplierName}_${entry.productName}`;\n                    const currentData = bulkPrices[productKey] || { price: '', hsn: '', gstRate: '' };\n                    \n                    return (\n                      <TableRow key={index} className=\"hover:bg-gray-50\">\n                        <TableCell className=\"font-medium text-sm\">\n                          {entry.supplierName}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {entry.productName}\n                        </TableCell>\n                        <TableCell className=\"text-xs font-mono bg-gray-50\">\n                          {entry.supplierProductId || `${entry.supplierName?.replace(/[^A-Z0-9]/gi, '').toUpperCase()}${entry.productName?.replace(/[^A-Z0-9]/gi, '').toUpperCase().substring(0, 10)}`}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs font-medium\">\n                            {entry.orderCount}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"Price before GST\"\n                            value={currentData.price}\n                            onChange={(e) => updateBulkPrice(productKey, 'price', e.target.value)}\n                            className=\"w-full\"\n                            min=\"0\"\n                            step=\"0.01\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"GST %\"\n                            value={currentData.gstRate || ''}\n                            onChange={(e) => updateBulkPrice(productKey, 'gstRate' as any, e.target.value)}\n                            className=\"w-full\"\n                            min=\"0\"\n                            max=\"100\"\n                            step=\"0.1\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"text\"\n                            placeholder=\"HSN\"\n                            value={currentData.hsn}\n                            onChange={(e) => updateBulkPrice(productKey, 'hsn', e.target.value)}\n                            className=\"w-full\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n\n            <div className=\"flex justify-between items-center bg-gray-50 p-4 rounded-lg\">\n              <div className=\"text-sm text-gray-600\">\n                {Object.entries(bulkPrices).filter(([_, data]) => \n                  data.price && parseFloat(data.price) > 0 && data.hsn?.trim() && data.gstRate\n                ).length} products ready to save\n              </div>\n              <div className=\"flex space-x-3\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowBulkAddModal(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  onClick={saveBulkPrices}\n                  disabled={createPriceEntryMutation.isPending}\n                  className=\"bg-green-600 hover:bg-green-700 text-white min-w-[120px]\"\n                >\n                  {createPriceEntryMutation.isPending ? 'Saving...' : 'Save All Prices'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":64628},"client/src/components/reports-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  FileDown, \n  Users, \n  FileSpreadsheet, \n  XCircle, \n  ArrowRightLeft, \n  AlertTriangle, \n  List,\n  Calendar,\n  DollarSign,\n  MapPin\n} from \"lucide-react\";\n\nexport function ReportsSection() {\n  const [periodFrom, setPeriodFrom] = useState(\"2024-01-01\");\n  const [periodTo, setPeriodTo] = useState(\"2024-12-31\");\n  const [currency, setCurrency] = useState(\"all\");\n  const [minAmount, setMinAmount] = useState(\"\");\n  const [showStateAnalysis, setShowStateAnalysis] = useState(false);\n  const [stateAnalysisData, setStateAnalysisData] = useState(null);\n  const [isLoadingStateAnalysis, setIsLoadingStateAnalysis] = useState(false);\n  \n  const { toast } = useToast();\n\n  const handleExport = async (reportType: string) => {\n    if (reportType === 'delivery-by-state') {\n      await handleStateAnalysis();\n      return;\n    }\n    \n    toast({\n      title: \"Export started\",\n      description: `Generating ${reportType} report...`\n    });\n    \n    // In a real implementation, this would trigger the actual export\n    const currencyParam = currency === 'all' ? '' : currency;\n    window.open(`/api/export/${reportType}?periodFrom=${periodFrom}&periodTo=${periodTo}&currency=${currencyParam}&minAmount=${minAmount}`);\n  };\n\n  const handleStateAnalysis = async () => {\n    setIsLoadingStateAnalysis(true);\n    try {\n      const response = await fetch(`/api/reports/delivery-by-state?periodFrom=${periodFrom}&periodTo=${periodTo}&dateType=deliveredDate`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setStateAnalysisData(data);\n        setShowStateAnalysis(true);\n        toast({\n          title: \"Analysis Generated\",\n          description: `Found delivery data for ${data.summary.totalStates} states`\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: data.error || \"Failed to generate state analysis\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('State analysis error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate state analysis\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoadingStateAnalysis(false);\n    }\n  };\n\n  const reportCards = [\n    {\n      id: 'supplier-summary',\n      title: 'Supplier Payout Summary',\n      description: 'Consolidated payouts by supplier with currency breakdown',\n      icon: Users,\n      stats: '47 suppliers, ‚Çπ12,45,680',\n      color: 'text-primary',\n      bgColor: 'bg-primary'\n    },\n    {\n      id: 'delivery-by-state',\n      title: 'Delivery Analysis by State',\n      description: 'GST summary and delivery bifurcation by customer state',\n      icon: MapPin,\n      stats: 'State-wise delivery analysis',\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-600'\n    },\n    {\n      id: 'payout-sheet',\n      title: 'Payout Export Sheet',\n      description: 'Detailed line-level data for payable orders',\n      icon: FileSpreadsheet,\n      stats: '2,156 payable orders',\n      color: 'text-green-600',\n      bgColor: 'bg-green-600'\n    },\n    {\n      id: 'cancelled-orders',\n      title: 'Cancelled Orders',\n      description: 'Orders removed from payout calculations',\n      icon: XCircle,\n      stats: '183 cancelled orders',\n      color: 'text-red-600',\n      bgColor: 'bg-red-600'\n    },\n    {\n      id: 'reconciliation-log',\n      title: 'Reconciliation Log',\n      description: 'RTS/RTO status changes and reversals',\n      icon: ArrowRightLeft,\n      stats: '42 reconciliation entries',\n      color: 'text-yellow-600',\n      bgColor: 'bg-yellow-600'\n    },\n    {\n      id: 'exceptions',\n      title: 'Exceptions',\n      description: 'Data validation issues and missing information',\n      icon: AlertTriangle,\n      stats: '8 exceptions found',\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-600'\n    },\n    {\n      id: 'line-details',\n      title: 'Line-Level Details',\n      description: 'Complete transaction details with calculations',\n      icon: List,\n      stats: 'All processed records',\n      color: 'text-gray-600',\n      bgColor: 'bg-gray-600'\n    }\n  ];\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <FileDown className=\"text-primary text-xl\" />\n        <h2 className=\"text-xl font-semibold text-gray-900\">Reports & Exports</h2>\n      </div>\n\n      {/* Report Filters */}\n      <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-1\">Period From</Label>\n            <Input\n              type=\"date\"\n              value={periodFrom}\n              onChange={(e) => setPeriodFrom(e.target.value)}\n              data-testid=\"input-period-from\"\n            />\n          </div>\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-1\">Period To</Label>\n            <Input\n              type=\"date\"\n              value={periodTo}\n              onChange={(e) => setPeriodTo(e.target.value)}\n              data-testid=\"input-period-to\"\n            />\n          </div>\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-1\">Currency</Label>\n            <Select value={currency} onValueChange={setCurrency}>\n              <SelectTrigger data-testid=\"select-currency\">\n                <SelectValue placeholder=\"All Currencies\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Currencies</SelectItem>\n                <SelectItem value=\"INR\">INR</SelectItem>\n                <SelectItem value=\"USD\">USD</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-1\">Min Amount</Label>\n            <Input\n              type=\"number\"\n              placeholder=\"0\"\n              value={minAmount}\n              onChange={(e) => setMinAmount(e.target.value)}\n              data-testid=\"input-min-amount\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Report Cards Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {reportCards.map((report) => (\n          <Card key={report.id} className=\"border border-gray-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center space-x-3\">\n                <report.icon className={`${report.color} text-lg`} />\n                <span className=\"font-medium text-gray-900\">{report.title}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 mb-4\">{report.description}</p>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-500\" data-testid={`stats-${report.id}`}>\n                  {report.stats}\n                </span>\n                <Button\n                  size=\"sm\"\n                  className={report.bgColor}\n                  onClick={() => handleExport(report.id)}\n                  data-testid={`button-export-${report.id}`}\n                  disabled={report.id === 'delivery-by-state' && isLoadingStateAnalysis}\n                >\n                  {report.id === 'delivery-by-state' && isLoadingStateAnalysis ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-1\"></div>\n                      Loading...\n                    </>\n                  ) : (\n                    <>\n                      {report.id === 'delivery-by-state' ? (\n                        <>\n                          <MapPin className=\"h-3 w-3 mr-1\" />\n                          Analyze\n                        </>\n                      ) : (\n                        <>\n                          <FileDown className=\"h-3 w-3 mr-1\" />\n                          Export\n                        </>\n                      )}\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* State Analysis Modal/Table */}\n      {showStateAnalysis && stateAnalysisData && (\n        <div className=\"mt-8\">\n          <Card className=\"border-2 border-blue-200 shadow-xl\">\n            <CardHeader className=\"bg-blue-600 text-white rounded-t-lg\">\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"flex items-center space-x-3 text-xl\">\n                  <MapPin className=\"h-6 w-6\" />\n                  <span>GST Summary by Destination State</span>\n                </CardTitle>\n                <Button\n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"bg-white text-blue-600 hover:bg-blue-50\"\n                  onClick={() => setShowStateAnalysis(false)}\n                  data-testid=\"button-close-state-analysis\"\n                >\n                  ‚úï Close\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {/* Summary Stats */}\n              <div className=\"p-6 bg-blue-50 border-b\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-900\">{stateAnalysisData.summary.totalStates}</div>\n                    <div className=\"text-sm text-blue-600\">States</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-900\">{stateAnalysisData.summary.totalOrders}</div>\n                    <div className=\"text-sm text-blue-600\">Total Orders</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-900\">‚Çπ{stateAnalysisData.summary.totalTaxableValue.toFixed(2)}</div>\n                    <div className=\"text-sm text-blue-600\">Taxable Value</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-900\">‚Çπ{stateAnalysisData.summary.totalGSTAmount.toFixed(2)}</div>\n                    <div className=\"text-sm text-blue-600\">Total GST</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* State Analysis Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">State</th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Orders</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Taxable Value</th>\n                      <th className=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">Tax Type</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">CGST</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">SGST</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">IGST</th>\n                      <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">Total Tax</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {stateAnalysisData.stateAnalysis.map((state, index) => (\n                      <tr key={state.state} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>\n                        <td className=\"px-4 py-4 whitespace-nowrap\">\n                          <div className=\"font-medium text-gray-900\">{state.state}</div>\n                          <div className=\"text-sm text-gray-500\">({state.totalOrders} orders)</div>\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {state.totalOrders}\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                          ‚Çπ{state.taxableValue.toFixed(2)}\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-center\">\n                          {state.igstAmount > 0 ? (\n                            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                              Inter-State (IGST)\n                            </span>\n                          ) : (\n                            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                              Intra-State (CGST+SGST)\n                            </span>\n                          )}\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                          {state.cgstAmount > 0 ? `‚Çπ${state.cgstAmount.toFixed(2)}` : '-'}\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                          {state.sgstAmount > 0 ? `‚Çπ${state.sgstAmount.toFixed(2)}` : '-'}\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                          {state.igstAmount > 0 ? `‚Çπ${state.igstAmount.toFixed(2)}` : '-'}\n                        </td>\n                        <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right\">\n                          ‚Çπ{state.totalGSTAmount.toFixed(2)}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* Export Options */}\n              <div className=\"p-4 bg-gray-50 border-t\">\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"text-sm text-gray-600\">\n                    Analysis Period: {periodFrom} to {periodTo}\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        const csvData = stateAnalysisData.stateAnalysis.map(state => ({\n                          State: state.state,\n                          Orders: state.totalOrders,\n                          'Taxable Value': state.taxableValue.toFixed(2),\n                          'Tax Type': state.igstAmount > 0 ? 'Inter-State (IGST)' : 'Intra-State (CGST+SGST)',\n                          CGST: state.cgstAmount.toFixed(2),\n                          SGST: state.sgstAmount.toFixed(2),\n                          IGST: state.igstAmount.toFixed(2),\n                          'Total Tax': state.totalGSTAmount.toFixed(2)\n                        }));\n                        \n                        const csvContent = \"data:text/csv;charset=utf-8,\" + \n                          Object.keys(csvData[0]).join(\",\") + \"\\n\" +\n                          csvData.map(row => Object.values(row).join(\",\")).join(\"\\n\");\n                        \n                        const link = document.createElement(\"a\");\n                        link.setAttribute(\"href\", encodeURI(csvContent));\n                        link.setAttribute(\"download\", `state-wise-delivery-analysis-${new Date().getTime()}.csv`);\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                      }}\n                      data-testid=\"button-export-csv\"\n                    >\n                      <FileDown className=\"h-4 w-4 mr-1\" />\n                      Export CSV\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":17101},"client/src/components/workflow-stepper.tsx":{"content":"interface WorkflowStepperProps {\n  currentStep: number;\n}\n\nexport function WorkflowStepper({ currentStep }: WorkflowStepperProps) {\n  const steps = [\n    { number: 1, title: \"Upload Data\" },\n    { number: 2, title: \"Map Columns\" },\n    { number: 3, title: \"Price/HSN Setup\" },\n    { number: 4, title: \"Generate Reports\" }\n  ];\n\n  return (\n    <div className=\"bg-white border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-8\">\n              {steps.map((step, index) => (\n                <div key={step.number}>\n                  <div className={`flex items-center space-x-2 ${\n                    step.number <= currentStep ? 'text-primary' : 'text-gray-400'\n                  }`} data-testid={`step-${step.number}`}>\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                      step.number <= currentStep \n                        ? 'bg-primary text-white' \n                        : 'bg-gray-300 text-gray-500'\n                    }`}>\n                      {step.number}\n                    </div>\n                    <span className={`font-medium ${\n                      step.number <= currentStep ? 'text-primary' : 'text-gray-400'\n                    }`}>\n                      {step.title}\n                    </span>\n                  </div>\n                  {index < steps.length - 1 && (\n                    <div className=\"w-12 h-0.5 bg-gray-300 ml-8 mt-4\"></div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1777},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/csv-parser.ts":{"content":"export interface ParsedCSVData {\n  headers: string[];\n  data: Record<string, string>[];\n}\n\nexport async function parseCSV(file: File): Promise<ParsedCSVData> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const text = e.target?.result as string;\n        const lines = text.split('\\n').filter(line => line.trim());\n        \n        if (lines.length === 0) {\n          throw new Error('Empty CSV file');\n        }\n\n        const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n        const data: Record<string, string>[] = [];\n\n        for (let i = 1; i < lines.length; i++) {\n          const values = lines[i].split(',').map(v => v.trim().replace(/\"/g, ''));\n          const row: Record<string, string> = {};\n          \n          headers.forEach((header, index) => {\n            row[header] = values[index] || '';\n          });\n          \n          data.push(row);\n        }\n\n        resolve({ headers, data });\n      } catch (error) {\n        reject(error);\n      }\n    };\n    \n    reader.onerror = () => reject(new Error('Failed to read file'));\n    reader.readAsText(file);\n  });\n}\n\nexport async function parseExcel(file: File): Promise<ParsedCSVData> {\n  // For Excel files, we'll need to use a library like xlsx\n  // For now, return a simple implementation\n  throw new Error('Excel parsing not implemented yet - please use CSV files');\n}\n\nexport function detectColumnMapping(headers: string[]): Record<string, string> {\n  const mapping: Record<string, string> = {};\n  const headerMap: Record<string, string[]> = {\n    supplierName: ['supplier_name', 'supplier', 'vendor', 'pickup_warehouse', 'pickup warehouse'],\n    awbNo: ['awb_no', 'awb', 'tracking_no', 'tracking no', 'airway_bill', 'airway bill'],\n    productName: ['product_name', 'product', 'item', 'item_name', 'sku_name', 'sku name'],\n    status: ['status', 'order_status', 'delivery_status'],\n    courier: ['courier', 'carrier', 'logistics_partner', 'logistics partner'],\n    orderAccount: ['order_account', 'order account', 'account', 'email', 'customer_email', 'customer email'],\n    qty: ['qty', 'quantity'],\n    currency: ['currency'],\n    channelOrderDate: ['channel_order_date', 'channel order date'],\n    orderDate: ['order_date', 'order date'],\n    deliveredDate: ['delivered_date', 'delivered date', 'delivery_date', 'delivery date'],\n    rtsDate: ['rts_date', 'rts date']\n  };\n\n  for (const [key, synonyms] of Object.entries(headerMap)) {\n    for (const header of headers) {\n      const normalizedHeader = header.toLowerCase().replace(/[^a-z0-9]/g, '_');\n      if (synonyms.some(synonym => normalizedHeader.includes(synonym.replace(/[^a-z0-9]/g, '_')))) {\n        mapping[key] = header;\n        break;\n      }\n    }\n  }\n\n  return mapping;\n}\n","size_bytes":2821},"client/src/lib/data-processor.ts":{"content":"import type { ColumnMapping, Order, PriceEntry, Supplier, ReconciliationLog, ReportFilters } from \"@shared/schema\";\n\nexport async function processCSVData(buffer: Buffer, mimeType: string) {\n  // Simple CSV parsing implementation\n  const text = buffer.toString('utf-8');\n  const lines = text.split('\\n').filter(line => line.trim());\n  \n  if (lines.length === 0) {\n    throw new Error('Empty file');\n  }\n\n  const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n  const data: Record<string, string>[] = [];\n\n  for (let i = 1; i < lines.length; i++) {\n    const values = lines[i].split(',').map(v => v.trim().replace(/\"/g, ''));\n    const row: Record<string, string> = {};\n    \n    headers.forEach((header, index) => {\n      row[header] = values[index] || '';\n    });\n    \n    data.push(row);\n  }\n\n  return { headers, data };\n}\n\nexport function normalizeData(rawData: Record<string, string>[], mapping: ColumnMapping): any[] {\n  return rawData.map(row => {\n    const normalized: any = {};\n    \n    // Map columns based on mapping\n    Object.entries(mapping).forEach(([key, columnName]) => {\n      if (columnName && row[columnName] !== undefined) {\n        normalized[key] = cleanValue(row[columnName], key);\n      }\n    });\n\n    // Set defaults\n    if (!normalized.qty) normalized.qty = '1';\n    if (!normalized.currency) normalized.currency = 'INR';\n\n    return normalized;\n  });\n}\n\nfunction cleanValue(value: string, type: string): string {\n  // Trim spaces\n  value = value.trim();\n  \n  // Parse dates to yyyy-mm-dd format\n  if (type.toLowerCase().includes('date') && value) {\n    try {\n      const date = new Date(value);\n      if (!isNaN(date.getTime())) {\n        return date.toISOString().split('T')[0];\n      }\n    } catch {\n      // Keep original value if parsing fails\n    }\n  }\n  \n  // Cast numbers safely\n  if (type === 'qty' && value) {\n    const num = parseInt(value);\n    if (!isNaN(num) && num > 0) {\n      return num.toString();\n    }\n    return '1'; // Default to 1\n  }\n\n  return value;\n}\n\nexport async function calculatePayouts(\n  orders: Order[], \n  priceEntries: PriceEntry[], \n  suppliers: Supplier[], \n  pricingBasis: string = 'deliveredDate'\n) {\n  const payableOrders = orders.filter(order => \n    ['delivered', 'completed'].includes(order.status.toLowerCase())\n  );\n\n  const supplierMap = new Map(suppliers.map(s => [s.id, s]));\n  const calculations = [];\n  const missingPrices = new Set();\n\n  for (const order of payableOrders) {\n    const basisDate = pricingBasis === 'orderDate' ? order.orderDate : order.deliveredDate;\n    if (!basisDate) continue;\n\n    const supplier = supplierMap.get(order.supplierId);\n    if (!supplier) continue;\n\n    // Find applicable price entry\n    const applicablePriceEntry = findApplicablePriceEntry(\n      priceEntries,\n      order.supplierId,\n      order.productName,\n      basisDate\n    );\n\n    if (!applicablePriceEntry) {\n      missingPrices.add(`${supplier.name}|${order.productName}|${order.currency}`);\n      continue;\n    }\n\n    const unitPrice = parseFloat(applicablePriceEntry.price);\n    const lineAmount = unitPrice * order.qty;\n\n    calculations.push({\n      orderId: order.id,\n      awbNo: order.awbNo,\n      supplierName: supplier.name,\n      productName: order.productName,\n      qty: order.qty,\n      unitPrice,\n      lineAmount,\n      currency: order.currency,\n      hsn: applicablePriceEntry.hsn,\n      basisDate: basisDate.toISOString().split('T')[0]\n    });\n  }\n\n  // Group by supplier and currency\n  const supplierSummary = new Map();\n  calculations.forEach(calc => {\n    const key = `${calc.supplierName}|${calc.currency}`;\n    if (!supplierSummary.has(key)) {\n      supplierSummary.set(key, {\n        supplierName: calc.supplierName,\n        currency: calc.currency,\n        orderCount: 0,\n        totalAmount: 0,\n        orders: []\n      });\n    }\n    \n    const summary = supplierSummary.get(key);\n    summary.orderCount++;\n    summary.totalAmount += calc.lineAmount;\n    summary.orders.push(calc);\n  });\n\n  return {\n    calculations,\n    supplierSummary: Array.from(supplierSummary.values()),\n    missingPrices: Array.from(missingPrices).map(item => {\n      const [supplierName, productName, currency] = item.split('|');\n      return { supplierName, productName, currency };\n    })\n  };\n}\n\nfunction findApplicablePriceEntry(\n  priceEntries: PriceEntry[],\n  supplierId: string,\n  productName: string,\n  basisDate: Date\n): PriceEntry | undefined {\n  const applicableEntries = priceEntries.filter(entry => \n    entry.supplierId === supplierId &&\n    entry.productName.toLowerCase() === productName.toLowerCase() &&\n    entry.effectiveFrom <= basisDate &&\n    (!entry.effectiveTo || entry.effectiveTo >= basisDate)\n  );\n\n  // Return the most recent one if multiple found\n  return applicableEntries.sort((a, b) => \n    b.effectiveFrom.getTime() - a.effectiveFrom.getTime()\n  )[0];\n}\n\nexport async function generateReports(\n  orders: Order[],\n  priceEntries: PriceEntry[],\n  suppliers: Supplier[],\n  reconLogs: ReconciliationLog[],\n  filters: ReportFilters\n) {\n  // Apply filters\n  let filteredOrders = orders;\n  \n  if (filters.periodFrom) {\n    const fromDate = new Date(filters.periodFrom);\n    filteredOrders = filteredOrders.filter(order => \n      order.deliveredDate && order.deliveredDate >= fromDate\n    );\n  }\n  \n  if (filters.periodTo) {\n    const toDate = new Date(filters.periodTo);\n    filteredOrders = filteredOrders.filter(order => \n      order.deliveredDate && order.deliveredDate <= toDate\n    );\n  }\n  \n  if (filters.currency) {\n    filteredOrders = filteredOrders.filter(order => order.currency === filters.currency);\n  }\n  \n  if (filters.supplier) {\n    const supplier = suppliers.find(s => s.name === filters.supplier);\n    if (supplier) {\n      filteredOrders = filteredOrders.filter(order => order.supplierId === supplier.id);\n    }\n  }\n\n  // Generate different report types\n  const reports = {\n    supplierPayoutSummary: generateSupplierPayoutSummary(filteredOrders, suppliers),\n    payoutExportSheet: generatePayoutExportSheet(filteredOrders, suppliers, priceEntries),\n    cancelledOrdersReport: generateCancelledOrdersReport(orders),\n    reconciliationLog: reconLogs,\n    exceptionsReport: generateExceptionsReport(filteredOrders),\n    lineDetails: generateLineDetails(filteredOrders, suppliers, priceEntries)\n  };\n\n  return reports;\n}\n\nfunction generateSupplierPayoutSummary(orders: Order[], suppliers: Supplier[]) {\n  const supplierMap = new Map(suppliers.map(s => [s.id, s]));\n  const summary = new Map();\n\n  orders.forEach(order => {\n    const supplier = supplierMap.get(order.supplierId);\n    if (!supplier) return;\n\n    const key = `${supplier.id}|${order.currency}`;\n    if (!summary.has(key)) {\n      summary.set(key, {\n        supplierId: supplier.id,\n        supplierName: supplier.name,\n        currency: order.currency,\n        totalOrders: 0,\n        deliveredOrders: 0,\n        rtsOrders: 0,\n        totalAmount: 0\n      });\n    }\n\n    const s = summary.get(key);\n    s.totalOrders++;\n    \n    if (['delivered', 'completed'].includes(order.status.toLowerCase())) {\n      s.deliveredOrders++;\n      s.totalAmount += parseFloat(order.lineAmount || '0');\n    } else if (['rts', 'rto', 'returned'].includes(order.status.toLowerCase())) {\n      s.rtsOrders++;\n    }\n  });\n\n  return Array.from(summary.values()).sort((a, b) => b.totalAmount - a.totalAmount);\n}\n\nfunction generatePayoutExportSheet(orders: Order[], suppliers: Supplier[], priceEntries: PriceEntry[]) {\n  const supplierMap = new Map(suppliers.map(s => [s.id, s]));\n  const deliveredOrders = orders.filter(order => \n    ['delivered', 'completed'].includes(order.status.toLowerCase())\n  );\n\n  return deliveredOrders.map(order => {\n    const supplier = supplierMap.get(order.supplierId);\n    return {\n      awbNo: order.awbNo,\n      supplierName: supplier?.name || 'Unknown',\n      courier: order.courier || '',\n      hsn: order.hsn || '',\n      productName: order.productName,\n      qty: order.qty,\n      productPrice: order.unitPrice || 0,\n      deliveredDate: order.deliveredDate?.toISOString().split('T')[0] || '',\n      status: order.status\n    };\n  });\n}\n\nfunction generateCancelledOrdersReport(orders: Order[]) {\n  return orders\n    .filter(order => order.status.toLowerCase() === 'cancelled')\n    .map(order => ({\n      awbNo: order.awbNo,\n      supplierName: 'Unknown', // Would need to join with supplier\n      productName: order.productName,\n      qty: order.qty,\n      status: order.status,\n      channelOrderDate: order.channelOrderDate?.toISOString().split('T')[0] || '',\n      orderDate: order.orderDate?.toISOString().split('T')[0] || ''\n    }));\n}\n\nfunction generateExceptionsReport(orders: Order[]) {\n  const exceptions = [];\n  \n  orders.forEach((order, index) => {\n    // Check for missing required fields\n    if (!order.awbNo) {\n      exceptions.push({\n        rowIndex: index + 1,\n        type: 'Missing AWB No',\n        description: 'AWB Number is required',\n        orderId: order.id\n      });\n    }\n    \n    if (!order.productName) {\n      exceptions.push({\n        rowIndex: index + 1,\n        type: 'Missing Product Name',\n        description: 'Product Name is required',\n        orderId: order.id\n      });\n    }\n    \n    if (order.qty <= 0) {\n      exceptions.push({\n        rowIndex: index + 1,\n        type: 'Invalid Quantity',\n        description: 'Quantity must be greater than 0',\n        orderId: order.id\n      });\n    }\n  });\n\n  return exceptions;\n}\n\nfunction generateLineDetails(orders: Order[], suppliers: Supplier[], priceEntries: PriceEntry[]) {\n  const supplierMap = new Map(suppliers.map(s => [s.id, s]));\n  \n  return orders.map(order => {\n    const supplier = supplierMap.get(order.supplierId);\n    return {\n      ...order,\n      supplierName: supplier?.name || 'Unknown',\n      basisDate: order.deliveredDate?.toISOString().split('T')[0] || order.orderDate?.toISOString().split('T')[0] || ''\n    };\n  });\n}\n","size_bytes":9940},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      // Clone response to read text without consuming the stream\n      const clonedRes = res.clone();\n      const text = await clonedRes.text();\n      \n      // Check if it's HTML error page\n      if (text.includes('<!DOCTYPE') || text.includes('<html')) {\n        throw new Error(`${res.status}: Server returned HTML error page`);\n      }\n      \n      // Handle file session expired (410 status)\n      if (res.status === 410) {\n        try {\n          const errorData = JSON.parse(text);\n          if (errorData?.action === 'reupload') {\n            throw new Error(`File session expired: ${errorData.message || 'Please re-upload your file'}`);\n          }\n        } catch (jsonError) {\n          // Fallback if JSON parse fails\n          throw new Error(`File session expired: Please re-upload your file`);\n        }\n      }\n      \n      throw new Error(`${res.status}: ${text || res.statusText}`);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes('Server returned HTML')) {\n        throw error;\n      }\n      console.error('Error parsing response:', error);\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: RequestInit,\n): Promise<any> {\n  try {\n    const res = await fetch(url, {\n      headers: { \"Content-Type\": \"application/json\" },\n      credentials: \"include\",\n      ...options,\n    });\n\n    await throwIfResNotOk(res);\n    \n    // Check if response is JSON\n    const contentType = res.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      try {\n        return await res.json();\n      } catch (jsonError) {\n        console.error('JSON parsing failed:', jsonError);\n        const text = await res.text();\n        console.warn('Response text:', text.substring(0, 200));\n        throw new Error('Failed to parse JSON response from server');\n      }\n    } else {\n      const text = await res.text();\n      console.warn('Non-JSON response received:', text.substring(0, 200));\n      \n      // If we get HTML, it means Vite intercepted our API call\n      // Return empty object instead of throwing to prevent app crash\n      if (text.includes('<!DOCTYPE html>')) {\n        console.warn('Vite intercepted API call, returning empty response');\n        return {};\n      }\n      throw new Error('Server returned non-JSON response');\n    }\n  } catch (error) {\n    console.error('API Request failed:', error);\n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    try {\n      const res = await fetch(queryKey.join(\"/\") as string, {\n        credentials: \"include\",\n      });\n\n      if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n        return null;\n      }\n\n      await throwIfResNotOk(res);\n      \n      // Check if response is JSON\n      const contentType = res.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        try {\n          return await res.json();\n        } catch (jsonError) {\n          console.error('Query JSON parsing failed:', jsonError);\n          const text = await res.text();\n          console.warn('Query response text:', text.substring(0, 200));\n          throw new Error('Failed to parse JSON response from server');\n        }\n      } else {\n        const text = await res.text();\n        console.warn('Non-JSON query response:', text.substring(0, 200));\n        \n        // If we get HTML, it means Vite intercepted our API call\n        // Return empty array/object instead of throwing to prevent app crash\n        if (text.includes('<!DOCTYPE html>')) {\n          console.warn('Vite intercepted query, returning empty response');\n          return null;\n        }\n        throw new Error('Server returned non-JSON response');\n      }\n    } catch (error) {\n      console.error('Query failed:', queryKey.join(\"/\"), error);\n      throw error;\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: 3,\n      retryDelay: 1000,\n    },\n    mutations: {\n      retry: 1,\n    },\n  },\n});\n","size_bytes":4574},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Calendar, Download, Filter, Calculator, Truck, Package, Database, Users, FileText, TrendingUp, Upload, Receipt } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Link } from 'wouter';\nimport * as XLSX from 'xlsx';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\n\n\n// Payout interfaces\ninterface PayoutOrder {\n  id: string;\n  awbNo: string;\n  supplierName: string;\n  productName: string;\n  courier: string;\n  deliveredDate: string;\n  deliveredQty: number;\n  unitPrice: number;\n  lineAmount: number;\n  gstPercent: number;\n  gstAmount: number;\n  totalWithGst: number;\n  status: string;\n  currency: string;\n  hsn: string;\n  orderDate: string;\n}\n\ninterface PayoutSummary {\n  supplier: string;\n  dateRange: string;\n  deliveriesCount: number;\n  totalDeliveredQty: number;\n  totalProductCost: number;\n  totalPreGstAmount: number;\n  totalGstAmount: number;\n  totalPostGstAmount: number;\n  averageGstRate: number;\n  currency: string;\n  newDeliveries?: number;\n  uniqueProducts: number;\n  avgOrderValue: number;\n}\n\nexport default function Dashboard() {\n  const [selectedSuppliers, setSelectedSuppliers] = useState<string[]>([]);\n  const [supplierSearchTerm, setSupplierSearchTerm] = useState<string>('');\n  const [datePreset, setDatePreset] = useState<string>('');\n  const [dateFrom, setDateFrom] = useState<string>('');\n  const [dateTo, setDateTo] = useState<string>('');\n  const [pricingBasis, setPricingBasis] = useState<'deliveredDate' | 'orderDate'>('deliveredDate');\n  const [currency, setCurrency] = useState<string>('INR');\n  const [minAmount, setMinAmount] = useState<string>('');\n  \n  // Filter application state\n  const [appliedFilters, setAppliedFilters] = useState({\n    selectedSuppliers: [] as string[],\n    dateFrom: '',\n    dateTo: '',\n    pricingBasis: 'deliveredDate' as 'deliveredDate' | 'orderDate',\n    currency: 'INR',\n    minAmount: ''\n  });\n  const [isApplyingFilters, setIsApplyingFilters] = useState(false);\n  const [hasUnappliedChanges, setHasUnappliedChanges] = useState(false);\n  \n  // Price list upload state\n  const [isPriceListUploading, setIsPriceListUploading] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Get suppliers for dropdown\n  const { data: suppliers = [] } = useQuery({\n    queryKey: ['/api/suppliers'],\n    retry: 3,\n    retryDelay: 1000,\n    refetchOnWindowFocus: false,\n  });\n\n  // Get orders for payout calculation\n  const { data: orders = [] } = useQuery({\n    queryKey: ['/api/orders'],\n    retry: 3,\n    retryDelay: 1000,\n    refetchOnWindowFocus: false,\n  });\n\n  // Get price entries for unit price lookup\n  const { data: priceEntries = [] } = useQuery({\n    queryKey: ['/api/price-entries'],\n    retry: 3,\n    retryDelay: 1000,\n    refetchOnWindowFocus: false,\n  });\n  \n  // Fetch dashboard stats\n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    refetchInterval: 30000,\n    retry: 3,\n    retryDelay: 1000,\n    refetchOnWindowFocus: false,\n  });\n\n  // Get missing price entries for visibility\n  const { data: missingPriceEntries = [] } = useQuery({\n    queryKey: ['/api/missing-price-entries'],\n    retry: 3,\n    retryDelay: 1000,\n    refetchOnWindowFocus: false,\n  });\n\n  // Calculate date range based on preset\n  const getDateRange = (preset: string) => {\n    const today = new Date();\n    const thisMonthStart = new Date(today.getFullYear(), today.getMonth(), 1);\n    const last30Days = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    switch (preset) {\n      case 'THIS_MONTH':\n        return {\n          from: thisMonthStart.toISOString().split('T')[0],\n          to: today.toISOString().split('T')[0]\n        };\n      case 'LAST_30_DAYS':\n        return {\n          from: last30Days.toISOString().split('T')[0],\n          to: today.toISOString().split('T')[0]\n        };\n      default:\n        return { from: dateFrom, to: dateTo };\n    }\n  };\n\n  // Apply date preset\n  React.useEffect(() => {\n    if (datePreset) {\n      const range = getDateRange(datePreset);\n      setDateFrom(range.from);\n      setDateTo(range.to);\n    }\n  }, [datePreset]);\n\n  // Calculate supplier date ranges\n  const supplierDateRanges = useMemo(() => {\n    const ranges = new Map<string, { firstDelivery: string; lastDelivery: string; totalOrders: number }>();\n    \n    if (Array.isArray(orders) && orders.length > 0 && Array.isArray(suppliers) && suppliers.length > 0) {\n      const suppliersMap = new Map(suppliers.map((s: any) => [s.id, s.name]));\n      \n      orders.forEach((order: any) => {\n        const supplierName = suppliersMap.get(order.supplierId) || order.supplierName;\n        if (!supplierName || !['Delivered', 'Completed'].includes(order.status)) return;\n        \n        const deliveryDate = order.deliveredDate || order.orderDate || order.channelOrderDate;\n        if (!deliveryDate) return;\n        \n        const existing = ranges.get(supplierName);\n        if (!existing) {\n          ranges.set(supplierName, {\n            firstDelivery: deliveryDate,\n            lastDelivery: deliveryDate,\n            totalOrders: 1\n          });\n        } else {\n          ranges.set(supplierName, {\n            firstDelivery: deliveryDate < existing.firstDelivery ? deliveryDate : existing.firstDelivery,\n            lastDelivery: deliveryDate > existing.lastDelivery ? deliveryDate : existing.lastDelivery,\n            totalOrders: existing.totalOrders + 1\n          });\n        }\n      });\n    }\n    \n    return ranges;\n  }, [orders, suppliers]);\n\n  // Calculate supplier missing products\n  const supplierMissingProducts = useMemo(() => {\n    const missing = new Map<string, any[]>();\n    \n    if (Array.isArray(missingPriceEntries) && missingPriceEntries.length > 0) {\n      missingPriceEntries.forEach((entry: any) => {\n        const supplierName = entry.supplierName;\n        if (!missing.has(supplierName)) {\n          missing.set(supplierName, []);\n        }\n        missing.get(supplierName)?.push(entry);\n      });\n    }\n    \n    return missing;\n  }, [missingPriceEntries]);\n\n  // Track filter changes\n  React.useEffect(() => {\n    const hasChanges = (\n      JSON.stringify(selectedSuppliers.sort()) !== JSON.stringify(appliedFilters.selectedSuppliers.sort()) ||\n      dateFrom !== appliedFilters.dateFrom ||\n      dateTo !== appliedFilters.dateTo ||\n      pricingBasis !== appliedFilters.pricingBasis ||\n      currency !== appliedFilters.currency ||\n      minAmount !== appliedFilters.minAmount\n    );\n    setHasUnappliedChanges(hasChanges);\n  }, [selectedSuppliers, dateFrom, dateTo, pricingBasis, currency, minAmount, appliedFilters]);\n\n  // Calculate eligible suppliers for current date range\n  const eligibleSuppliers = useMemo(() => {\n    if (!dateFrom || !dateTo || !Array.isArray(orders) || !Array.isArray(suppliers) || !Array.isArray(priceEntries)) {\n      return [];\n    }\n\n    const fromDate = new Date(dateFrom);\n    const toDate = new Date(dateTo);\n    toDate.setHours(23, 59, 59, 999);\n\n    const suppliersMap = new Map(suppliers.map((s: any) => [s.id, s.name]));\n    const supplierPayouts = new Map();\n\n    // Filter orders for date range and calculate payouts per supplier\n    orders.forEach((order: any) => {\n      const supplierName = suppliersMap.get(order.supplierId) || order.supplierName;\n      if (!supplierName) return;\n\n      const targetDate = pricingBasis === 'orderDate' ? \n        new Date(order.orderDate || order.channelOrderDate) : \n        new Date(order.deliveredDate);\n      \n      if (!targetDate || targetDate < fromDate || targetDate > toDate) return;\n      if (order.status !== 'Delivered' && order.status !== 'Completed') return;\n\n      const deliveredQty = parseInt(String(order.deliveredQty || order.qty || 0));\n      if (deliveredQty <= 0) return;\n\n      // Find price entry\n      const priceEntry = priceEntries.find((entry: any) => \n        entry.supplierId === order.supplierId && \n        entry.productName === order.productName\n      );\n\n      if (!priceEntry || (priceEntry.unitPrice < 0 && priceEntry.price < 0)) return;\n\n      // Use either unitPrice or price field\n      const unitPriceAfterGst = parseFloat(String(priceEntry.unitPrice || priceEntry.price)) || 0;\n      if (unitPriceAfterGst <= 0) return; // Skip if no valid price\n      \n      const gstPercent = parseFloat(String(priceEntry.gstPercent || priceEntry.gstRate)) || 18;\n      const unitPriceBeforeGst = unitPriceAfterGst / (1 + gstPercent / 100);\n      const lineAmount = unitPriceBeforeGst * deliveredQty;\n      const gstAmount = lineAmount * (gstPercent / 100);\n      const totalWithGst = lineAmount + gstAmount;\n\n      if (!supplierPayouts.has(supplierName)) {\n        supplierPayouts.set(supplierName, {\n          supplierName,\n          supplierId: order.supplierId,\n          orderCount: 0,\n          totalQty: 0,\n          totalPreGstAmount: 0,\n          totalGstAmount: 0,\n          totalPostGstAmount: 0,\n          uniqueProducts: new Set(),\n          orders: []\n        });\n      }\n\n      const payout = supplierPayouts.get(supplierName);\n      payout.orderCount++;\n      payout.totalQty += deliveredQty;\n      payout.totalPreGstAmount += lineAmount;\n      payout.totalGstAmount += gstAmount;\n      payout.totalPostGstAmount += totalWithGst;\n      payout.uniqueProducts.add(order.productName);\n      payout.orders.push(order);\n    });\n\n    // Convert to array and add supplier details\n    return Array.from(supplierPayouts.values()).map(payout => {\n      const supplier = suppliers.find((s: any) => s.name === payout.supplierName);\n      return {\n        ...payout,\n        uniqueProducts: payout.uniqueProducts.size,\n        orderAccount: supplier?.orderAccount || 'N/A',\n        avgOrderValue: payout.orderCount > 0 ? payout.totalPostGstAmount / payout.orderCount : 0\n      };\n    }).sort((a, b) => b.totalPostGstAmount - a.totalPostGstAmount);\n  }, [dateFrom, dateTo, pricingBasis, orders, suppliers, priceEntries]);\n\n  // Calculate order account summary for current date range and selected suppliers\n  const orderAccountSummary = useMemo(() => {\n    if (!dateFrom || !dateTo || selectedSuppliers.length === 0 || !Array.isArray(orders) || !Array.isArray(suppliers) || !Array.isArray(priceEntries)) {\n      return [];\n    }\n\n    const fromDate = new Date(dateFrom);\n    const toDate = new Date(dateTo);\n    toDate.setHours(23, 59, 59, 999);\n\n    const suppliersMap = new Map(suppliers.map((s: any) => [s.id, s.name]));\n    const orderAccountPayouts = new Map();\n\n    // Filter orders for date range and selected suppliers, calculate payouts per order account\n    orders.forEach((order: any) => {\n      const supplierName = suppliersMap.get(order.supplierId) || order.supplierName;\n      if (!supplierName || !selectedSuppliers.includes(supplierName)) return;\n\n      const targetDate = pricingBasis === 'orderDate' ? \n        new Date(order.orderDate || order.channelOrderDate) : \n        new Date(order.deliveredDate);\n      \n      if (!targetDate || targetDate < fromDate || targetDate > toDate) return;\n      if (order.status !== 'Delivered' && order.status !== 'Completed') return;\n\n      const deliveredQty = parseInt(String(order.deliveredQty || order.qty || 0));\n      if (deliveredQty <= 0) return;\n\n      // Find price entry\n      const priceEntry = priceEntries.find((entry: any) => \n        entry.supplierId === order.supplierId && \n        entry.productName === order.productName\n      );\n\n      if (!priceEntry || (priceEntry.unitPrice < 0 && priceEntry.price < 0)) return;\n\n      // Use either unitPrice or price field\n      const unitPriceAfterGst = parseFloat(String(priceEntry.unitPrice || priceEntry.price)) || 0;\n      if (unitPriceAfterGst <= 0) return; // Skip if no valid price\n      \n      const gstPercent = parseFloat(String(priceEntry.gstPercent || priceEntry.gstRate)) || 18;\n      const unitPriceBeforeGst = unitPriceAfterGst / (1 + gstPercent / 100);\n      const lineAmount = unitPriceBeforeGst * deliveredQty;\n      const gstAmount = lineAmount * (gstPercent / 100);\n      const totalWithGst = lineAmount + gstAmount;\n\n      // Get order account from supplier or order\n      const supplier = suppliers.find((s: any) => s.name === supplierName);\n      const orderAccount = supplier?.orderAccount || order.orderAccount || 'Unknown Account';\n\n      if (!orderAccountPayouts.has(orderAccount)) {\n        orderAccountPayouts.set(orderAccount, {\n          orderAccount,\n          orderCount: 0,\n          totalQty: 0,\n          totalPreGstAmount: 0,\n          totalGstAmount: 0,\n          totalPostGstAmount: 0,\n          uniqueProducts: new Set(),\n          suppliers: new Set(),\n          orders: []\n        });\n      }\n\n      const payout = orderAccountPayouts.get(orderAccount);\n      payout.orderCount++;\n      payout.totalQty += deliveredQty;\n      payout.totalPreGstAmount += lineAmount;\n      payout.totalGstAmount += gstAmount;\n      payout.totalPostGstAmount += totalWithGst;\n      payout.uniqueProducts.add(order.productName);\n      payout.suppliers.add(supplierName);\n      payout.orders.push(order);\n    });\n\n    // Convert to array and add calculated fields\n    return Array.from(orderAccountPayouts.values()).map(payout => ({\n      ...payout,\n      uniqueProducts: payout.uniqueProducts.size,\n      supplierCount: payout.suppliers.size,\n      avgOrderValue: payout.orderCount > 0 ? payout.totalPostGstAmount / payout.orderCount : 0,\n      suppliers: Array.from(payout.suppliers)\n    })).sort((a, b) => b.totalPostGstAmount - a.totalPostGstAmount);\n  }, [dateFrom, dateTo, selectedSuppliers, pricingBasis, orders, suppliers, priceEntries]);\n\n  // Apply filters function\n  const applyFilters = async () => {\n    setIsApplyingFilters(true);\n    \n    // Simulate processing delay for user feedback\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    setAppliedFilters({\n      selectedSuppliers: [...selectedSuppliers],\n      dateFrom,\n      dateTo,\n      pricingBasis,\n      currency,\n      minAmount\n    });\n    \n    setHasUnappliedChanges(false);\n    setIsApplyingFilters(false);\n  };\n\n  // Handle price list upload\n  const handlePriceListUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    try {\n      setIsPriceListUploading(true);\n\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('supplierName', selectedSuppliers[0] || '');\n\n      // Direct fetch call for file upload (don't use apiRequest for FormData)\n      const response = await fetch('/api/price-entries/bulk-upload', {\n        method: 'POST',\n        body: formData, // No Content-Type header - let browser set it with boundary\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Upload failed' }));\n        throw new Error(errorData.message || errorData.error || 'Upload failed');\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Invalidate queries to refresh data\n        await queryClient.invalidateQueries({ queryKey: ['/api/price-entries'] });\n        await queryClient.invalidateQueries({ queryKey: ['/api/missing-price-entries'] });\n        \n        // Auto-recalculate payouts for current view\n        applyFilters();\n        \n        alert(`Successfully uploaded ${result.processedCount || 0} price entries!`);\n      } else {\n        alert(result.message || 'Failed to upload price list. Please try again.');\n      }\n    } catch (error) {\n      console.error('Price list upload error:', error);\n      alert(`Error uploading price list: ${error.message}`);\n    } finally {\n      setIsPriceListUploading(false);\n      // Reset the file input\n      event.target.value = '';\n    }\n  };\n\n  // Calculate payout data using applied filters\n  const payoutData = useMemo(() => {\n    if (!appliedFilters.selectedSuppliers.length || !appliedFilters.dateFrom || !appliedFilters.dateTo) {\n      return { summary: null, payoutOrders: [], cancelledOrders: [], missingPrices: [] };\n    }\n\n    const fromDate = new Date(appliedFilters.dateFrom);\n    const toDate = new Date(appliedFilters.dateTo);\n    // Set toDate to end of day to include all orders on the last date\n    toDate.setHours(23, 59, 59, 999);\n\n    // Find suppliers data to map orders to supplier names\n    const suppliersMap = new Map(Array.isArray(suppliers) ? suppliers.map((s: any) => [s.id, s.name]) : []);\n    \n    // Filter orders for selected suppliers and date range\n    const filteredOrders = Array.isArray(orders) ? orders.filter((order: any) => {\n      const supplierName = suppliersMap.get(order.supplierId) || order.supplierName;\n      \n      if (!appliedFilters.selectedSuppliers.includes(supplierName)) return false;\n\n      const targetDate = appliedFilters.pricingBasis === 'orderDate' ? \n        new Date(order.orderDate || order.channelOrderDate) : \n        new Date(order.deliveredDate);\n      \n      return targetDate >= fromDate && targetDate <= toDate;\n    }) : [];\n\n    // Separate delivered/completed vs cancelled orders\n    const payableOrders = filteredOrders.filter(order => \n      ['Delivered', 'Completed'].includes(order.status)\n    );\n\n    const cancelledOrders = filteredOrders.filter(order => \n      ['Cancelled', 'RTO', 'Lost'].includes(order.status)\n    );\n\n    // Create price entries map for quick lookup (with fallback by product name)\n    const exactPriceMap = new Map<string, any>(); // supplier + product\n    const productPriceMap = new Map<string, any>(); // product name only (fallback)\n    \n    if (Array.isArray(priceEntries)) {\n      priceEntries.forEach((entry: any) => {\n        const exactKey = `${entry.supplierId}-${entry.productName}`;\n        const productKey = entry.productName;\n        \n        // Store exact match (supplier + product)\n        exactPriceMap.set(exactKey, entry);\n        \n        // Store by product name only (for fallback lookup)\n        if (!productPriceMap.has(productKey)) {\n          productPriceMap.set(productKey, entry);\n        }\n      });\n    }\n\n    const payoutOrders: PayoutOrder[] = [];\n    const missingPrices: any[] = [];\n\n    // Process payable orders\n    payableOrders.forEach(order => {\n      const exactPriceKey = `${order.supplierId}-${order.productName}`;\n      const productOnlyKey = order.productName;\n      \n      // Try exact match first (supplier + product), then fallback to product name only\n      const priceEntry = exactPriceMap.get(exactPriceKey) || productPriceMap.get(productOnlyKey);\n\n      const deliveredQty = parseInt(order.qty) || 1;\n      \n      // Get pricing info from price entry\n      const unitPriceBeforeGst = parseFloat(priceEntry?.priceBeforeGst) || 0; // Unit price (before GST)\n      const unitPriceAfterGst = parseFloat(priceEntry?.price) || 0; // Final price after GST\n      const gstPercent = parseFloat(priceEntry?.gstRate) || 18; // Actual GST rate from price entry\n      \n      // Calculate line amounts (using before-GST pricing)\n      const lineAmount = deliveredQty * unitPriceBeforeGst; // Line amount before GST\n      const gstAmount = (lineAmount * gstPercent) / 100; // GST amount calculated from line amount\n      const totalWithGst = lineAmount + gstAmount; // Total including GST\n\n\n\n      if (unitPriceBeforeGst === 0) {\n        missingPrices.push({\n          supplierName: suppliersMap.get(order.supplierId) || 'Unknown',\n          productName: order.productName,\n          hsn: order.hsn,\n          orderQty: deliveredQty,\n          awbNo: order.awbNo,\n          orderDate: order.orderDate || order.channelOrderDate\n        });\n      } else {\n        payoutOrders.push({\n          id: order.id,\n          awbNo: order.awbNo,\n          supplierName: suppliersMap.get(order.supplierId) || 'Unknown',\n          productName: order.productName,\n          courier: order.courier || '',\n          orderAccount: order.orderAccount || null,\n          deliveredDate: order.deliveredDate || order.orderDate || order.channelOrderDate,\n          deliveredQty,\n          unitPrice: unitPriceBeforeGst,\n          lineAmount,\n          gstPercent,\n          gstAmount,\n          totalWithGst,\n          status: order.status,\n          currency: order.currency || appliedFilters.currency,\n          hsn: order.hsn || priceEntry?.hsn || '',\n          orderDate: order.orderDate || order.channelOrderDate\n        });\n      }\n    });\n\n    // Enhanced summary calculation with proper GST breakdown\n    const totalDeliveredQty = payoutOrders.reduce((sum, order) => sum + order.deliveredQty, 0);\n    const totalPreGstAmount = payoutOrders.reduce((sum, order) => sum + order.lineAmount, 0); // Line amount is before GST\n    const totalGstAmount = payoutOrders.reduce((sum, order) => sum + order.gstAmount, 0);\n    const totalPostGstAmount = payoutOrders.reduce((sum, order) => sum + order.totalWithGst, 0); // Total with GST\n    const uniqueProducts = new Set(payoutOrders.map(order => order.productName)).size;\n\n    const summary: PayoutSummary = {\n      supplier: appliedFilters.selectedSuppliers.length === 1 \n        ? appliedFilters.selectedSuppliers[0] \n        : `${appliedFilters.selectedSuppliers.length} Suppliers Combined`,\n      dateRange: `${appliedFilters.dateFrom} to ${appliedFilters.dateTo}`,\n      deliveriesCount: payoutOrders.length,\n      totalDeliveredQty,\n      totalProductCost: totalPostGstAmount, // Keep backward compatibility\n      totalPreGstAmount,\n      totalGstAmount,\n      totalPostGstAmount,\n      averageGstRate: payoutOrders.length > 0 ? \n        payoutOrders.reduce((sum, order) => sum + order.gstPercent, 0) / payoutOrders.length : 0,\n      currency: appliedFilters.currency,\n      uniqueProducts,\n      avgOrderValue: payoutOrders.length > 0 ? totalPostGstAmount / payoutOrders.length : 0,\n      newDeliveries: payoutOrders.filter(order => {\n        const deliveredDate = new Date(order.deliveredDate);\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - 7);\n        return deliveredDate >= cutoffDate;\n      }).length\n    };\n\n    return { summary, payoutOrders, cancelledOrders, missingPrices };\n  }, [appliedFilters, orders, suppliers, priceEntries]);\n\n  // Helper function to calculate missing prices for specific supplier (bulk price management style)\n  const calculateSupplierMissingPrices = (supplierName: string, orders: any[], priceEntries: any[], suppliers: any[]) => {\n    if (!supplierName || !Array.isArray(orders) || !Array.isArray(priceEntries) || !Array.isArray(suppliers)) {\n      return [];\n    }\n\n    // Find the supplier ID\n    const supplier = suppliers.find((s: any) => s.name === supplierName);\n    if (!supplier) return [];\n\n    // Create a map of existing price entries for this supplier\n    const existingPrices = new Map();\n    priceEntries.forEach((entry: any) => {\n      if (entry.supplierId === supplier.id) {\n        const key = `${entry.supplierId}-${entry.productName}`;\n        existingPrices.set(key, true);\n      }\n    });\n\n    // Find unique supplier-product combinations from orders for this supplier only\n    const combinations = new Map();\n    orders.forEach((order: any) => {\n      const orderSupplierName = suppliers.find((s: any) => s.id === order.supplierId)?.name || order.supplierName;\n      \n      // Only process orders for the selected supplier\n      if (orderSupplierName === supplierName) {\n        const key = `${supplierName}-${order.productName}`;\n        if (!combinations.has(key)) {\n          combinations.set(key, {\n            supplierName: supplierName,\n            productName: order.productName,\n            orderCount: 1,\n            supplierProductId: `${supplierName}${order.productName}`\n          });\n        } else {\n          const existing = combinations.get(key);\n          existing.orderCount += 1;\n        }\n      }\n    });\n\n    // Filter out combinations that already have price entries\n    const missing: any[] = [];\n    combinations.forEach((combo, key) => {\n      const priceKey = `${supplier.id}-${combo.productName}`;\n      \n      if (!existingPrices.has(priceKey)) {\n        missing.push(combo);\n      }\n    });\n\n    return missing;\n  };\n\n  // Export function\n  const exportPayoutData = (type: string) => {\n    const payoutOrders = payoutData.payoutOrders;\n    let worksheetData: any[] = [];\n    let filename = '';\n\n    switch (type) {\n      case 'export':\n        const selectedSupplierData = Array.isArray(suppliers) && selectedSuppliers.length > 0 ? suppliers.find((s: any) => s.name === selectedSuppliers[0]) : null;\n        const supplierOrderAccount = selectedSupplierData?.orderAccount || 'Not Available';\n        \n        worksheetData = [\n          ['AWB No', 'Supplier Name', 'Order Account', 'Courier', 'HSN', 'Product Name', 'Qty', 'Product Price (INR)', 'Line Amount (INR)', 'GST%', 'GST Amount (INR)', 'Price After GST (INR)', 'Delivered Date', 'Status'],\n          ...payoutOrders.map(order => [\n            order.awbNo,\n            order.supplierName,\n            order.orderAccount || 'N/A',\n            order.courier,\n            order.hsn,\n            order.productName,\n            order.deliveredQty,\n            (parseFloat(String(order.unitPrice)) || 0).toFixed(2),\n            (parseFloat(String(order.lineAmount)) || 0).toFixed(2),\n            `${order.gstPercent}%`,\n            (parseFloat(String(order.gstAmount)) || 0).toFixed(2),\n            (parseFloat(String(order.totalWithGst)) || 0).toFixed(2),\n            order.deliveredDate,\n            order.status\n          ])\n        ];\n        const suppliersText = appliedFilters.selectedSuppliers.length > 1 ? `${appliedFilters.selectedSuppliers.length}Suppliers` : appliedFilters.selectedSuppliers[0] || 'NoSupplier';\n        filename = `Payout_Export_${suppliersText}_${appliedFilters.dateFrom}_${appliedFilters.dateTo}.xlsx`;\n        break;\n\n      case 'summary':\n        const selectedSupplierDataSummary = Array.isArray(suppliers) && selectedSuppliers.length > 0 ? suppliers.find((s: any) => s.name === selectedSuppliers[0]) : null;\n        const supplierOrderAccountSummary = selectedSupplierDataSummary?.orderAccount || 'Not Available';\n        \n        worksheetData = [\n          ['Supplier Name', 'Order Account', 'Date Range', 'Total Deliveries', 'Total Qty', 'Unique Products', 'Amount Before GST', 'GST Amount', 'Total Amount with GST', 'Average GST Rate', 'Average Order Value'],\n          [\n            payoutData.summary?.supplier || '',\n            supplierOrderAccountSummary,\n            payoutData.summary?.dateRange || '',\n            payoutData.summary?.deliveriesCount || 0,\n            payoutData.summary?.totalDeliveredQty || 0,\n            payoutData.summary?.uniqueProducts || 0,\n            (parseFloat(String(payoutData.summary?.totalPreGstAmount || 0))).toFixed(2),\n            (parseFloat(String(payoutData.summary?.totalGstAmount || 0))).toFixed(2),\n            (parseFloat(String(payoutData.summary?.totalPostGstAmount || 0))).toFixed(2),\n            `${(parseFloat(String(payoutData.summary?.averageGstRate || 0))).toFixed(2)}%`,\n            (parseFloat(String(payoutData.summary?.avgOrderValue || 0))).toFixed(2)\n          ]\n        ];\n        const suppliersSummaryText = appliedFilters.selectedSuppliers.length > 1 ? `${appliedFilters.selectedSuppliers.length}Suppliers` : appliedFilters.selectedSuppliers[0] || 'NoSupplier';\n        filename = `Enhanced_Payout_Summary_${suppliersSummaryText}_${appliedFilters.dateFrom}_${appliedFilters.dateTo}.xlsx`;\n        break;\n\n      case 'lines':\n        const selectedSupplierDataLines = Array.isArray(suppliers) && selectedSuppliers.length > 0 ? suppliers.find((s: any) => s.name === selectedSuppliers[0]) : null;\n        const supplierOrderAccountLines = selectedSupplierDataLines?.orderAccount || 'Not Available';\n        \n        worksheetData = [\n          ['Supplier Name', 'Order Account', 'Product Name', 'AWB No', 'Courier', 'Delivered Date', 'Delivered Qty', 'Product Cost (INR)', 'Line Amount (INR)', 'GST%', 'GST Amount (INR)', 'Price After GST (INR)', 'Status', 'Currency', 'HSN'],\n          ...payoutOrders.map(order => [\n            order.supplierName,\n            order.orderAccount || 'N/A',\n            order.productName,\n            order.awbNo,\n            order.courier,\n            order.deliveredDate,\n            order.deliveredQty,\n            (parseFloat(String(order.unitPrice)) || 0).toFixed(2),\n            (parseFloat(String(order.lineAmount)) || 0).toFixed(2),\n            `${order.gstPercent}%`,\n            (parseFloat(String(order.gstAmount)) || 0).toFixed(2),\n            (parseFloat(String(order.totalWithGst)) || 0).toFixed(2),\n            order.status,\n            order.currency,\n            order.hsn\n          ])\n        ];\n        const suppliersLinesText = appliedFilters.selectedSuppliers.length > 1 ? `${appliedFilters.selectedSuppliers.length}Suppliers` : appliedFilters.selectedSuppliers[0] || 'NoSupplier';\n        filename = `Payout_Lines_${suppliersLinesText}_${appliedFilters.dateFrom}_${appliedFilters.dateTo}.xlsx`;\n        break;\n\n      case 'cancelled':\n        worksheetData = [\n          ['AWB No', 'Order Account', 'Supplier Name', 'Product Name', 'Order Date', 'Status', 'Reason'],\n          ...payoutData.cancelledOrders.map(order => [\n            order.awbNo,\n            order.orderAccount || 'N/A',\n            order.supplierName || 'Unknown',\n            order.productName,\n            order.orderDate,\n            order.status,\n            'Order Cancelled/RTO'\n          ])\n        ];\n        const suppliersCancelledText = appliedFilters.selectedSuppliers.length > 1 ? `${appliedFilters.selectedSuppliers.length}Suppliers` : appliedFilters.selectedSuppliers[0] || 'NoSupplier';\n        filename = `Cancelled_Orders_${suppliersCancelledText}_${appliedFilters.dateFrom}_${appliedFilters.dateTo}.xlsx`;\n        break;\n\n      case 'missing':\n        // Calculate missing prices using bulk price management logic for selected supplier\n        const supplierMissingPrices = selectedSuppliers.length > 0 ? calculateSupplierMissingPrices(selectedSuppliers[0], orders, priceEntries, suppliers) : [];\n        \n        console.log(`üîç Debug Missing Prices Export:`, supplierMissingPrices.length, 'items');\n        console.log(`üìã Sample missing price data:`, supplierMissingPrices.slice(0, 3));\n        \n        worksheetData = [\n          ['Supplier Name', 'Product Name', 'Order Count', 'Supplier Product ID', 'Price Before GST (INR)', 'GST Rate (%)', 'Price After GST (INR)', 'HSN Code', 'Currency', 'Effective From (YYYY-MM-DD)', 'Effective To (YYYY-MM-DD)'],\n          ...supplierMissingPrices.map(item => [\n            item.supplierName,\n            item.productName,\n            item.orderCount,\n            item.supplierProductId,\n            '', // Price Before GST - empty for user to fill\n            '', // GST Rate - empty for user to fill  \n            '', // Price After GST - will be calculated\n            '', // HSN - empty for user to fill\n            'INR',\n            new Date().toISOString().split('T')[0], // Today's date\n            '' // Effective To - empty\n          ])\n        ];\n        const suppliersMissingText = appliedFilters.selectedSuppliers.length > 1 ? `${appliedFilters.selectedSuppliers.length}Suppliers` : appliedFilters.selectedSuppliers[0] || 'NoSupplier';\n        filename = `Missing_Prices_${suppliersMissingText}_${appliedFilters.dateFrom}_${appliedFilters.dateTo}.xlsx`;\n        break;\n\n      default:\n        return;\n    }\n\n    // Create Excel workbook and worksheet\n    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Payout Data');\n\n    // Set column widths for better readability\n    const maxColWidths = worksheetData[0].map(() => 10);\n    worksheetData.forEach(row => {\n      row.forEach((cell: any, colIndex: number) => {\n        const cellLength = String(cell || '').length;\n        if (cellLength > maxColWidths[colIndex]) {\n          maxColWidths[colIndex] = Math.min(cellLength + 2, 50);\n        }\n      });\n    });\n\n    worksheet['!cols'] = maxColWidths.map((width: number) => ({ width }));\n\n    // Generate Excel file and download\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n      {/* Professional Header */}\n      <div className=\"bg-white shadow-lg border-b-4 border-blue-500\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-100 p-2 rounded-lg\">\n                <Calculator className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Supplier Payout Dashboard</h1>\n                <p className=\"text-blue-600 font-medium\">Professional Payout Calculation & Management System</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-500\">Asia/Kolkata Timezone</p>\n                <p className=\"text-lg font-semibold text-gray-900\">{new Date().toLocaleDateString()}</p>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Link href=\"/data-management\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2\">\n                    <Database className=\"h-4 w-4\" />\n                    <span>Data Management</span>\n                  </Button>\n                </Link>\n                <Link href=\"/price-management\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2\">\n                    <Calculator className=\"h-4 w-4\" />\n                    <span>Price Management</span>\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Quick Stats */}\n        {(dashboardStats as any) && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"border-2 border-blue-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-blue-600\">Total Orders</CardTitle>\n                <Package className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-900\">\n                  {((dashboardStats as any)?.totalOrders?.toLocaleString() || '0') as React.ReactNode}\n                </div>\n                <p className=\"text-xs text-blue-600\">Processed orders</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-green-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-green-600\">Suppliers</CardTitle>\n                <Truck className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-900\">\n                  {(dashboardStats as any)?.totalSuppliers || '0'}\n                </div>\n                <p className=\"text-xs text-green-600\">Active vendors</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-purple-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-purple-600\">Products</CardTitle>\n                <Package className=\"h-4 w-4 text-purple-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-purple-900\">\n                  {(dashboardStats as any)?.uniqueProducts || '0'}\n                </div>\n                <p className=\"text-xs text-purple-600\">Unique products</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-orange-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-orange-600\">Average Value</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-orange-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-900\">\n                  ‚Çπ{((dashboardStats as any)?.averageOrderValue || 0).toFixed(2)}\n                </div>\n                <p className=\"text-xs text-orange-600\">Per order</p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Navigation Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <Link href=\"/supplier-performance\">\n            <Card className=\"border-2 border-blue-200 hover:border-blue-400 transition-colors cursor-pointer shadow-lg hover:shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3 text-blue-700\">\n                  <Users className=\"h-6 w-6\" />\n                  <span>Supplier Performance</span>\n                </CardTitle>\n                <CardDescription>\n                  Track supplier metrics and performance analytics\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </Link>\n\n          <Link href=\"/reports\">\n            <Card className=\"border-2 border-purple-200 hover:border-purple-400 transition-colors cursor-pointer shadow-lg hover:shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3 text-purple-700\">\n                  <FileText className=\"h-6 w-6\" />\n                  <span>Reports & Analytics</span>\n                </CardTitle>\n                <CardDescription>\n                  Generate comprehensive reports and export data\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </Link>\n\n          <Link href=\"/data-management\">\n            <Card className=\"border-2 border-gray-200 hover:border-gray-400 transition-colors cursor-pointer shadow-lg hover:shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3 text-gray-700\">\n                  <Database className=\"h-6 w-6\" />\n                  <span>Data Management</span>\n                </CardTitle>\n                <CardDescription>\n                  Upload and manage order data with transparency tools\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </Link>\n\n          <Link href=\"/gst-invoice\">\n            <Card className=\"border-2 border-indigo-200 hover:border-indigo-400 transition-colors cursor-pointer shadow-lg hover:shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3 text-indigo-700\">\n                  <Receipt className=\"h-6 w-6\" />\n                  <span>GST Invoice</span>\n                </CardTitle>\n                <CardDescription>\n                  Generate compliant GST invoices for supplier payouts\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </Link>\n        </div>\n\n        {/* Payout Tool Section */}\n        <Card className=\"border-2 border-gradient-to-r from-blue-200 to-green-200 shadow-xl\">\n          <CardHeader className=\"bg-gradient-to-r from-blue-600 to-green-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <Calculator className=\"h-6 w-6\" />\n              <span>Supplier Payout Calculator</span>\n            </CardTitle>\n            <CardDescription className=\"text-blue-100\">\n              Calculate and export supplier payouts with GST calculations\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            {/* Date Range Controls - Top Priority */}\n            <div className=\"mb-8 p-6 bg-gradient-to-r from-blue-50 to-green-50 rounded-lg border-2 border-blue-200\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800 flex items-center\">\n                  üìÖ Select Date Range\n                </h3>\n                {(dateFrom || dateTo) && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setDateFrom('');\n                      setDateTo('');\n                      setDatePreset('');\n                    }}\n                    className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                    data-testid=\"button-clear-dates\"\n                  >\n                    üóëÔ∏è Clear Dates\n                  </Button>\n                )}\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"datePreset\" className=\"text-sm font-medium text-gray-700\">\n                    Quick Select\n                  </Label>\n                  <Select value={datePreset} onValueChange={setDatePreset}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose preset...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"THIS_MONTH\">This Month</SelectItem>\n                      <SelectItem value=\"LAST_30_DAYS\">Last 30 Days</SelectItem>\n                      <SelectItem value=\"LAST_7_DAYS\">Last 7 Days</SelectItem>\n                      <SelectItem value=\"YESTERDAY\">Yesterday</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"dateFrom\" className=\"text-sm font-medium text-gray-700\">\n                    From Date\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    value={dateFrom}\n                    onChange={(e) => {\n                      setDateFrom(e.target.value);\n                      setDatePreset(''); // Clear preset when manual date is selected\n                    }}\n                    className=\"w-full\"\n                    data-testid=\"input-date-from\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"dateTo\" className=\"text-sm font-medium text-gray-700\">\n                    To Date\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    value={dateTo}\n                    onChange={(e) => {\n                      setDateTo(e.target.value);\n                      setDatePreset(''); // Clear preset when manual date is selected\n                    }}\n                    className=\"w-full\"\n                    data-testid=\"input-date-to\"\n                  />\n                </div>\n              </div>\n\n              {dateFrom && dateTo && (\n                <div className=\"mt-4 p-3 bg-blue-100 rounded-lg\">\n                  <div className=\"text-sm text-blue-800\">\n                    <strong>Selected Range:</strong> {new Date(dateFrom).toLocaleDateString()} to {new Date(dateTo).toLocaleDateString()}\n                    <span className=\"ml-2 text-xs\">\n                      ({Math.ceil((new Date(dateTo).getTime() - new Date(dateFrom).getTime()) / (1000 * 60 * 60 * 24))} days)\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Other Filter Controls */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <div className=\"md:col-span-2\">\n                <Label className=\"text-sm font-medium text-gray-700\">\n                  Select Suppliers ({selectedSuppliers.length} selected)\n                </Label>\n                <div className=\"border rounded-lg bg-white\">\n                  {/* Date Range Info */}\n                  {dateFrom && dateTo && (\n                    <div className=\"p-3 bg-blue-50 border-b\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <div className=\"text-sm font-medium text-blue-800\">\n                            üìÖ Showing suppliers for: {new Date(dateFrom).toLocaleDateString()} - {new Date(dateTo).toLocaleDateString()}\n                          </div>\n                          <div className=\"text-xs text-blue-600\">\n                            {eligibleSuppliers.length} supplier{eligibleSuppliers.length !== 1 ? 's' : ''} with deliveries ‚Ä¢ Total payable: ‚Çπ{eligibleSuppliers.reduce((sum, s) => sum + s.totalPostGstAmount, 0).toFixed(2)}\n                          </div>\n                        </div>\n                        {eligibleSuppliers.length > 0 && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // Select all eligible suppliers\n                              const allNames = eligibleSuppliers.map(s => s.supplierName);\n                              setSelectedSuppliers(allNames);\n                            }}\n                            className=\"text-xs\"\n                            data-testid=\"button-select-all-eligible\"\n                          >\n                            Select All ({eligibleSuppliers.length})\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Search Input */}\n                  <div className=\"p-3 border-b\">\n                    <div className=\"relative\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search suppliers...\"\n                        value={supplierSearchTerm}\n                        onChange={(e) => setSupplierSearchTerm(e.target.value)}\n                        className=\"pl-8\"\n                        data-testid=\"input-supplier-search\"\n                      />\n                      <div className=\"absolute left-2.5 top-2.5 h-4 w-4 text-gray-400\">\n                        üîç\n                      </div>\n                      {supplierSearchTerm && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setSupplierSearchTerm('')}\n                          className=\"absolute right-1 top-1 h-6 w-6 p-0 text-gray-400 hover:text-gray-600\"\n                          data-testid=\"button-clear-search\"\n                        >\n                          ‚úï\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Supplier List */}\n                  <div className=\"p-3\">\n                    {dateFrom && dateTo ? (\n                      eligibleSuppliers.length > 0 ? (\n                        (() => {\n                          const filteredSuppliers = eligibleSuppliers.filter((supplier: any) => \n                            supplier.supplierName.toLowerCase().includes(supplierSearchTerm.toLowerCase()) ||\n                            (supplier.orderAccount && supplier.orderAccount.toLowerCase().includes(supplierSearchTerm.toLowerCase()))\n                          );\n                          \n                          return filteredSuppliers.length > 0 ? (\n                            <div className=\"space-y-2\">\n                              {filteredSuppliers.map((supplier: any) => (\n                                <div key={supplier.supplierId} className=\"flex items-start space-x-2 p-3 hover:bg-gray-50 rounded border\">\n                                  <input\n                                    type=\"checkbox\"\n                                    id={`supplier-${supplier.supplierId}`}\n                                    checked={selectedSuppliers.includes(supplier.supplierName)}\n                                    onChange={(e) => {\n                                      if (e.target.checked) {\n                                        setSelectedSuppliers(prev => [...prev, supplier.supplierName]);\n                                      } else {\n                                        setSelectedSuppliers(prev => prev.filter(name => name !== supplier.supplierName));\n                                      }\n                                    }}\n                                    className=\"mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                                    data-testid={`checkbox-supplier-${supplier.supplierId}`}\n                                  />\n                                  <label htmlFor={`supplier-${supplier.supplierId}`} className=\"flex-1 cursor-pointer\">\n                                    <div className=\"font-medium text-gray-900\">{supplier.supplierName}</div>\n                                    {supplier.orderAccount && supplier.orderAccount !== 'N/A' && (\n                                      <div className=\"text-xs text-green-600 font-medium\">\n                                        üìä {supplier.orderAccount}\n                                      </div>\n                                    )}\n                                    <div className=\"text-xs text-gray-600 mt-1\">\n                                      <span className=\"font-medium\">{supplier.orderCount} orders</span> ‚Ä¢ \n                                      <span className=\"font-medium\"> Qty: {supplier.totalQty}</span> ‚Ä¢ \n                                      <span className=\"font-medium\"> Products: {supplier.uniqueProducts}</span>\n                                    </div>\n                                    <div className=\"text-sm font-semibold text-green-700 mt-1\">\n                                      üí∞ Payable: ‚Çπ{supplier.totalPostGstAmount.toFixed(2)}\n                                      <span className=\"text-xs text-gray-500 ml-2\">\n                                        (‚Çπ{supplier.totalPreGstAmount.toFixed(2)} + ‚Çπ{supplier.totalGstAmount.toFixed(2)} GST)\n                                      </span>\n                                    </div>\n                                  </label>\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            <div className=\"text-gray-500 text-sm text-center py-4\">\n                              No suppliers found matching \"{supplierSearchTerm}\"\n                            </div>\n                          );\n                        })()\n                      ) : (\n                        <div className=\"text-center py-6\">\n                          <div className=\"text-gray-400 text-4xl mb-2\">üì≠</div>\n                          <div className=\"text-gray-600 font-medium\">No suppliers with deliveries</div>\n                          <div className=\"text-gray-500 text-sm\">No orders found in the selected date range</div>\n                        </div>\n                      )\n                    ) : (\n                      <div className=\"text-center py-6\">\n                        <div className=\"text-gray-400 text-4xl mb-2\">üìÖ</div>\n                        <div className=\"text-gray-600 font-medium\">Select Date Range First</div>\n                        <div className=\"text-gray-500 text-sm\">Choose from and to dates to see eligible suppliers</div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Selection Summary */}\n                  {selectedSuppliers.length > 0 && (\n                    <div className=\"p-3 border-t bg-gray-50\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">\n                          {selectedSuppliers.length} supplier{selectedSuppliers.length !== 1 ? 's' : ''} selected\n                        </span>\n                        <div className=\"flex space-x-2\">\n                          {supplierSearchTerm && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setSupplierSearchTerm('')}\n                              className=\"text-xs\"\n                              data-testid=\"button-clear-search-summary\"\n                            >\n                              Clear Search\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setSelectedSuppliers([])}\n                            className=\"text-xs\"\n                            data-testid=\"button-clear-suppliers\"\n                          >\n                            Clear All\n                          </Button>\n                        </div>\n                      </div>\n                      {/* Show selected suppliers when searched */}\n                      {supplierSearchTerm && selectedSuppliers.length > 0 && (\n                        <div className=\"mt-2 text-xs text-blue-600\">\n                          Selected: {selectedSuppliers.slice(0, 3).join(', ')}\n                          {selectedSuppliers.length > 3 && ` +${selectedSuppliers.length - 3} more`}\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <div>\n                <Label htmlFor=\"pricingBasis\" className=\"text-sm font-medium text-gray-700\">\n                  Pricing Basis\n                </Label>\n                <Select value={pricingBasis} onValueChange={(value: 'deliveredDate' | 'orderDate') => setPricingBasis(value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"deliveredDate\">Delivered Date</SelectItem>\n                    <SelectItem value=\"orderDate\">Order Date</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"currency\" className=\"text-sm font-medium text-gray-700\">\n                  Currency\n                </Label>\n                <Select value={currency} onValueChange={setCurrency}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"INR\">INR (‚Çπ)</SelectItem>\n                    <SelectItem value=\"USD\">USD ($)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"minAmount\" className=\"text-sm font-medium text-gray-700\">\n                  Min Amount Filter\n                </Label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"Optional\"\n                  value={minAmount}\n                  onChange={(e) => setMinAmount(e.target.value)}\n                />\n              </div>\n            </div>\n\n            {/* Apply Filters Button */}\n            <div className=\"mb-8 flex justify-center\">\n              <Button \n                onClick={applyFilters}\n                disabled={!dateFrom || !dateTo || isApplyingFilters}\n                size=\"lg\"\n                className={`px-8 py-3 font-semibold transition-all ${\n                  hasUnappliedChanges \n                    ? 'bg-blue-600 hover:bg-blue-700 text-white animate-pulse' \n                    : 'bg-gray-400 text-gray-600'\n                } ${isApplyingFilters ? 'bg-blue-500' : ''}`}\n                data-testid=\"button-apply-filters\"\n              >\n                {isApplyingFilters ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Applying Filters...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <Calculator className=\"h-4 w-4\" />\n                    <span>{hasUnappliedChanges ? 'Apply Filters & Calculate' : 'Filters Applied'}</span>\n                  </div>\n                )}\n              </Button>\n            </div>\n\n            {/* Filter Status Indicator */}\n            {appliedFilters.selectedSuppliers.length > 0 && (\n              <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center space-x-2 text-green-800\">\n                  <div className=\"h-2 w-2 bg-green-600 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm font-medium\">\n                    Active Filters: {appliedFilters.selectedSuppliers.length === 1 ? appliedFilters.selectedSuppliers[0] : `${appliedFilters.selectedSuppliers.length} Suppliers`} | {appliedFilters.dateFrom} to {appliedFilters.dateTo} | {appliedFilters.pricingBasis === 'deliveredDate' ? 'Delivered' : 'Order'} Date\n                  </span>\n                </div>\n                {hasUnappliedChanges && (\n                  <p className=\"text-sm text-orange-600 mt-2\">\n                    ‚ö†Ô∏è You have unsaved filter changes. Click \"Apply Filters\" to update results.\n                  </p>\n                )}\n              </div>\n            )}\n\n            {/* Supplier Info Panel */}\n            {selectedSuppliers.length === 1 && (\n              <Card className=\"mb-8 border-2 border-blue-200\">\n                <CardHeader className=\"bg-blue-600 text-white\">\n                  <CardTitle className=\"text-lg flex items-center space-x-2\">\n                    <Users className=\"h-5 w-5\" />\n                    <span>Supplier Information: {selectedSuppliers[0]}</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {/* Date Range Info */}\n                    {supplierDateRanges.has(selectedSuppliers[0]) && (\n                      <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n                        <h4 className=\"font-semibold text-green-800 mb-2 flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Delivery Period\n                        </h4>\n                        <div className=\"space-y-1 text-sm\">\n                          <p><span className=\"font-medium\">First Delivery:</span> {new Date(supplierDateRanges.get(selectedSuppliers[0])!.firstDelivery).toLocaleDateString()}</p>\n                          <p><span className=\"font-medium\">Last Delivery:</span> {new Date(supplierDateRanges.get(selectedSuppliers[0])!.lastDelivery).toLocaleDateString()}</p>\n                          <p><span className=\"font-medium\">Total Orders:</span> {supplierDateRanges.get(selectedSuppliers[0])!.totalOrders}</p>\n                        </div>\n                        <div className=\"mt-3 flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              const range = supplierDateRanges.get(selectedSuppliers[0])!;\n                              setDateFrom(range.firstDelivery.split('T')[0]);\n                              setDateTo(range.lastDelivery.split('T')[0]);\n                            }}\n                            className=\"text-green-700 border-green-300 hover:bg-green-100\"\n                          >\n                            Use Full Range\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              const range = supplierDateRanges.get(selectedSuppliers[0])!;\n                              const lastMonthStart = new Date();\n                              lastMonthStart.setMonth(lastMonthStart.getMonth() - 1);\n                              setDateFrom(lastMonthStart.toISOString().split('T')[0]);\n                              setDateTo(range.lastDelivery.split('T')[0]);\n                            }}\n                            className=\"text-blue-700 border-blue-300 hover:bg-blue-100\"\n                          >\n                            Last Month\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Missing Products Info */}\n                    {selectedSuppliers.length === 1 && supplierMissingProducts.has(selectedSuppliers[0]) && (\n                      <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n                        <h4 className=\"font-semibold text-red-800 mb-2 flex items-center\">\n                          <Package className=\"h-4 w-4 mr-2\" />\n                          Missing Price Entries ({supplierMissingProducts.get(selectedSuppliers[0])!.length})\n                        </h4>\n                        <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                          {supplierMissingProducts.get(selectedSuppliers[0])!.slice(0, 5).map((product: any, index: number) => (\n                            <div key={index} className=\"text-sm bg-white p-2 rounded border\">\n                              <p className=\"font-medium text-red-900\">{product.productName}</p>\n                              <p className=\"text-red-600\">HSN: {product.hsn || 'N/A'} | Qty: {product.totalQty}</p>\n                            </div>\n                          ))}\n                          {supplierMissingProducts.get(selectedSuppliers[0])!.length > 5 && (\n                            <p className=\"text-xs text-red-600 text-center pt-2\">\n                              +{supplierMissingProducts.get(selectedSuppliers[0])!.length - 5} more products\n                            </p>\n                          )}\n                        </div>\n                        <Link href=\"/price-management\">\n                          <Button size=\"sm\" className=\"mt-3 bg-red-600 hover:bg-red-700 text-white\">\n                            Add Missing Prices\n                          </Button>\n                        </Link>\n                      </div>\n                    )}\n\n                    {/* Quick Actions */}\n                    <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200\">\n                      <h4 className=\"font-semibold text-gray-800 mb-2 flex items-center\">\n                        <TrendingUp className=\"h-4 w-4 mr-2\" />\n                        Quick Actions\n                      </h4>\n                      <div className=\"space-y-2\">\n                        <Link href={`/supplier-performance?supplier=${encodeURIComponent(selectedSuppliers[0] || '')}`}>\n                          <Button size=\"sm\" variant=\"outline\" className=\"w-full justify-start\">\n                            <Users className=\"h-4 w-4 mr-2\" />\n                            View Performance\n                          </Button>\n                        </Link>\n                        <Link href={`/reports?supplier=${encodeURIComponent(selectedSuppliers[0] || '')}`}>\n                          <Button size=\"sm\" variant=\"outline\" className=\"w-full justify-start\">\n                            <FileText className=\"h-4 w-4 mr-2\" />\n                            Generate Reports\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Loading State */}\n            {isApplyingFilters ? (\n              <div className=\"text-center py-12\">\n                <div className=\"flex flex-col items-center space-y-4\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-lg font-medium text-gray-700\">Processing Your Request...</p>\n                    <p className=\"text-sm text-gray-500\">Calculating payouts for {selectedSuppliers.length === 1 ? selectedSuppliers[0] : `${selectedSuppliers.length} suppliers`}</p>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <>\n                {/* Order Account Summary */}\n                {orderAccountSummary.length > 0 && (\n                  <Card className=\"border-purple-200 bg-gradient-to-br from-purple-50 to-pink-50 mb-6\">\n                    <CardHeader className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-t-lg\">\n                      <CardTitle className=\"flex items-center space-x-3\">\n                        üìß Order Account Payout Summary\n                      </CardTitle>\n                      <CardDescription className=\"text-purple-100\">\n                        Payout breakdown by email ID/order account\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"p-6\">\n                      <div className=\"grid gap-4\">\n                        {orderAccountSummary.map((account: any, index: number) => (\n                          <div key={account.orderAccount} className=\"border rounded-lg p-4 bg-white shadow-sm\">\n                            <div className=\"flex justify-between items-start mb-3\">\n                              <div>\n                                <h4 className=\"font-semibold text-lg text-gray-800\">\n                                  üìß {account.orderAccount}\n                                </h4>\n                                <div className=\"text-sm text-gray-600 mt-1\">\n                                  {account.supplierCount} supplier{account.supplierCount !== 1 ? 's' : ''} ‚Ä¢ {account.orderCount} orders ‚Ä¢ {account.uniqueProducts} products\n                                </div>\n                                <div className=\"text-xs text-blue-600 mt-1\">\n                                  Suppliers: {account.suppliers.join(', ')}\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-2xl font-bold text-green-600\">\n                                  ‚Çπ{account.totalPostGstAmount.toFixed(2)}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  (‚Çπ{account.totalPreGstAmount.toFixed(2)} + ‚Çπ{account.totalGstAmount.toFixed(2)} GST)\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center text-sm\">\n                              <div className=\"bg-blue-50 p-2 rounded\">\n                                <div className=\"font-semibold text-blue-600\">{account.orderCount}</div>\n                                <div className=\"text-gray-600\">Orders</div>\n                              </div>\n                              <div className=\"bg-green-50 p-2 rounded\">\n                                <div className=\"font-semibold text-green-600\">{account.totalQty}</div>\n                                <div className=\"text-gray-600\">Quantity</div>\n                              </div>\n                              <div className=\"bg-purple-50 p-2 rounded\">\n                                <div className=\"font-semibold text-purple-600\">{account.uniqueProducts}</div>\n                                <div className=\"text-gray-600\">Products</div>\n                              </div>\n                              <div className=\"bg-orange-50 p-2 rounded\">\n                                <div className=\"font-semibold text-orange-600\">‚Çπ{account.avgOrderValue.toFixed(2)}</div>\n                                <div className=\"text-gray-600\">Avg Order</div>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      {/* Total Summary */}\n                      <div className=\"mt-6 p-4 bg-gradient-to-r from-purple-100 to-pink-100 rounded-lg border-2 border-purple-200\">\n                        <div className=\"text-center\">\n                          <h5 className=\"font-semibold text-gray-800 mb-2\">üìä Total Across All Accounts</h5>\n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                            <div>\n                              <div className=\"text-2xl font-bold text-purple-600\">\n                                {orderAccountSummary.length}\n                              </div>\n                              <div className=\"text-gray-600\">Accounts</div>\n                            </div>\n                            <div>\n                              <div className=\"text-2xl font-bold text-blue-600\">\n                                {orderAccountSummary.reduce((sum, acc) => sum + acc.orderCount, 0)}\n                              </div>\n                              <div className=\"text-gray-600\">Orders</div>\n                            </div>\n                            <div>\n                              <div className=\"text-2xl font-bold text-green-600\">\n                                ‚Çπ{orderAccountSummary.reduce((sum, acc) => sum + acc.totalPreGstAmount, 0).toFixed(2)}\n                              </div>\n                              <div className=\"text-gray-600\">Pre-GST</div>\n                            </div>\n                            <div>\n                              <div className=\"text-2xl font-bold text-red-600\">\n                                ‚Çπ{orderAccountSummary.reduce((sum, acc) => sum + acc.totalPostGstAmount, 0).toFixed(2)}\n                              </div>\n                              <div className=\"text-gray-600\">Total Payout</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Enhanced Payout Summary with Pre-GST Information */}\n                {payoutData.summary && (\n              <Card className=\"mb-8 border-2 border-green-200\">\n                <CardHeader className=\"bg-green-600 text-white\">\n                  <CardTitle className=\"text-lg flex items-center space-x-2\">\n                    <Calculator className=\"h-5 w-5\" />\n                    <span>Comprehensive Payout Summary</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-6\">\n                  {/* Primary Summary Row */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-6\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-600\">Supplier</p>\n                      <p className=\"text-xl font-bold text-green-700\">{payoutData.summary.supplier}</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-600\">Date Range</p>\n                      <p className=\"text-lg font-semibold text-gray-800\">{payoutData.summary.dateRange}</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-600\">Deliveries</p>\n                      <p className=\"text-2xl font-bold text-blue-700\">{payoutData.summary.deliveriesCount}</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-600\">Total Qty</p>\n                      <p className=\"text-2xl font-bold text-purple-700\">{payoutData.summary.totalDeliveredQty}</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-600\">Unique Products</p>\n                      <p className=\"text-2xl font-bold text-indigo-700\">{payoutData.summary.uniqueProducts}</p>\n                    </div>\n                  </div>\n\n                  {/* Financial Breakdown Section */}\n                  <div className=\"border-t pt-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\n                      <TrendingUp className=\"h-5 w-5 mr-2\" />\n                      Financial Breakdown with GST Details\n                    </h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                      <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                        <p className=\"text-sm text-blue-600 font-medium\">Amount Before GST</p>\n                        <p className=\"text-2xl font-bold text-blue-700\">‚Çπ{(parseFloat(String(payoutData.summary.totalPreGstAmount)) || 0).toFixed(2)}</p>\n                        <p className=\"text-xs text-blue-500 mt-1\">Pre-GST Product Cost</p>\n                      </div>\n                      <div className=\"bg-orange-50 p-4 rounded-lg border border-orange-200\">\n                        <p className=\"text-sm text-orange-600 font-medium\">GST Amount ({payoutData.summary.averageGstRate?.toFixed(1)}%)</p>\n                        <p className=\"text-2xl font-bold text-orange-700\">‚Çπ{(parseFloat(String(payoutData.summary.totalGstAmount)) || 0).toFixed(2)}</p>\n                        <p className=\"text-xs text-orange-500 mt-1\">Total GST Liability</p>\n                      </div>\n                      <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n                        <p className=\"text-sm text-green-600 font-medium\">Total Payout Amount</p>\n                        <p className=\"text-2xl font-bold text-green-700\">‚Çπ{(parseFloat(String(payoutData.summary.totalPostGstAmount)) || 0).toFixed(2)}</p>\n                        <p className=\"text-xs text-green-500 mt-1\">Final Amount with GST</p>\n                      </div>\n                      <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n                        <p className=\"text-sm text-purple-600 font-medium\">Average Order Value</p>\n                        <p className=\"text-2xl font-bold text-purple-700\">‚Çπ{(parseFloat(String(payoutData.summary.avgOrderValue)) || 0).toFixed(2)}</p>\n                        <p className=\"text-xs text-purple-500 mt-1\">Per Delivery</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Additional Insights */}\n                  {payoutData.summary.newDeliveries && payoutData.summary.newDeliveries > 0 && (\n                    <div className=\"border-t pt-4 mt-4\">\n                      <div className=\"bg-yellow-50 p-4 rounded-lg border border-yellow-200\">\n                        <p className=\"text-sm text-yellow-600 font-medium\">Recent Activity (Last 7 Days)</p>\n                        <p className=\"text-xl font-bold text-yellow-700\">{payoutData.summary.newDeliveries} new deliveries</p>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Export Buttons */}\n            {payoutData.payoutOrders.length > 0 && (\n              <div className=\"flex flex-wrap gap-3 mb-8\">\n                <Button onClick={() => exportPayoutData('export')} className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Payout Data\n                </Button>\n                <Button onClick={() => exportPayoutData('summary')} variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Summary CSV\n                </Button>\n                <Button onClick={() => exportPayoutData('lines')} variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Line Items CSV\n                </Button>\n                {payoutData.cancelledOrders.length > 0 && (\n                  <Button onClick={() => exportPayoutData('cancelled')} variant=\"outline\" className=\"text-red-600\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Cancelled Orders\n                  </Button>\n                )}\n                {payoutData.missingPrices.length > 0 && (\n                  <>\n                    <Button onClick={() => exportPayoutData('missing')} variant=\"outline\" className=\"text-orange-600\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Missing Prices\n                    </Button>\n                    \n                    {/* Upload Price List Control */}\n                    <div className=\"relative\">\n                      <input\n                        type=\"file\"\n                        accept=\".xlsx,.xls,.csv\"\n                        onChange={handlePriceListUpload}\n                        className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                        data-testid=\"input-price-upload\"\n                        disabled={isPriceListUploading}\n                      />\n                      <Button \n                        variant=\"outline\" \n                        className=\"text-green-600 border-green-400 hover:bg-green-50\"\n                        disabled={isPriceListUploading}\n                        data-testid=\"button-upload-prices\"\n                      >\n                        {isPriceListUploading ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-green-600\"></div>\n                            <span>Uploading...</span>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <Upload className=\"h-4 w-4\" />\n                            <span>Upload Price List</span>\n                          </div>\n                        )}\n                      </Button>\n                    </div>\n                  </>\n                )}\n              </div>\n            )}\n\n            {/* Payout Orders Table */}\n            {payoutData.payoutOrders.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Payout Orders ({payoutData.payoutOrders.length})</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-100 border-b-2 border-gray-300\">\n                        <tr>\n                          <th className=\"text-left p-4 font-bold text-gray-700\">AWB No</th>\n                          <th className=\"text-left p-4 font-bold text-gray-700\">Order Account</th>\n                          <th className=\"text-left p-4 font-bold text-gray-700\">Courier</th>\n                          <th className=\"text-left p-4 font-bold text-gray-700\">Product</th>\n                          <th className=\"text-center p-4 font-bold text-gray-700\">Qty</th>\n                          <th className=\"text-right p-4 font-bold text-gray-700\">Unit Price</th>\n                          <th className=\"text-right p-4 font-bold text-gray-700\">Line Amount</th>\n                          <th className=\"text-right p-4 font-bold text-gray-700\">GST (%)</th>\n                          <th className=\"text-right p-4 font-bold text-green-700\">Price After GST</th>\n                          <th className=\"text-center p-4 font-bold text-gray-700\">Status</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {payoutData.payoutOrders.slice(0, 20).map((order, index) => (\n                          <tr key={order.id} className={`border-b hover:bg-blue-25 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}>\n                            <td className=\"p-4 font-mono text-sm\">{order.awbNo}</td>\n                            <td className=\"p-4 text-sm text-blue-600\">{order.orderAccount || 'N/A'}</td>\n                            <td className=\"p-4 text-sm font-medium text-blue-600\">{order.courier || 'N/A'}</td>\n                            <td className=\"p-4\">\n                              <div>\n                                <p className=\"font-semibold text-gray-800\">{order.productName}</p>\n                                <p className=\"text-xs text-gray-500\">{order.hsn}</p>\n                              </div>\n                            </td>\n                            <td className=\"p-4 text-center font-semibold\">{order.deliveredQty}</td>\n                            <td className=\"p-4 text-right font-semibold\">‚Çπ{(parseFloat(String(order.unitPrice)) || 0).toFixed(2)}</td>\n                            <td className=\"p-4 text-right font-semibold\">‚Çπ{(parseFloat(String(order.lineAmount)) || 0).toFixed(2)}</td>\n                            <td className=\"p-4 text-right text-orange-600 font-semibold\">\n                              <div>\n                                <div className=\"font-semibold\">‚Çπ{(parseFloat(String(order.gstAmount)) || 0).toFixed(2)}</div>\n                                <div className=\"text-xs text-gray-500\">({order.gstPercent || 18}%)</div>\n                              </div>\n                            </td>\n                            <td className=\"p-4 text-right text-green-700 font-bold\">‚Çπ{(parseFloat(String(order.totalWithGst)) || 0).toFixed(2)}</td>\n                            <td className=\"p-4 text-center\">\n                              <span className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium\">\n                                {order.status}\n                              </span>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                  {payoutData.payoutOrders.length > 20 && (\n                    <div className=\"p-4 bg-gray-50 text-center text-gray-600\">\n                      Showing first 20 of {payoutData.payoutOrders.length} orders. Export for complete data.\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n                )}\n              </>\n            )}\n\n            {/* No data message */}\n            {selectedSuppliers.length === 0 || !dateFrom || !dateTo ? (\n              <div className=\"text-center py-12\">\n                <Calculator className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-700 mb-2\">Ready to Calculate Payouts</h3>\n                <p className=\"text-gray-500\">Select a supplier and date range to begin payout calculation</p>\n              </div>\n            ) : payoutData.payoutOrders.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-700 mb-2\">No Payout Data Found</h3>\n                <p className=\"text-gray-500\">No delivered orders found for selected criteria</p>\n              </div>\n            ) : null}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":85336},"client/src/pages/data-management.tsx":{"content":"import React, { useState } from 'react';\nimport { DataTransparency } from \"@/components/data-transparency\";\nimport { FileUpload } from \"@/components/file-upload\";\nimport { ColumnMapping } from \"@/components/column-mapping\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Database, Upload, Settings, ArrowLeft, Trash2, AlertTriangle } from \"lucide-react\";\nimport { Link } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function DataManagement() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [fileData, setFileData] = useState<any>(null);\n  const [columnMapping, setColumnMapping] = useState<any>(null);\n  \n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Clear all orders mutation\n  const clearOrdersMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/orders/clear-all', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response; // Fetch already parses JSON, no need for .json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/missing-price-entries'] });\n      toast({\n        title: \"Success\",\n        description: \"All order data has been cleared successfully. You can now upload new files.\",\n        variant: \"default\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to clear order data\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-lg border-b-4 border-gray-500\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2 hover:bg-gray-50\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Dashboard</span>\n                </Button>\n              </Link>\n              <div className=\"border-l-2 border-gray-300 pl-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-gray-100 p-2 rounded-lg\">\n                    <Database className=\"h-8 w-8 text-gray-600\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Data Management</h1>\n                    <p className=\"text-gray-600 font-medium\">Upload, Process & Manage Your Data</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Data Management Actions */}\n        <Card className=\"border-2 border-red-200 shadow-xl\">\n          <CardHeader className=\"bg-red-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <Trash2 className=\"h-6 w-6\" />\n              <span>Database Management</span>\n            </CardTitle>\n            <CardDescription className=\"text-red-100\">\n              Clear all order data to upload new updated files\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n              <div className=\"flex items-start space-x-3\">\n                <AlertTriangle className=\"h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5\" />\n                <div>\n                  <h4 className=\"font-semibold text-yellow-800\">Before Clearing Data</h4>\n                  <p className=\"text-sm text-yellow-700 mt-1\">\n                    This action will permanently delete all order records from the database. \n                    Use this when you want to upload a completely new/updated dataset.\n                    Price entries and supplier information will be preserved.\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button \n                  variant=\"destructive\" \n                  className=\"bg-red-600 hover:bg-red-700\"\n                  disabled={clearOrdersMutation.isPending}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  {clearOrdersMutation.isPending ? 'Clearing...' : 'Clear All Order Data'}\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle className=\"flex items-center space-x-2\">\n                    <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                    <span>Confirm Data Deletion</span>\n                  </AlertDialogTitle>\n                  <AlertDialogDescription asChild>\n                    <div>\n                      <p>Are you sure you want to delete all order data? This action cannot be undone.</p>\n                      \n                      <div className=\"mt-3 p-3 bg-gray-50 rounded border\">\n                        <p className=\"text-sm font-medium\">What will be deleted:</p>\n                        <ul className=\"text-sm text-gray-600 mt-1 list-disc list-inside\">\n                          <li>All order records</li>\n                          <li>Upload history</li>\n                          <li>Processing cache</li>\n                        </ul>\n                      </div>\n                      \n                      <div className=\"mt-3 p-3 bg-green-50 rounded border\">\n                        <p className=\"text-sm font-medium text-green-800\">What will be preserved:</p>\n                        <ul className=\"text-sm text-green-600 mt-1 list-disc list-inside\">\n                          <li>Price entries</li>\n                          <li>Supplier information</li>\n                          <li>System settings</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction \n                    onClick={() => clearOrdersMutation.mutate()}\n                    className=\"bg-red-600 hover:bg-red-700\"\n                  >\n                    Yes, Clear All Data\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </CardContent>\n        </Card>\n\n        {/* Data Transparency Section */}\n        <DataTransparency />\n        \n        {/* Data Upload Section */}\n        <Card className=\"border-2 border-blue-200 shadow-xl\">\n          <CardHeader className=\"bg-blue-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <Upload className=\"h-6 w-6\" />\n              <span>Data Upload</span>\n            </CardTitle>\n            <CardDescription className=\"text-blue-100\">\n              Upload CSV/Excel files for processing\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <FileUpload\n              onFileUploaded={(data) => {\n                setFileData(data);\n                setCurrentStep(2);\n              }}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Column Mapping Section */}\n        {fileData && (\n          <Card className=\"border-2 border-green-200 shadow-xl\">\n            <CardHeader className=\"bg-green-600 text-white rounded-t-lg\">\n              <CardTitle className=\"flex items-center space-x-3 text-xl\">\n                <Settings className=\"h-6 w-6\" />\n                <span>Column Mapping</span>\n              </CardTitle>\n              <CardDescription className=\"text-green-100\">\n                Map your data columns to system fields\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <ColumnMapping\n                fileData={fileData}\n                onMappingComplete={(mapping) => {\n                  setColumnMapping(mapping);\n                  setCurrentStep(3);\n                }}\n                currentStep={currentStep}\n              />\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9347},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/price-management.tsx":{"content":"import React from 'react';\nimport { PriceHSNManagement } from \"@/components/price-hsn-management\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calculator, ArrowLeft } from \"lucide-react\";\nimport { Link } from 'wouter';\n\nexport default function PriceManagement() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-lg border-b-4 border-green-500\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2 hover:bg-green-50\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Dashboard</span>\n                </Button>\n              </Link>\n              <div className=\"border-l-2 border-gray-300 pl-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-green-100 p-2 rounded-lg\">\n                    <Calculator className=\"h-8 w-8 text-green-600\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Price & HSN Management</h1>\n                    <p className=\"text-green-600 font-medium\">Manage Product Prices, HSN Codes & Bulk Operations</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Price Management Section */}\n        <Card className=\"border-2 border-green-200 shadow-xl\">\n          <CardHeader className=\"bg-green-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <Calculator className=\"h-6 w-6\" />\n              <span>Price & HSN Management</span>\n            </CardTitle>\n            <CardDescription className=\"text-green-100\">\n              Upload and manage product prices with HSN codes\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <PriceHSNManagement />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":2434},"client/src/pages/reports.tsx":{"content":"import React from 'react';\nimport { ReportsSection } from \"@/components/reports-section\";\nimport { PayoutSummary } from \"@/components/payout-summary\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, TrendingUp, ArrowLeft } from \"lucide-react\";\nimport { Link } from 'wouter';\n\nexport default function Reports() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-lg border-b-4 border-purple-500\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2 hover:bg-purple-50\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Dashboard</span>\n                </Button>\n              </Link>\n              <div className=\"border-l-2 border-gray-300 pl-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-purple-100 p-2 rounded-lg\">\n                    <FileText className=\"h-8 w-8 text-purple-600\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Reports & Analytics</h1>\n                    <p className=\"text-purple-600 font-medium\">Generate Reports & Export Data</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Reports Section */}\n        <Card className=\"border-2 border-purple-200 shadow-xl\">\n          <CardHeader className=\"bg-purple-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <FileText className=\"h-6 w-6\" />\n              <span>Reports & Exports</span>\n            </CardTitle>\n            <CardDescription className=\"text-purple-100\">\n              Generate and download various reports\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <ReportsSection />\n          </CardContent>\n        </Card>\n\n        {/* Final Payout Summary */}\n        <Card className=\"border-2 border-orange-200 shadow-xl\">\n          <CardHeader className=\"bg-orange-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <TrendingUp className=\"h-6 w-6\" />\n              <span>Final Payout Summary</span>\n            </CardTitle>\n            <CardDescription className=\"text-orange-100\">\n              Complete payout calculations and summaries\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <PayoutSummary />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3092},"client/src/pages/supplier-performance.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, TrendingUp, Package, Calendar, ArrowLeft, ArrowUpDown, ChevronUp, ChevronDown, Download } from \"lucide-react\";\nimport { Link } from 'wouter';\n\nexport default function SupplierPerformance() {\n  // Sorting state\n  const [sortBy, setSortBy] = useState<string>('missing_prices');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  // Get dashboard stats\n  const { data: dashboardStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    refetchInterval: 30000\n  });\n\n  // Get suppliers with missing price data\n  const { data: suppliers = [], isLoading: suppliersLoading } = useQuery({\n    queryKey: ['/api/suppliers/with-missing-prices', sortBy, sortOrder],\n    queryFn: async () => {\n      const response = await fetch(`/api/suppliers/with-missing-prices?sortBy=${sortBy}&sortOrder=${sortOrder}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch suppliers');\n      }\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    }\n  });\n\n  // Handle sorting\n  const handleSort = (column: string) => {\n    if (sortBy === column) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(column);\n      setSortOrder('desc');\n    }\n  };\n\n  // Handle direct export from table\n  const handleExportMissingPrices = async (supplierName: string) => {\n    try {\n      const response = await fetch(`/api/export/missing-price-entries?supplier=${encodeURIComponent(supplierName)}`);\n      if (!response.ok) {\n        throw new Error('Failed to export missing prices');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `${supplierName.replace(/[^a-zA-Z0-9]/g, '_')}_missing_prices.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Export error:', error);\n      alert('Failed to export missing prices. Please try again.');\n    }\n  };\n\n  // Get sort icon\n  const getSortIcon = (column: string) => {\n    if (sortBy !== column) return <ArrowUpDown className=\"h-4 w-4\" />;\n    return sortOrder === 'asc' ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-lg border-b-4 border-blue-500\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2 hover:bg-blue-50\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Dashboard</span>\n                </Button>\n              </Link>\n              <div className=\"border-l-2 border-gray-300 pl-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-blue-100 p-2 rounded-lg\">\n                    <Users className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Supplier Performance</h1>\n                    <p className=\"text-blue-600 font-medium\">Track & Analyze Supplier Metrics</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Performance Overview */}\n        {dashboardStats && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"border-2 border-blue-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-blue-600\">Total Orders</CardTitle>\n                <Package className=\"h-4 w-4 text-blue-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-900\">\n                  {dashboardStats.totalOrders?.toLocaleString()}\n                </div>\n                <p className=\"text-xs text-blue-600\">Across all suppliers</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-green-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-green-600\">Active Suppliers</CardTitle>\n                <Users className=\"h-4 w-4 text-green-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-900\">\n                  {dashboardStats.totalSuppliers}\n                </div>\n                <p className=\"text-xs text-green-600\">Registered vendors</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-purple-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-purple-600\">Products</CardTitle>\n                <Package className=\"h-4 w-4 text-purple-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-purple-900\">\n                  {dashboardStats.totalProducts}\n                </div>\n                <p className=\"text-xs text-purple-600\">Unique products</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-2 border-orange-200 shadow-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-orange-600\">Avg Order Value</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-orange-600\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-900\">\n                  ‚Çπ{dashboardStats.avgOrderValue?.toFixed(2)}\n                </div>\n                <p className=\"text-xs text-orange-600\">Per order average</p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Supplier List */}\n        <Card className=\"border-2 border-gray-200 shadow-xl\">\n          <CardHeader className=\"bg-gradient-to-r from-gray-700 to-gray-800 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <Users className=\"h-6 w-6\" />\n              <span>Supplier Directory</span>\n            </CardTitle>\n            <CardDescription className=\"text-gray-200\">\n              Complete list of registered suppliers\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-100 border-b-2 border-gray-300\">\n                  <tr>\n                    <th className=\"text-left p-4 font-bold text-gray-700\">\n                      <button \n                        onClick={() => handleSort('name')}\n                        className=\"flex items-center space-x-2 hover:text-blue-600 transition-colors\"\n                      >\n                        <span>Supplier Name</span>\n                        {getSortIcon('name')}\n                      </button>\n                    </th>\n                    <th className=\"text-center p-4 font-bold text-gray-700\">Registration Date</th>\n                    <th className=\"text-center p-4 font-bold text-gray-700\">\n                      <button \n                        onClick={() => handleSort('missing_prices')}\n                        className=\"flex items-center justify-center space-x-2 hover:text-red-600 transition-colors w-full\"\n                      >\n                        <span>Missing Products</span>\n                        {getSortIcon('missing_prices')}\n                      </button>\n                    </th>\n                    <th className=\"text-center p-4 font-bold text-gray-700\">\n                      <button \n                        onClick={() => handleSort('total_orders')}\n                        className=\"flex items-center justify-center space-x-2 hover:text-green-600 transition-colors w-full\"\n                      >\n                        <span>Total Orders</span>\n                        {getSortIcon('total_orders')}\n                      </button>\n                    </th>\n                    <th className=\"text-center p-4 font-bold text-gray-700\">Status</th>\n                    <th className=\"text-center p-4 font-bold text-gray-700\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {suppliersLoading ? (\n                    <tr>\n                      <td colSpan={6} className=\"p-8 text-center text-gray-500\">\n                        Loading suppliers...\n                      </td>\n                    </tr>\n                  ) : suppliers && suppliers.length > 0 ? (\n                    suppliers.map((supplier: any, index: number) => (\n                      <tr key={supplier.id} className={`border-b hover:bg-blue-25 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}>\n                        <td className=\"p-4 font-semibold text-gray-800\">{supplier.name}</td>\n                        <td className=\"p-4 text-center text-gray-600\">\n                          {supplier.created_at ? new Date(supplier.created_at).toLocaleDateString('en-IN') : 'N/A'}\n                        </td>\n                        <td className=\"p-4 text-center\">\n                          <div className=\"flex flex-col items-center space-y-1\">\n                            <span className={`font-bold text-lg ${supplier.missing_prices > 0 ? 'text-red-600' : 'text-green-600'}`}>\n                              {supplier.missing_prices?.toLocaleString() || '0'}\n                            </span>\n                            <span className=\"text-xs text-gray-500\">\n                              ({supplier.missing_price_percentage || '0'}% of {supplier.total_unique_products || 0} products)\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"p-4 text-center\">\n                          <span className=\"font-semibold text-blue-600\">\n                            {supplier.total_orders?.toLocaleString() || '0'}\n                          </span>\n                        </td>\n                        <td className=\"p-4 text-center\">\n                          <span className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium\">\n                            Active\n                          </span>\n                        </td>\n                        <td className=\"p-4 text-center\">\n                          <div className=\"flex gap-2 justify-center\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleExportMissingPrices(supplier.name)}\n                              className=\"text-green-600 border-green-600 hover:bg-green-50\"\n                              disabled={supplier.missing_prices === 0}\n                              data-testid={`button-export-${supplier.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                            >\n                              <Download className=\"h-4 w-4 mr-1\" />\n                              Export\n                            </Button>\n                            <Link href={`/supplier/${encodeURIComponent(supplier.name)}`}>\n                              <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                                View Details\n                              </Button>\n                            </Link>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={6} className=\"p-8 text-center text-gray-500\">\n                        No suppliers found\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12989},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"fix-order-account.js":{"content":"/**\n * Fix Order Account data for existing orders\n * This script adds the missing Order Account email data to existing orders\n */\n\nimport pkg from 'pg';\nimport dotenv from 'dotenv';\n\nconst { Client } = pkg;\ndotenv.config();\n\nconst client = new Client({\n  connectionString: process.env.DATABASE_URL\n});\n\nasync function fixOrderAccountData() {\n  try {\n    await client.connect();\n    console.log('üîó Connected to database');\n\n    // Get files with data\n    const filesResult = await client.query(`\n      SELECT id, original_name, data, column_mapping \n      FROM uploaded_files \n      WHERE data IS NOT NULL \n      ORDER BY uploaded_at DESC\n    `);\n\n    console.log(`üìÅ Found ${filesResult.rows.length} files with data`);\n\n    for (const file of filesResult.rows) {\n      console.log(`\\nüìã Processing file: ${file.original_name}`);\n      \n      const data = typeof file.data === 'string' ? JSON.parse(file.data) : file.data;\n      \n      if (!data || !data.data || !Array.isArray(data.data)) {\n        console.log('‚ùå No valid data array found');\n        continue;\n      }\n\n      // Look for Order Account column in the data\n      const sampleRow = data.data[0];\n      if (!sampleRow) {\n        console.log('‚ùå No sample row found');\n        continue;\n      }\n\n      // Find Order Account column - it's usually the first column 'Order Account'\n      const orderAccountColumn = Object.keys(sampleRow).find(key => \n        key.toLowerCase().includes('order') && key.toLowerCase().includes('account')\n      ) || 'Order Account';\n\n      console.log(`üîç Looking for Order Account in column: \"${orderAccountColumn}\"`);\n\n      if (!sampleRow[orderAccountColumn]) {\n        console.log('‚ùå Order Account column not found in data');\n        continue;\n      }\n\n      // Update orders for this file\n      let updatedCount = 0;\n      \n      for (const row of data.data) {\n        const orderAccount = row[orderAccountColumn];\n        const awbNo = row['WayBill Number'] || row['AWB No'] || row['awb_no'];\n        \n        if (orderAccount && awbNo) {\n          try {\n            const updateResult = await client.query(`\n              UPDATE orders \n              SET order_account = $1 \n              WHERE awb_no = $2 AND file_id = $3\n            `, [orderAccount, awbNo, file.id]);\n            \n            if (updateResult.rowCount > 0) {\n              updatedCount++;\n            }\n          } catch (error) {\n            console.log(`‚ùå Failed to update AWB ${awbNo}:`, error.message);\n          }\n        }\n      }\n\n      console.log(`‚úÖ Updated ${updatedCount} orders with Order Account data`);\n    }\n\n    // Final verification\n    const verificationResult = await client.query(`\n      SELECT COUNT(*) as total_orders, COUNT(order_account) as orders_with_account \n      FROM orders\n    `);\n    \n    console.log('\\nüìä Final Results:');\n    console.log(`Total Orders: ${verificationResult.rows[0].total_orders}`);\n    console.log(`Orders with Account: ${verificationResult.rows[0].orders_with_account}`);\n\n  } catch (error) {\n    console.error('‚ùå Error:', error);\n  } finally {\n    await client.end();\n    console.log('üîê Database connection closed');\n  }\n}\n\nfixOrderAccountData();","size_bytes":3192},"client/src/pages/supplier-information.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRoute } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, Download, Upload, FileText, TrendingUp, Package, ArrowLeft, AlertCircle } from 'lucide-react';\nimport { Link } from 'wouter';\nimport * as XLSX from 'xlsx';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface MissingPriceEntry {\n  supplierName: string;\n  productName: string;\n  hsn: string;\n  orderCount: number;\n}\n\nexport default function SupplierInformation() {\n  const [match, params] = useRoute('/supplier/:supplierName');\n  const supplierName = params?.supplierName ? decodeURIComponent(params.supplierName) : '';\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Get supplier information\n  const { data: suppliers = [] } = useQuery({\n    queryKey: ['/api/suppliers'],\n  });\n\n  const supplier = suppliers.find((s: any) => s.name === supplierName);\n\n  // Get missing price entries for this supplier\n  const { data: allMissingPriceEntries = [] } = useQuery({\n    queryKey: ['/api/missing-price-entries'],\n  });\n\n  // Filter missing price entries for current supplier\n  const supplierMissingEntries = useMemo(() => {\n    return allMissingPriceEntries.filter((entry: MissingPriceEntry) => \n      entry.supplierName === supplierName\n    );\n  }, [allMissingPriceEntries, supplierName]);\n\n  // Export missing prices for this supplier\n  const exportMissingPrices = () => {\n    if (supplierMissingEntries.length === 0) {\n      toast({\n        title: \"No missing prices\",\n        description: \"This supplier has no missing price entries to export\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Create export data with template headers\n    const exportData = supplierMissingEntries.map((entry: MissingPriceEntry) => ({\n      'Product Name': entry.productName,\n      'Price Before GST (INR)': '', // Empty for user to fill\n      'GST Rate (%)': '18', // Default GST rate\n      'Price After GST (INR)': '', // Calculated field for user reference\n      'HSN Code': entry.hsn || '',\n      'Currency': 'INR',\n      'Effective From (YYYY-MM-DD)': new Date().toISOString().split('T')[0],\n      'Effective To (YYYY-MM-DD)': '', // Optional\n      'Orders Count': entry.orderCount\n    }));\n\n    // Create workbook and export\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    \n    // Set column widths\n    const colWidths = [\n      { wch: 30 }, // Product Name\n      { wch: 18 }, // Price Before GST\n      { wch: 12 }, // GST Rate\n      { wch: 18 }, // Price After GST\n      { wch: 12 }, // HSN Code\n      { wch: 10 }, // Currency\n      { wch: 18 }, // Effective From\n      { wch: 18 }, // Effective To\n      { wch: 12 }  // Orders Count\n    ];\n    worksheet['!cols'] = colWidths;\n\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Missing Prices');\n    \n    const filename = `${supplierName.replace(/[^a-zA-Z0-9]/g, '_')}_missing_prices_${new Date().toISOString().split('T')[0]}.xlsx`;\n    XLSX.writeFile(workbook, filename);\n\n    toast({\n      title: \"Export successful\",\n      description: `Downloaded ${supplierMissingEntries.length} missing price entries for ${supplierName}`\n    });\n  };\n\n  // Handle bulk price upload\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    const allowedTypes = [\n      'text/csv',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/octet-stream'\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload a CSV or Excel (.xlsx) file\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('supplierName', supplierName);\n\n      const response = await fetch('/api/price-entries/bulk-upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Upload successful\",\n          description: result.message\n        });\n\n        // Invalidate queries to refresh data\n        queryClient.invalidateQueries({ queryKey: ['/api/price-entries'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/missing-price-entries'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n\n        // Clear the file input\n        event.target.value = '';\n      } else {\n        throw new Error(result.message || 'Upload failed');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload failed\",\n        description: error instanceof Error ? error.message : 'Failed to upload price list',\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  if (!supplier) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"pt-6 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">Supplier Not Found</h2>\n            <p className=\"text-gray-600 mb-4\">The supplier \"{supplierName}\" could not be found.</p>\n            <Link href=\"/supplier-performance\">\n              <Button>Back to Suppliers</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Link href=\"/supplier-performance\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2 bg-white text-blue-600 hover:bg-blue-50\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Back to Suppliers</span>\n                </Button>\n              </Link>\n              <div className=\"border-l-2 border-blue-400 pl-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-blue-500 p-2 rounded-lg\">\n                    <Users className=\"h-8 w-8 text-white\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-white\">Supplier Information: {supplierName}</h1>\n                    <p className=\"text-blue-200 font-medium\">Manage prices and view performance metrics</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Missing Price Entries Card */}\n          <Card className=\"border-2 border-red-200 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-red-500 to-red-600 text-white rounded-t-lg\">\n              <CardTitle className=\"flex items-center space-x-3 text-xl\">\n                <AlertCircle className=\"h-6 w-6\" />\n                <span>Missing Price Entries ({supplierMissingEntries.length})</span>\n              </CardTitle>\n              <CardDescription className=\"text-red-100\">\n                Products that need price information\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {supplierMissingEntries.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Package className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n                  <p className=\"text-green-600 font-medium\">All prices are up to date!</p>\n                  <p className=\"text-gray-500 text-sm\">No missing price entries for this supplier.</p>\n                </div>\n              ) : (\n                <>\n                  {/* Sample entries */}\n                  <div className=\"space-y-3 mb-6 max-h-40 overflow-y-auto\">\n                    {supplierMissingEntries.slice(0, 3).map((entry: MissingPriceEntry, index: number) => (\n                      <div key={index} className=\"bg-red-50 p-3 rounded border-l-4 border-l-red-400\">\n                        <div className=\"font-medium text-gray-900 text-sm\">{entry.productName}</div>\n                        <div className=\"text-gray-600 text-xs mt-1\">HSN: {entry.hsn || 'N/A'} | Qty: {entry.orderCount}</div>\n                      </div>\n                    ))}\n                    {supplierMissingEntries.length > 3 && (\n                      <div className=\"text-xs text-red-600 text-center py-2 border-t\">\n                        +{supplierMissingEntries.length - 3} more products need pricing\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Action buttons */}\n                  <div className=\"space-y-3\">\n                    <Button\n                      onClick={exportMissingPrices}\n                      className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                      data-testid=\"export-missing-prices\"\n                    >\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Export Missing Price List (Excel)\n                    </Button>\n\n                    <div className=\"relative\">\n                      <input\n                        type=\"file\"\n                        accept=\".csv,.xlsx,.xls\"\n                        onChange={handleFileUpload}\n                        className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                        data-testid=\"upload-price-list\"\n                        disabled={isUploading}\n                      />\n                      <Button\n                        className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                        disabled={isUploading}\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        {isUploading ? 'Uploading...' : 'Upload Filled Price List'}\n                      </Button>\n                    </div>\n\n                    <p className=\"text-xs text-gray-500 text-center\">\n                      Upload an Excel/CSV file with filled prices to auto-update and recalculate payouts\n                    </p>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions Card */}\n          <Card className=\"border-2 border-blue-200 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-t-lg\">\n              <CardTitle className=\"flex items-center space-x-3 text-xl\">\n                <TrendingUp className=\"h-6 w-6\" />\n                <span>Quick Actions</span>\n              </CardTitle>\n              <CardDescription className=\"text-blue-100\">\n                Supplier management shortcuts\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6 space-y-4\">\n              <Link href=\"/supplier-performance\">\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  View Performance\n                </Button>\n              </Link>\n              \n              <Link href=\"/reports\">\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Generate Reports\n                </Button>\n              </Link>\n              \n              <Link href=\"/price-management\">\n                <Button variant=\"outline\" className=\"w-full justify-start\">\n                  <Package className=\"h-4 w-4 mr-2\" />\n                  Manage All Prices\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Comprehensive Payout Summary Placeholder */}\n        <Card className=\"border-2 border-green-200 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-green-500 to-green-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <FileText className=\"h-6 w-6\" />\n              <span>Comprehensive Payout Summary</span>\n            </CardTitle>\n            <CardDescription className=\"text-green-100\">\n              Detailed payout calculations for {supplierName}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center py-8\">\n              <TrendingUp className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <p className=\"text-green-600 font-medium\">Payout calculations will appear here</p>\n              <p className=\"text-gray-500 text-sm\">Once prices are added, detailed payout summary will be shown</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13802},"client/src/pages/gst-invoice.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Calendar, Download, FileText, ArrowLeft, Receipt, Building, User, Upload, Settings, ChevronDown, ChevronUp, AlertCircle, CheckCircle, Search } from \"lucide-react\";\nimport { Link } from 'wouter';\nimport { useToast } from \"@/hooks/use-toast\";\nimport * as XLSX from 'xlsx';\n\ninterface InvoiceItem {\n  productName: string;\n  quantity: number;\n  unitPrice: number;\n  gstRate: number;\n  amount: number;\n  gstAmount: number;\n  totalAmount: number;\n  hsn: string;\n}\n\ninterface GSTInvoice {\n  invoiceNumber: string;\n  invoiceDate: string;\n  supplierName: string;\n  supplierGSTIN: string;\n  supplierTradeName: string;\n  supplierAddress: string;\n  supplierShipToAddress: string;\n  buyerName: string;\n  buyerGSTIN: string;\n  buyerAddress: string;\n  shipToAddress: string;\n  placeOfSupply: string;\n  termsAndConditions: string;\n  items: InvoiceItem[];\n  totalAmountBeforeGST: number;\n  totalGSTAmount: number;\n  totalAmountAfterGST: number;\n}\n\nexport default function GSTInvoicePage() {\n  const [selectedSuppliers, setSelectedSuppliers] = useState<string[]>([]);\n  const [dateFrom, setDateFrom] = useState('');\n  const [dateTo, setDateTo] = useState('');\n  const [buyerName, setBuyerName] = useState('');\n  const [buyerGSTIN, setBuyerGSTIN] = useState('');\n  const [buyerAddress, setBuyerAddress] = useState('');\n  const [shipToAddress, setShipToAddress] = useState('');\n  const [supplierGSTIN, setSupplierGSTIN] = useState('');\n  const [supplierTradeName, setSupplierTradeName] = useState('');\n  const [supplierAddress, setSupplierAddress] = useState('');\n  const [supplierShipToAddress, setSupplierShipToAddress] = useState('');\n  const [placeOfSupply, setPlaceOfSupply] = useState('');\n  const [termsAndConditions, setTermsAndConditions] = useState('Payment due within 30 days\\nAll disputes subject to local jurisdiction\\nGoods once sold cannot be returned\\nSubject to delivery as per terms agreed');\n  const [generatedInvoice, setGeneratedInvoice] = useState<GSTInvoice | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [showUploadDialog, setShowUploadDialog] = useState(false);\n  const [uploadingGSTData, setUploadingGSTData] = useState(false);\n  const [defaultBuyerGSTIN, setDefaultBuyerGSTIN] = useState('');\n  const [defaultBuyerName, setDefaultBuyerName] = useState('');\n  const [defaultBuyerAddress, setDefaultBuyerAddress] = useState('');\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [eligibleSuppliers, setEligibleSuppliers] = useState<any[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [dateType, setDateType] = useState('channelOrderDate'); // 'channelOrderDate', 'deliveredDate' or 'orderDate'\n  const [showMultiSelect, setShowMultiSelect] = useState(false);\n\n  const { toast } = useToast();\n\n  const { data: suppliers = [] } = useQuery({ queryKey: ['/api/suppliers'] });\n  const { data: orders = [] } = useQuery({ queryKey: ['/api/orders'] });\n\n  // Load default buyer settings on page load and apply to all invoices\n  React.useEffect(() => {\n    const savedGSTIN = localStorage.getItem('defaultBuyerGSTIN');\n    const savedName = localStorage.getItem('defaultBuyerName');\n    const savedAddress = localStorage.getItem('defaultBuyerAddress');\n    \n    if (savedGSTIN && savedName && savedAddress) {\n      // Set default values for storage\n      setDefaultBuyerGSTIN(savedGSTIN);\n      setDefaultBuyerName(savedName);\n      setDefaultBuyerAddress(savedAddress);\n      \n      // Auto-apply to current form for all invoices\n      setBuyerGSTIN(savedGSTIN);\n      setBuyerName(savedName);\n      setBuyerAddress(savedAddress);\n      setShipToAddress(savedAddress);\n      \n      toast({\n        title: \"Default Buyer Applied\",\n        description: \"Using saved default buyer details for all suppliers\",\n      });\n    }\n  }, []);\n\n  // Function to upload GST data file\n  const handleGSTDataUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setUploadingGSTData(true);\n\n    try {\n      const response = await fetch('/api/upload-gst-data', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const result = await response.json();\n      \n      toast({\n        title: \"GST Data Uploaded\",\n        description: `Successfully uploaded GST data for ${result.count} suppliers`,\n      });\n\n      setShowUploadDialog(false);\n      \n      // Refresh suppliers data\n      window.location.reload();\n\n    } catch (error) {\n      console.error('GST data upload error:', error);\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload GST data. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploadingGSTData(false);\n    }\n  };\n\n  // Function to save default buyer settings for ALL suppliers\n  const saveDefaultBuyerSettings = () => {\n    if (defaultBuyerGSTIN && defaultBuyerName && defaultBuyerAddress) {\n      // Store in localStorage for persistence across sessions\n      localStorage.setItem('defaultBuyerGSTIN', defaultBuyerGSTIN);\n      localStorage.setItem('defaultBuyerName', defaultBuyerName);\n      localStorage.setItem('defaultBuyerAddress', defaultBuyerAddress);\n      \n      // Apply to current form\n      setBuyerGSTIN(defaultBuyerGSTIN);\n      setBuyerName(defaultBuyerName);\n      setBuyerAddress(defaultBuyerAddress);\n      setShipToAddress(defaultBuyerAddress);\n      \n      toast({\n        title: \"Default Buyer Set for All Suppliers\",\n        description: \"These default buyer details will be used for all future invoices and suppliers\",\n      });\n    } else {\n      toast({\n        title: \"Missing Information\", \n        description: \"Please fill all buyer fields to set as default\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Function to filter suppliers based on date range\n  const filterEligibleSuppliers = () => {\n    if (!dateFrom || !dateTo || !Array.isArray(orders) || !Array.isArray(suppliers)) {\n      setEligibleSuppliers(Array.isArray(suppliers) ? suppliers : []);\n      return;\n    }\n\n    const fromDate = new Date(dateFrom);\n    const toDate = new Date(dateTo);\n    toDate.setHours(23, 59, 59, 999); // Include the entire day\n    \n    // Find suppliers with orders in the date range based on selected date type\n    const suppliersWithOrders = orders.filter((order: any) => {\n      let selectedDate;\n      if (dateType === 'channelOrderDate') {\n        selectedDate = new Date(order.channelOrderDate);\n      } else if (dateType === 'orderDate') {\n        selectedDate = new Date(order.orderDate || order.channelOrderDate);\n      } else {\n        selectedDate = new Date(order.deliveredDate);\n      }\n      \n      if (isNaN(selectedDate.getTime())) {\n        return false; // Invalid date\n      }\n      \n      return selectedDate >= fromDate && selectedDate <= toDate;\n    });\n    \n    // Get unique supplier IDs from orders\n    const supplierIds = Array.from(new Set(\n      suppliersWithOrders.map((order: any) => order.supplierId).filter(Boolean)\n    ));\n    \n    // Find suppliers that match these IDs\n    const eligibleSuppliersByIds = suppliers.filter((supplier: any) => \n      supplierIds.includes(supplier.id)\n    );\n    setEligibleSuppliers(eligibleSuppliersByIds);\n    \n    if (eligibleSuppliersByIds.length === 0) {\n      toast({\n        title: \"No Eligible Suppliers\",\n        description: `No suppliers have orders in the selected date range (${dateFrom} to ${dateTo}). Check if orders exist for this period.`,\n        variant: \"destructive\"\n      });\n    } else {\n      toast({\n        title: \"Suppliers Filtered\",\n        description: `Found ${eligibleSuppliersByIds.length} suppliers with orders in this date range`,\n      });\n    }\n  };\n\n  // Filter suppliers when date range or date type changes\n  React.useEffect(() => {\n    if (dateFrom && dateTo) {\n      filterEligibleSuppliers();\n    }\n  }, [dateFrom, dateTo, dateType, orders, suppliers]);\n\n  // Filter suppliers based on search term\n  const filteredSuppliers = React.useMemo(() => {\n    const suppliersToShow = dateFrom && dateTo && eligibleSuppliers.length > 0 ? eligibleSuppliers : (Array.isArray(suppliers) ? suppliers : []);\n    if (!searchTerm) return suppliersToShow;\n    \n    return suppliersToShow.filter((supplier: any) => \n      supplier.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (supplier.gstin && supplier.gstin.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n  }, [eligibleSuppliers, suppliers, searchTerm, dateFrom, dateTo]);\n\n  // Clear all filters\n  const clearAllFilters = () => {\n    setDateFrom('');\n    setDateTo('');\n    setSelectedSuppliers([]);\n    setSearchTerm('');\n    setEligibleSuppliers([]);\n    toast({\n      title: \"Filters Cleared\",\n      description: \"All filters and selections have been reset\"\n    });\n  };\n\n  // Function to export current suppliers for GST data entry\n  const exportSuppliersForGST = () => {\n    if (!Array.isArray(suppliers) || suppliers.length === 0) {\n      toast({\n        title: \"No Suppliers Found\",\n        description: \"No suppliers available to export\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      // Create data for Excel export\n      const excelData = suppliers.map((supplier: any) => ({\n        'Supplier Name': supplier.name,\n        'GSTIN': supplier.gstin || '',\n        'Trade Name': supplier.tradeName || supplier.name,\n        'Address': supplier.address || '',\n        'Place of Supply': supplier.placeOfSupply || ''\n      }));\n\n      // Create workbook and worksheet\n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.json_to_sheet(excelData);\n\n      // Set column widths for better formatting\n      const columnWidths = [\n        { wch: 25 }, // Supplier Name\n        { wch: 20 }, // GSTIN\n        { wch: 25 }, // Trade Name\n        { wch: 40 }, // Address\n        { wch: 20 }  // Place of Supply\n      ];\n      worksheet['!cols'] = columnWidths;\n\n      // Add worksheet to workbook\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Suppliers GST Data');\n\n      // Generate Excel file and download\n      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n      const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n      \n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'All_Suppliers_GST_Data.xlsx';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Suppliers Exported to Excel\",\n        description: `Exported ${suppliers.length} suppliers to Excel file. Add GST details and upload back.`,\n      });\n    } catch (error) {\n      console.error('Export error:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export suppliers to Excel file\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Function to extract place of supply from GSTIN\n  const extractPlaceOfSupply = (gstin: string) => {\n    if (!gstin || gstin.length < 2) return '';\n    \n    const stateCodeMap: { [key: string]: string } = {\n      '01': 'Jammu and Kashmir', '02': 'Himachal Pradesh', '03': 'Punjab', '04': 'Chandigarh',\n      '05': 'Uttarakhand', '06': 'Haryana', '07': 'Delhi', '08': 'Rajasthan',\n      '09': 'Uttar Pradesh', '10': 'Bihar', '11': 'Sikkim', '12': 'Arunachal Pradesh',\n      '13': 'Nagaland', '14': 'Manipur', '15': 'Mizoram', '16': 'Tripura',\n      '17': 'Meghalaya', '18': 'Assam', '19': 'West Bengal', '20': 'Jharkhand',\n      '21': 'Odisha', '22': 'Chhattisgarh', '23': 'Madhya Pradesh', '24': 'Gujarat',\n      '25': 'Daman and Diu', '26': 'Dadra and Nagar Haveli', '27': 'Maharashtra',\n      '28': 'Andhra Pradesh', '29': 'Karnataka', '30': 'Goa', '31': 'Lakshadweep',\n      '32': 'Kerala', '33': 'Tamil Nadu', '34': 'Puducherry', '35': 'Andaman and Nicobar Islands',\n      '36': 'Telangana', '37': 'Andhra Pradesh', '38': 'Ladakh'\n    };\n    \n    const stateCode = gstin.substring(0, 2);\n    return stateCodeMap[stateCode] || '';\n  };\n\n  // Handle supplier selection\n  const handleSupplierToggle = (supplierName: string) => {\n    setSelectedSuppliers(prev => {\n      let newSelected;\n      if (prev.includes(supplierName)) {\n        newSelected = prev.filter(name => name !== supplierName);\n      } else {\n        newSelected = [...prev, supplierName];\n      }\n      \n      // Auto-fill supplier details when the first supplier is selected\n      if (newSelected.length === 1) {\n        const selectedSupplier = (Array.isArray(suppliers) ? suppliers : []).find((s: any) => s.name === supplierName);\n        if (selectedSupplier) {\n          // Auto-fill the supplier form with selected supplier's data\n          setSupplierGSTIN(selectedSupplier.gstin || '');\n          setSupplierTradeName(selectedSupplier.tradeName || selectedSupplier.name);\n          setSupplierAddress(selectedSupplier.address || '');\n          setSupplierShipToAddress(selectedSupplier.address || '');\n          if (selectedSupplier.placeOfSupply) {\n            setPlaceOfSupply(selectedSupplier.placeOfSupply);\n          }\n          \n          toast({\n            title: \"Supplier Details Loaded\",\n            description: `Auto-filled details for ${selectedSupplier.name}`,\n          });\n        }\n      } else if (newSelected.length === 0) {\n        // Clear supplier details when no suppliers selected\n        setSupplierGSTIN('');\n        setSupplierTradeName('');\n        setSupplierAddress('');\n        setSupplierShipToAddress('');\n        setPlaceOfSupply('');\n      }\n      \n      return newSelected;\n    });\n  };\n\n  const handleSelectAllSuppliers = () => {\n    const supplierNames = filteredSuppliers.map((s: any) => s.name);\n    setSelectedSuppliers(supplierNames);\n  };\n\n  const handleClearAllSuppliers = () => {\n    setSelectedSuppliers([]);\n  };\n\n  // Function to fetch GST details from portal API\n  const fetchGSTDetails = async (gstin: string) => {\n    if (!gstin || gstin.length !== 15) return;\n    \n    try {\n      const response = await fetch(`/api/gst-details/${gstin}`);\n      const data = await response.json();\n      \n      if (data.tradeName) {\n        setSupplierTradeName(data.tradeName);\n      }\n      if (data.legalName && !data.tradeName) {\n        setSupplierTradeName(data.legalName);\n      }\n      if (data.address) {\n        setSupplierAddress(data.address);\n        if (!supplierShipToAddress) {\n          setSupplierShipToAddress(data.address);\n        }\n      }\n      if (data.placeOfSupply) {\n        setPlaceOfSupply(data.placeOfSupply);\n      }\n      \n      if (data.source === 'api') {\n        toast({\n          title: \"GST Details Fetched\",\n          description: `Company details fetched from GST portal for ${gstin}`,\n        });\n      }\n      \n    } catch (error) {\n      console.error('Failed to fetch GST details:', error);\n      // Fallback to manual state detection\n      const detectedPlace = extractPlaceOfSupply(gstin);\n      if (detectedPlace) {\n        setPlaceOfSupply(detectedPlace);\n      }\n    }\n  };\n\n  // Function to handle buyer GSTIN change and auto-fetch details\n  const handleBuyerGSTINChange = async (gstin: string) => {\n    setBuyerGSTIN(gstin);\n    if (gstin && gstin.length === 15) {\n      try {\n        const response = await fetch(`/api/gst-details/${gstin}`);\n        const data = await response.json();\n        \n        if (data.tradeName) {\n          setBuyerName(data.tradeName);\n        } else if (data.legalName) {\n          setBuyerName(data.legalName);\n        }\n        \n        if (data.address) {\n          setBuyerAddress(data.address);\n          if (!shipToAddress) {\n            setShipToAddress(data.address);\n          }\n        }\n        \n        if (data.source === 'api') {\n          toast({\n            title: \"Buyer Details Fetched\",\n            description: `Buyer details fetched from GST portal for ${gstin}`,\n          });\n        }\n        \n      } catch (error) {\n        console.error('Failed to fetch buyer GST details:', error);\n      }\n    }\n  };\n\n  // Function to handle GSTIN change and auto-detect place of supply\n  const handleSupplierGSTINChange = (gstin: string) => {\n    setSupplierGSTIN(gstin);\n    if (gstin && gstin.length === 15) {\n      fetchGSTDetails(gstin);\n    } else if (gstin && gstin.length >= 2) {\n      const detectedPlace = extractPlaceOfSupply(gstin);\n      if (detectedPlace) {\n        setPlaceOfSupply(detectedPlace);\n      }\n    }\n  };\n\n\n\n  // Fetch price entries\n  const { data: priceEntries = [] } = useQuery<any[]>({\n    queryKey: ['/api/price-entries'],\n    retry: 3,\n    retryDelay: 1000,\n  });\n\n  const generateInvoice = async () => {\n    if (selectedSuppliers.length === 0 || !dateFrom || !dateTo || !buyerName || !buyerGSTIN || !buyerAddress) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields to generate invoice\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n\n    try {\n      // Process invoices for selected suppliers\n      const invoicePromises = selectedSuppliers.map(async (supplierName) => {\n        const supplier = (Array.isArray(suppliers) ? suppliers : []).find((s: any) => s.name === supplierName);\n        if (!supplier) return null;\n        \n        // Generate invoice for each supplier individually\n        return await generateSingleSupplierInvoice(supplier);\n      });\n      \n      const invoices = await Promise.all(invoicePromises);\n      const validInvoices = invoices.filter(Boolean);\n      \n      if (validInvoices.length === 0) {\n        throw new Error('No invoices could be generated for selected suppliers');\n      }\n\n      // For multiple suppliers, create a combined invoice\n      if (validInvoices.length === 1) {\n        setGeneratedInvoice(validInvoices[0]);\n        toast({\n          title: \"Invoice Generated\",\n          description: `Successfully generated invoice for ${validInvoices[0]?.supplierName || 'supplier'}`,\n        });\n      } else {\n        // For multiple suppliers, show them as separate line items in one invoice\n        // Smart trade name logic: use single name if same, comma-separated if different\n        const uniqueTradeNames = Array.from(new Set(\n          validInvoices.map(inv => inv!.supplierTradeName || inv!.supplierName)\n        ));\n        const finalTradeName = uniqueTradeNames.length === 1 \n          ? uniqueTradeNames[0] \n          : uniqueTradeNames.join(', ');\n\n        const combinedInvoice: GSTInvoice = {\n          ...validInvoices[0]!,\n          supplierName: validInvoices.map(inv => inv!.supplierName).join(', '),\n          supplierTradeName: finalTradeName,\n          items: validInvoices.flatMap(inv => inv!.items),\n          totalAmountBeforeGST: validInvoices.reduce((sum, inv) => sum + inv!.totalAmountBeforeGST, 0),\n          totalGSTAmount: validInvoices.reduce((sum, inv) => sum + inv!.totalGSTAmount, 0),\n          totalAmountAfterGST: validInvoices.reduce((sum, inv) => sum + inv!.totalAmountAfterGST, 0),\n          invoiceNumber: `GST-MULTI-${new Date().getTime()}`\n        };\n        setGeneratedInvoice(combinedInvoice);\n        toast({\n          title: \"Combined Invoice Generated\",\n          description: `Successfully generated combined invoice for ${validInvoices.length} suppliers`,\n        });\n      }\n    } catch (error) {\n      console.error('Error generating invoice:', error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to generate invoice\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Function to generate invoice for a single supplier\n  const generateSingleSupplierInvoice = async (supplier: any): Promise<GSTInvoice | null> => {\n    try {\n      const fromDate = new Date(dateFrom);\n      const toDate = new Date(dateTo);\n      toDate.setHours(23, 59, 59, 999);\n\n      // Step 1: Filter orders by channel order date range first\n      const ordersInDateRange = (Array.isArray(orders) ? orders : []).filter((order: any) => {\n        if (order.supplierId !== supplier.id) return false;\n        \n        let selectedDate;\n        if (dateType === 'channelOrderDate') {\n          selectedDate = new Date(order.channelOrderDate);\n        } else if (dateType === 'orderDate') {\n          selectedDate = new Date(order.orderDate || order.channelOrderDate);\n        } else {\n          selectedDate = new Date(order.deliveredDate);\n        }\n        \n        if (isNaN(selectedDate.getTime())) return false;\n        return selectedDate >= fromDate && selectedDate <= toDate;\n      });\n      \n      // Step 2: From those orders, only use Delivered/Completed for calculations\n      const supplierOrders = ordersInDateRange.filter((order: any) => {\n        return order.status === 'Delivered' || order.status === 'Completed';\n      });\n      \n      console.log(`üìä Orders in date range for ${supplier.name}: ${ordersInDateRange.length}`);\n      console.log(`üìä Delivered/Completed orders for ${supplier.name}: ${supplierOrders.length}`);\n\n      if (supplierOrders.length === 0) return null;\n\n      // Group orders by product and calculate totals\n      const productMap = new Map();\n      let totalAmountBeforeGST = 0;\n      let totalGSTAmount = 0;\n\n      supplierOrders.forEach((order: any) => {\n        const priceEntry = priceEntries.find((entry: any) => \n          entry.supplierId === order.supplierId && \n          entry.productName === order.productName\n        );\n\n        if (!priceEntry) return;\n\n        const deliveredQty = parseInt(String(order.deliveredQty || order.qty || 0));\n        const unitPriceAfterGST = parseFloat(String(priceEntry.price || 0));\n        const gstRate = parseFloat(String(priceEntry.gstRate || 18));\n        \n        if (unitPriceAfterGST <= 0 || deliveredQty <= 0) return;\n\n        const unitPriceBeforeGST = unitPriceAfterGST / (1 + gstRate / 100);\n        const amountBeforeGST = unitPriceBeforeGST * deliveredQty;\n        const gstAmount = amountBeforeGST * (gstRate / 100);\n        const totalAmount = amountBeforeGST + gstAmount;\n\n        const productKey = order.productName;\n        if (productMap.has(productKey)) {\n          const existing = productMap.get(productKey);\n          existing.quantity += deliveredQty;\n          existing.amount += amountBeforeGST;\n          existing.gstAmount += gstAmount;\n          existing.totalAmount += totalAmount;\n        } else {\n          productMap.set(productKey, {\n            productName: order.productName,\n            quantity: deliveredQty,\n            unitPrice: unitPriceBeforeGST,\n            gstRate: gstRate,\n            amount: amountBeforeGST,\n            gstAmount: gstAmount,\n            totalAmount: totalAmount,\n            hsn: priceEntry.hsn || ''\n          });\n        }\n\n        totalAmountBeforeGST += amountBeforeGST;\n        totalGSTAmount += gstAmount;\n      });\n\n      const items = Array.from(productMap.values());\n      \n      if (items.length === 0) return null;\n\n      // Generate invoice number\n      const invoiceNumber = `GST-${supplier.name.toUpperCase().replace(/\\s+/g, '')}-${new Date().getTime()}`;\n\n      const invoice: GSTInvoice = {\n        invoiceNumber,\n        invoiceDate: new Date().toISOString().split('T')[0],\n        supplierName: supplier.name,\n        supplierGSTIN: supplier.gstin || supplierGSTIN || 'N/A', // Use supplier's own GSTIN first\n        supplierTradeName: supplier.tradeName || supplierTradeName || supplier.name,\n        supplierAddress: supplier.address || supplierAddress || 'N/A',\n        supplierShipToAddress: supplier.address || supplierShipToAddress || supplierAddress || 'N/A',\n        buyerName,\n        buyerGSTIN,\n        buyerAddress,\n        shipToAddress: shipToAddress || buyerAddress,\n        placeOfSupply: supplier.placeOfSupply || placeOfSupply || '',\n        termsAndConditions,\n        items,\n        totalAmountBeforeGST,\n        totalGSTAmount,\n        totalAmountAfterGST: totalAmountBeforeGST + totalGSTAmount\n      };\n\n      return invoice;\n    } catch (error) {\n      console.error('Invoice generation error:', error);\n      return null;\n    }\n  };\n\n  const downloadInvoice = () => {\n    if (!generatedInvoice) return;\n\n    const invoiceHTML = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>GST Invoice - ${generatedInvoice.invoiceNumber}</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; font-size: 12px; }\n        .invoice-header { text-align: center; margin-bottom: 20px; border-bottom: 2px solid #333; padding-bottom: 10px; }\n        .invoice-details { display: flex; justify-content: space-between; margin-bottom: 20px; }\n        .party-details { width: 48%; border: 1px solid #ddd; padding: 10px; }\n        .invoice-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n        .invoice-table th, .invoice-table td { border: 1px solid #ddd; padding: 6px; text-align: left; font-size: 11px; }\n        .invoice-table th { background-color: #f2f2f2; font-weight: bold; }\n        .totals { text-align: right; font-weight: bold; }\n        .amount { text-align: right; }\n        .gst-summary { margin-top: 20px; border: 1px solid #ddd; padding: 10px; background-color: #f8f9fa; }\n        .footer-section { margin-top: 30px; border-top: 1px solid #ddd; padding-top: 15px; }\n        .computer-generated { text-align: center; font-style: italic; color: #666; margin-top: 20px; }\n        .place-supply { margin-bottom: 10px; font-weight: bold; }\n    </style>\n</head>\n<body>\n    <div class=\"invoice-header\">\n        <h1 style=\"margin: 0; color: #333;\">GST INVOICE</h1>\n        <p style=\"margin: 5px 0;\">Invoice No: <strong>${generatedInvoice.invoiceNumber}</strong></p>\n        <p style=\"margin: 5px 0;\">Date: <strong>${new Date(generatedInvoice.invoiceDate).toLocaleDateString()}</strong></p>\n        ${generatedInvoice.placeOfSupply ? `<p class=\"place-supply\">Place of Supply: ${generatedInvoice.placeOfSupply}</p>` : ''}\n    </div>\n    \n    <!-- Billing Details Row -->\n    <div class=\"invoice-details\">\n        <div class=\"party-details\">\n            <h3 style=\"margin-top: 0; color: #333; border-bottom: 1px solid #ddd; padding-bottom: 5px;\">Supplier Details (Bill From)</h3>\n            <p><strong>${generatedInvoice.supplierTradeName || generatedInvoice.supplierName}</strong></p>\n            ${generatedInvoice.supplierAddress ? `<p style=\"margin: 5px 0;\">${generatedInvoice.supplierAddress}</p>` : ''}\n            <p style=\"margin: 5px 0;\"><strong>GSTIN:</strong> ${generatedInvoice.supplierGSTIN}</p>\n        </div>\n        <div class=\"party-details\">\n            <h3 style=\"margin-top: 0; color: #333; border-bottom: 1px solid #ddd; padding-bottom: 5px;\">Buyer Details (Bill To)</h3>\n            <p><strong>${generatedInvoice.buyerName}</strong></p>\n            ${generatedInvoice.buyerAddress ? `<p style=\"margin: 5px 0;\">${generatedInvoice.buyerAddress}</p>` : ''}\n            <p style=\"margin: 5px 0;\"><strong>GSTIN:</strong> ${generatedInvoice.buyerGSTIN}</p>\n        </div>\n    </div>\n    \n    \n    <table class=\"invoice-table\">\n        <thead>\n            <tr>\n                <th>S.No</th>\n                <th>Product Name</th>\n                <th>HSN Code</th>\n                <th>Quantity</th>\n                <th>Unit Price</th>\n                <th>Amount</th>\n                <th>GST Rate</th>\n                <th>GST Amount</th>\n                <th>Total Amount</th>\n            </tr>\n        </thead>\n        <tbody>\n            ${generatedInvoice.items.map((item, index) => `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${item.productName}</td>\n                    <td>${item.hsn}</td>\n                    <td>${item.quantity}</td>\n                    <td class=\"amount\">‚Çπ${item.unitPrice.toFixed(2)}</td>\n                    <td class=\"amount\">‚Çπ${item.amount.toFixed(2)}</td>\n                    <td>${item.gstRate}%</td>\n                    <td class=\"amount\">‚Çπ${item.gstAmount.toFixed(2)}</td>\n                    <td class=\"amount\">‚Çπ${item.totalAmount.toFixed(2)}</td>\n                </tr>\n            `).join('')}\n        </tbody>\n    </table>\n    \n    <div class=\"gst-summary\">\n        <div class=\"totals\">\n            <p>Total Amount (Before GST): ‚Çπ${generatedInvoice.totalAmountBeforeGST.toFixed(2)}</p>\n            <p>Total GST Amount: ‚Çπ${generatedInvoice.totalGSTAmount.toFixed(2)}</p>\n            <p><strong>Total Amount (After GST): ‚Çπ${generatedInvoice.totalAmountAfterGST.toFixed(2)}</strong></p>\n        </div>\n    </div>\n    \n    <div class=\"footer-section\">\n        <h4 style=\"margin-top: 0; color: #333;\">Terms & Conditions:</h4>\n        ${generatedInvoice.termsAndConditions.split('\\n').map(term => `<p style=\"margin: 3px 0;\">‚Ä¢ ${term}</p>`).join('')}\n    </div>\n    \n    <div class=\"computer-generated\">\n        <p style=\"margin: 10px 0; font-size: 11px;\"><strong>This is a computer generated invoice, no signature required.</strong></p>\n        <p style=\"margin: 5px 0; font-size: 10px;\">Generated on: ${new Date().toLocaleString()}</p>\n    </div>\n</body>\n</html>`;\n\n    const blob = new Blob([invoiceHTML], { type: 'text/html' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `GST_Invoice_${generatedInvoice.invoiceNumber}.html`;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n\n    toast({\n      title: \"Invoice Downloaded\",\n      description: `GST Invoice ${generatedInvoice.invoiceNumber} downloaded successfully`\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-lg border-b-4 border-blue-500\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-2 hover:bg-blue-50\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Dashboard</span>\n                </Button>\n              </Link>\n              <div className=\"border-l-2 border-gray-300 pl-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-blue-100 p-2 rounded-lg\">\n                    <Receipt className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900\">GST Invoice Generator</h1>\n                    <p className=\"text-blue-600 font-medium\">Generate compliant GST invoices for supplier payouts</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  {/* Upload GST Data Button */}\n                  <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" className=\"flex items-center space-x-2 bg-green-50 border-green-200 text-green-700 hover:bg-green-100\">\n                        <Upload className=\"h-4 w-4\" />\n                        <span>Upload GST Data</span>\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Upload Supplier GST Data</DialogTitle>\n                        <DialogDescription>\n                          Upload a CSV/Excel file with supplier GST information (GSTIN, Trade Name, Address)\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label>Expected columns: GSTIN, Trade Name, Address, Place of Supply</Label>\n                          <div className=\"flex items-center space-x-2 mt-2\">\n                            <Button\n                              onClick={exportSuppliersForGST}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                            >\n                              <Download className=\"h-4 w-4 mr-2\" />\n                              Export All Suppliers\n                            </Button>\n                            <span className=\"text-sm text-gray-500\">Download with your {Array.isArray(suppliers) ? suppliers.length : 0} suppliers</span>\n                          </div>\n                          <Input\n                            type=\"file\"\n                            accept=\".csv,.xlsx,.xls\"\n                            onChange={handleGSTDataUpload}\n                            disabled={uploadingGSTData}\n                            className=\"mt-2\"\n                          />\n                        </div>\n                        {uploadingGSTData && (\n                          <div className=\"flex items-center space-x-2 text-blue-600\">\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                            <span>Uploading GST data...</span>\n                          </div>\n                        )}\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n\n                  {/* Default Buyer Settings */}\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" className=\"flex items-center space-x-2 bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100\">\n                        <Settings className=\"h-4 w-4\" />\n                        <span>Default Buyer</span>\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-lg\">\n                      <DialogHeader>\n                        <DialogTitle>Set Default Buyer Details</DialogTitle>\n                        <DialogDescription>\n                          Set default buyer information that will be automatically applied to ALL suppliers and invoices\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        {/* Status indicator */}\n                        {localStorage.getItem('defaultBuyerGSTIN') && (\n                          <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                            <div className=\"flex items-center space-x-2 text-green-700\">\n                              <CheckCircle className=\"h-4 w-4\" />\n                              <span className=\"text-sm font-medium\">Default buyer settings are active for all suppliers</span>\n                            </div>\n                          </div>\n                        )}\n                        \n                        <div>\n                          <Label>Default Buyer GSTIN</Label>\n                          <Input\n                            type=\"text\"\n                            value={defaultBuyerGSTIN}\n                            onChange={(e) => setDefaultBuyerGSTIN(e.target.value)}\n                            placeholder=\"Enter default buyer GSTIN\"\n                            maxLength={15}\n                          />\n                        </div>\n                        <div>\n                          <Label>Default Buyer Name</Label>\n                          <Input\n                            type=\"text\"\n                            value={defaultBuyerName}\n                            onChange={(e) => setDefaultBuyerName(e.target.value)}\n                            placeholder=\"Enter default buyer company name\"\n                          />\n                        </div>\n                        <div>\n                          <Label>Default Buyer Address</Label>\n                          <Input\n                            type=\"text\"\n                            value={defaultBuyerAddress}\n                            onChange={(e) => setDefaultBuyerAddress(e.target.value)}\n                            placeholder=\"Enter default buyer address\"\n                          />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 gap-3\">\n                          <Button onClick={saveDefaultBuyerSettings} className=\"w-full bg-green-600 hover:bg-green-700\">\n                            Set as Default for All Suppliers\n                          </Button>\n                          \n                          {localStorage.getItem('defaultBuyerGSTIN') && (\n                            <Button \n                              onClick={() => {\n                                localStorage.removeItem('defaultBuyerGSTIN');\n                                localStorage.removeItem('defaultBuyerName');\n                                localStorage.removeItem('defaultBuyerAddress');\n                                setDefaultBuyerGSTIN('');\n                                setDefaultBuyerName('');\n                                setDefaultBuyerAddress('');\n                                toast({\n                                  title: \"Defaults Cleared\",\n                                  description: \"Default buyer settings removed. You'll need to enter buyer details manually for each invoice.\",\n                                });\n                              }} \n                              variant=\"outline\" \n                              className=\"w-full text-red-600 border-red-300 hover:bg-red-50\"\n                            >\n                              Clear Default Settings\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Invoice Generation Form */}\n        <Card className=\"border-2 border-blue-200 shadow-xl\">\n          <CardHeader className=\"bg-blue-600 text-white rounded-t-lg\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl\">\n              <FileText className=\"h-6 w-6\" />\n              <span>Generate GST Invoice</span>\n            </CardTitle>\n            <CardDescription className=\"text-blue-100\">\n              Create GST compliant invoices for supplier transactions\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-8\">\n              {/* New Layout: Supplier Selection + Date Range + Controls */}\n              <div className=\"space-y-6\">\n                {/* Top Controls Row */}\n                <div className=\"flex flex-wrap items-center justify-between gap-4 p-4 bg-gray-50 rounded-lg border\">\n                  <div className=\"flex items-center space-x-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-800\">Select Suppliers ({selectedSuppliers.length} selected)</h3>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handleSelectAllSuppliers}\n                        disabled={filteredSuppliers.length === 0}\n                      >\n                        Select All\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handleClearAllSuppliers}\n                      >\n                        Clear All\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={clearAllFilters}\n                      className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                    >\n                      Clear All Filters\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Date Range and Search Row */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Date Type *</Label>\n                    <Select value={dateType} onValueChange={setDateType}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"channelOrderDate\">Channel Order Date</SelectItem>\n                        <SelectItem value=\"deliveredDate\">Delivered Date</SelectItem>\n                        <SelectItem value=\"orderDate\">Order Date</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"dateFrom\" className=\"text-sm font-medium text-gray-700\">From Date *</Label>\n                    <Input\n                      type=\"date\"\n                      value={dateFrom}\n                      onChange={(e) => setDateFrom(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dateTo\" className=\"text-sm font-medium text-gray-700\">To Date *</Label>\n                    <Input\n                      type=\"date\"\n                      value={dateTo}\n                      onChange={(e) => setDateTo(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Search Suppliers</Label>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search suppliers...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Success/Status Message */}\n                {dateFrom && dateTo && (\n                  <div className=\"p-4 rounded-lg border\">\n                    {eligibleSuppliers.length > 0 ? (\n                      <div className=\"text-green-600 bg-green-50 p-3 rounded-lg border border-green-200 flex items-center space-x-2\">\n                        <CheckCircle className=\"h-5 w-5\" />\n                        <span className=\"font-medium\">‚úì {filteredSuppliers.length} of {eligibleSuppliers.length} suppliers available for selected date range</span>\n                      </div>\n                    ) : (\n                      <div className=\"text-red-600 bg-red-50 p-3 rounded-lg border border-red-200 flex items-center space-x-2\">\n                        <AlertCircle className=\"h-5 w-5\" />\n                        <span className=\"font-medium\">No suppliers have orders in the selected date range ({dateFrom} to {dateTo})</span>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Suppliers Grid - No Scroll, Show All */}\n                {(!dateFrom || !dateTo) ? (\n                  <div className=\"text-center p-12 border border-dashed border-gray-300 rounded-lg\">\n                    <Calendar className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-600 mb-2\">Select Date Range First</h3>\n                    <p className=\"text-gray-500\">Choose date type, from and to dates to see eligible suppliers</p>\n                  </div>\n                ) : filteredSuppliers.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {filteredSuppliers.map((supplier: any) => (\n                      <div\n                        key={supplier.id}\n                        className=\"border rounded-lg p-4 hover:bg-blue-50 hover:border-blue-300 transition-all cursor-pointer\"\n                        onClick={() => handleSupplierToggle(supplier.name)}\n                      >\n                        <div className=\"flex items-start space-x-3\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedSuppliers.includes(supplier.name)}\n                            onChange={() => handleSupplierToggle(supplier.name)}\n                            className=\"mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                            onClick={(e) => e.stopPropagation()}\n                          />\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-medium text-gray-900 truncate\">{supplier.name}</h4>\n                            {supplier.gstin && (\n                              <p className=\"text-sm text-green-600 mt-1\">GSTIN: {supplier.gstin}</p>\n                            )}\n                            {supplier.address && (\n                              <p className=\"text-xs text-gray-500 mt-1 line-clamp-2\">{supplier.address}</p>\n                            )}\n                            {supplier.tradeName && supplier.tradeName !== supplier.name && (\n                              <p className=\"text-xs text-blue-600 mt-1\">Trade: {supplier.tradeName}</p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center p-8 border border-dashed border-gray-300 rounded-lg\">\n                    <AlertCircle className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n                    <h3 className=\"text-lg font-medium text-gray-600 mb-2\">No Suppliers Found</h3>\n                    <p className=\"text-gray-500\">No suppliers match your current search and date criteria</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Two Column Layout: Supplier | Buyer */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Supplier Details - Left Side */}\n                <div className=\"space-y-6 p-6 bg-green-50 rounded-lg border border-green-200\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <Building className=\"h-5 w-5 text-green-600\" />\n                    <h3 className=\"text-lg font-semibold text-green-800\">Supplier Details</h3>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"supplierGSTIN\" className=\"text-sm font-medium text-gray-700\">\n                        Supplier GSTIN * <span className=\"text-xs text-green-600\">(auto-fills details)</span>\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        value={supplierGSTIN}\n                        onChange={(e) => handleSupplierGSTINChange(e.target.value)}\n                        placeholder=\"Enter 15-digit supplier GSTIN\"\n                        className=\"w-full\"\n                        maxLength={15}\n                      />\n                      {supplierTradeName && (\n                        <p className=\"text-xs text-green-600 mt-1\">‚úì {supplierTradeName}</p>\n                      )}\n                    </div>\n\n                    {!supplierTradeName && (\n                      <div className=\"border border-yellow-200 bg-yellow-50 p-3 rounded\">\n                        <Label htmlFor=\"supplierTradeName\" className=\"text-sm font-medium text-gray-700\">\n                          Supplier Trade Name *\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          value={supplierTradeName}\n                          onChange={(e) => setSupplierTradeName(e.target.value)}\n                          placeholder=\"Enter supplier trade name\"\n                          className=\"w-full mt-1\"\n                        />\n                      </div>\n                    )}\n\n                    <div>\n                      <Label htmlFor=\"supplierAddress\" className=\"text-sm font-medium text-gray-700\">\n                        Supplier Address *\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        value={supplierAddress}\n                        onChange={(e) => setSupplierAddress(e.target.value)}\n                        placeholder=\"Enter supplier billing address\"\n                        className=\"w-full\"\n                      />\n                    </div>\n\n                    {placeOfSupply && (\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-700\">Place of Supply</Label>\n                        <div className=\"p-2 bg-white border rounded text-sm text-gray-600\">\n                          {placeOfSupply}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Buyer Details - Right Side */}\n                <div className=\"space-y-6 p-6 bg-blue-50 rounded-lg border border-blue-200\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <User className=\"h-5 w-5 text-blue-600\" />\n                    <h3 className=\"text-lg font-semibold text-blue-800\">Buyer Details</h3>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"buyerGSTIN\" className=\"text-sm font-medium text-gray-700\">\n                        Buyer GSTIN * <span className=\"text-xs text-blue-600\">(auto-fills details)</span>\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        value={buyerGSTIN}\n                        onChange={(e) => handleBuyerGSTINChange(e.target.value)}\n                        placeholder=\"Enter 15-digit buyer GSTIN\"\n                        className=\"w-full\"\n                        maxLength={15}\n                      />\n                      {buyerName && (\n                        <p className=\"text-xs text-blue-600 mt-1\">‚úì {buyerName}</p>\n                      )}\n                    </div>\n\n                    {!buyerName && (\n                      <div className=\"border border-yellow-200 bg-yellow-50 p-3 rounded\">\n                        <Label htmlFor=\"buyerName\" className=\"text-sm font-medium text-gray-700\">\n                          Buyer Company Name *\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          value={buyerName}\n                          onChange={(e) => setBuyerName(e.target.value)}\n                          placeholder=\"Enter buyer company name\"\n                          className=\"w-full mt-1\"\n                        />\n                      </div>\n                    )}\n\n                    <div>\n                      <Label htmlFor=\"buyerAddress\" className=\"text-sm font-medium text-gray-700\">\n                        Buyer Address *\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        value={buyerAddress}\n                        onChange={(e) => setBuyerAddress(e.target.value)}\n                        placeholder=\"Enter buyer company address\"\n                        className=\"w-full\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Advanced Options (Collapsible) */}\n              <Collapsible open={showAdvancedOptions} onOpenChange={setShowAdvancedOptions}>\n                <CollapsibleTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full flex items-center justify-center space-x-2\">\n                    {showAdvancedOptions ? (\n                      <>\n                        <ChevronUp className=\"h-4 w-4\" />\n                        <span>Hide Advanced Options</span>\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"h-4 w-4\" />\n                        <span>Show Advanced Options</span>\n                      </>\n                    )}\n                  </Button>\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"space-y-6 mt-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"supplierShipToAddress\" className=\"text-sm font-medium text-gray-700\">\n                        Supplier Ship To Address\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        value={supplierShipToAddress}\n                        onChange={(e) => setSupplierShipToAddress(e.target.value)}\n                        placeholder=\"Leave blank to use supplier address\"\n                        className=\"w-full\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"shipToAddress\" className=\"text-sm font-medium text-gray-700\">\n                        Ship To Address\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        value={shipToAddress}\n                        onChange={(e) => setShipToAddress(e.target.value)}\n                        placeholder=\"Leave blank to use buyer address\"\n                        className=\"w-full\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"placeOfSupply\" className=\"text-sm font-medium text-gray-700\">\n                      Place of Supply\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      value={placeOfSupply}\n                      onChange={(e) => setPlaceOfSupply(e.target.value)}\n                      placeholder=\"Auto-detected from GSTIN\"\n                      className=\"w-full\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"termsAndConditions\" className=\"text-sm font-medium text-gray-700\">\n                      Terms and Conditions\n                    </Label>\n                    <textarea\n                      value={termsAndConditions}\n                      onChange={(e) => setTermsAndConditions(e.target.value)}\n                      placeholder=\"Enter custom terms and conditions\"\n                      rows={3}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </CollapsibleContent>\n              </Collapsible>\n            </div>\n\n            {/* Generate Button */}\n            <div className=\"flex justify-center\">\n              <Button\n                onClick={generateInvoice}\n                disabled={isGenerating}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3\"\n              >\n                {isGenerating ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Generating...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <Receipt className=\"h-5 w-5\" />\n                    <span>Generate GST Invoice</span>\n                  </div>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Generated Invoice Preview */}\n        {generatedInvoice && (\n          <Card className=\"border-2 border-green-200 shadow-xl\">\n            <CardHeader className=\"bg-green-600 text-white rounded-t-lg\">\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Building className=\"h-6 w-6\" />\n                  <span>GST Invoice Preview</span>\n                </div>\n                <Button\n                  onClick={downloadInvoice}\n                  variant=\"outline\"\n                  className=\"bg-white text-green-600 hover:bg-green-50\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download Invoice\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n                {/* Invoice Header */}\n                <div className=\"text-center mb-8\">\n                  <h2 className=\"text-2xl font-bold text-gray-900\">GST INVOICE</h2>\n                  <p className=\"text-gray-600\">Invoice No: {generatedInvoice.invoiceNumber}</p>\n                  <p className=\"text-gray-600\">Date: {new Date(generatedInvoice.invoiceDate).toLocaleDateString()}</p>\n                </div>\n\n                {/* Place of Supply */}\n                {generatedInvoice.placeOfSupply && (\n                  <div className=\"text-center mb-4 p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"font-semibold text-blue-800\">Place of Supply: {generatedInvoice.placeOfSupply}</p>\n                  </div>\n                )}\n\n                {/* Billing Details */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                  <div className=\"border border-gray-300 p-4 rounded-lg\">\n                    <h3 className=\"font-semibold text-gray-900 mb-3 flex items-center border-b border-gray-200 pb-2\">\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Supplier Details (Bill From)\n                    </h3>\n                    <div className=\"space-y-2\">\n                      <p className=\"font-medium\">{generatedInvoice.supplierTradeName || generatedInvoice.supplierName}</p>\n                      {generatedInvoice.supplierAddress && (\n                        <p className=\"text-sm text-gray-700\">{generatedInvoice.supplierAddress}</p>\n                      )}\n                      <p className=\"text-sm text-gray-600\"><strong>GSTIN:</strong> {generatedInvoice.supplierGSTIN}</p>\n                    </div>\n                  </div>\n                  <div className=\"border border-gray-300 p-4 rounded-lg\">\n                    <h3 className=\"font-semibold text-gray-900 mb-3 flex items-center border-b border-gray-200 pb-2\">\n                      <Building className=\"h-4 w-4 mr-2\" />\n                      Buyer Details (Bill To)\n                    </h3>\n                    <div className=\"space-y-2\">\n                      <p className=\"font-medium\">{generatedInvoice.buyerName}</p>\n                      {generatedInvoice.buyerAddress && (\n                        <p className=\"text-sm text-gray-700\">{generatedInvoice.buyerAddress}</p>\n                      )}\n                      <p className=\"text-sm text-gray-600\"><strong>GSTIN:</strong> {generatedInvoice.buyerGSTIN}</p>\n                    </div>\n                  </div>\n                </div>\n\n\n                {/* Invoice Items */}\n                <div className=\"overflow-x-auto mb-6\">\n                  <table className=\"w-full border border-gray-300\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"border border-gray-300 px-4 py-2 text-left\">S.No</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-left\">Product Name</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-left\">HSN</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">Qty</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">Unit Price</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">Amount</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">GST%</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">GST Amount</th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">Total</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {generatedInvoice.items.map((item, index) => (\n                        <tr key={index}>\n                          <td className=\"border border-gray-300 px-4 py-2\">{index + 1}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{item.productName}</td>\n                          <td className=\"border border-gray-300 px-4 py-2\">{item.hsn}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right\">{item.quantity}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right\">‚Çπ{item.unitPrice.toFixed(2)}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right\">‚Çπ{item.amount.toFixed(2)}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right\">{item.gstRate}%</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right\">‚Çπ{item.gstAmount.toFixed(2)}</td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right font-medium\">‚Çπ{item.totalAmount.toFixed(2)}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Totals */}\n                <div className=\"border border-gray-300 p-4 bg-gray-50 mb-6\">\n                  <div className=\"text-right space-y-2\">\n                    <p>Total Amount (Before GST): <span className=\"font-medium\">‚Çπ{generatedInvoice.totalAmountBeforeGST.toFixed(2)}</span></p>\n                    <p>Total GST Amount: <span className=\"font-medium\">‚Çπ{generatedInvoice.totalGSTAmount.toFixed(2)}</span></p>\n                    <p className=\"text-lg font-bold\">Total Amount (After GST): <span className=\"text-green-600\">‚Çπ{generatedInvoice.totalAmountAfterGST.toFixed(2)}</span></p>\n                  </div>\n                </div>\n\n                {/* Terms and Conditions */}\n                {generatedInvoice.termsAndConditions && (\n                  <div className=\"border border-gray-300 p-4 rounded-lg mb-4\">\n                    <h4 className=\"font-semibold text-gray-900 mb-3\">Terms & Conditions:</h4>\n                    <div className=\"space-y-1\">\n                      {generatedInvoice.termsAndConditions.split('\\n').map((term, index) => (\n                        <p key={index} className=\"text-sm text-gray-700\">‚Ä¢ {term}</p>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Computer Generated Notice */}\n                <div className=\"text-center p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <p className=\"text-sm font-medium text-yellow-800 italic\">\n                    This is a computer generated invoice, no signature required.\n                  </p>\n                  <p className=\"text-xs text-yellow-600 mt-1\">\n                    Generated on: {new Date().toLocaleString()}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n    );\n  }\n","size_bytes":65616},"client/src/components/processing-progress.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Clock, Database, AlertTriangle } from \"lucide-react\";\n\ninterface ProcessingProgressProps {\n  fileId: string;\n  onComplete?: (success: boolean, errorMessage?: string) => void;\n  onCancel?: () => void;\n}\n\ninterface ProgressData {\n  status: 'processing' | 'completed' | 'error';\n  currentBatch: number;\n  totalBatches: number;\n  totalRecords: number;\n  processedRecords: number;\n  percentage: number;\n  message: string;\n  errorMessage?: string;\n}\n\nexport function ProcessingProgress({ fileId, onComplete, onCancel }: ProcessingProgressProps) {\n  const [progress, setProgress] = useState<ProgressData | null>(null);\n  const [isPolling, setIsPolling] = useState(true);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    const pollProgress = async () => {\n      try {\n        const response = await fetch(`/api/files/${fileId}/progress`);\n        if (response.ok) {\n          const progressData = await response.json();\n          setProgress(progressData);\n          \n          if (progressData.status === 'completed') {\n            setIsPolling(false);\n            onComplete?.(true);\n          } else if (progressData.status === 'error') {\n            setIsPolling(false);\n            onComplete?.(false, progressData.errorMessage || progressData.message);\n          }\n        } else if (response.status === 404) {\n          // Progress not found, stop polling\n          setIsPolling(false);\n          onComplete?.(false);\n        }\n      } catch (error) {\n        console.error('Failed to fetch progress:', error);\n      }\n    };\n\n    if (isPolling) {\n      // Poll immediately, then every 1 second\n      pollProgress();\n      intervalId = setInterval(pollProgress, 1000);\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [fileId, isPolling, onComplete]);\n\n  if (!progress) {\n    return (\n      <Card className=\"border-2 border-blue-200 shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-3 text-blue-700\">\n            <Clock className=\"h-6 w-6 animate-spin\" />\n            <span>Preparing to Process...</span>\n          </CardTitle>\n          <CardDescription>\n            Setting up data processing pipeline\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Progress value={0} className=\"w-full h-3\" />\n          <p className=\"text-sm text-gray-600 mt-2\">Initializing...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusIcon = () => {\n    switch (progress.status) {\n      case 'processing':\n        return <Database className=\"h-6 w-6 animate-pulse text-blue-600\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-6 w-6 text-green-600\" />;\n      case 'error':\n        return <AlertTriangle className=\"h-6 w-6 text-red-600\" />;\n      default:\n        return <Clock className=\"h-6 w-6 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (progress.status) {\n      case 'processing':\n        return 'border-blue-200 bg-blue-50';\n      case 'completed':\n        return 'border-green-200 bg-green-50';\n      case 'error':\n        return 'border-red-200 bg-red-50';\n      default:\n        return 'border-gray-200 bg-gray-50';\n    }\n  };\n\n  const getProgressColor = () => {\n    switch (progress.status) {\n      case 'processing':\n        return 'bg-blue-600';\n      case 'completed':\n        return 'bg-green-600';\n      case 'error':\n        return 'bg-red-600';\n      default:\n        return 'bg-gray-600';\n    }\n  };\n\n  return (\n    <Card className={`border-2 shadow-lg ${getStatusColor()}`}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {getStatusIcon()}\n            <span className={progress.status === 'completed' ? 'text-green-700' : \n                           progress.status === 'error' ? 'text-red-700' : 'text-blue-700'}>\n              {progress.status === 'processing' ? 'Processing Data...' : \n               progress.status === 'completed' ? 'Processing Complete!' : 'Processing Failed'}\n            </span>\n          </div>\n          {progress.status === 'processing' && onCancel && (\n            <Button variant=\"outline\" size=\"sm\" onClick={onCancel}>\n              Cancel\n            </Button>\n          )}\n        </CardTitle>\n        <CardDescription>\n          {progress.status === 'processing' ? \n            `Processing ${progress.totalRecords.toLocaleString()} records in batches` :\n           progress.status === 'completed' ?\n            `Successfully processed ${progress.totalRecords.toLocaleString()} records` :\n            'An error occurred during processing'\n          }\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Progress Bar */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"font-medium\">Progress</span>\n            <span className={`font-bold ${progress.status === 'completed' ? 'text-green-600' : \n                                         progress.status === 'error' ? 'text-red-600' : 'text-blue-600'}`}>\n              {progress.percentage}%\n            </span>\n          </div>\n          <Progress \n            value={progress.percentage} \n            className=\"w-full h-4\" \n          />\n          <style jsx>{`\n            .progress-bar {\n              background-color: ${getProgressColor()};\n            }\n          `}</style>\n        </div>\n\n        {/* Progress Details */}\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"space-y-1\">\n            <div className=\"text-gray-600\">Current Batch</div>\n            <div className=\"font-semibold\">\n              {progress.currentBatch} / {progress.totalBatches}\n            </div>\n          </div>\n          <div className=\"space-y-1\">\n            <div className=\"text-gray-600\">Records Processed</div>\n            <div className=\"font-semibold\">\n              {progress.processedRecords.toLocaleString()} / {progress.totalRecords.toLocaleString()}\n            </div>\n          </div>\n        </div>\n\n        {/* Status Message */}\n        <div className=\"p-3 rounded-lg bg-white border border-gray-200\">\n          <div className=\"text-sm text-gray-700\">\n            <strong>Status:</strong> {progress.message}\n          </div>\n        </div>\n\n        {/* Estimated Time (only show during processing) */}\n        {progress.status === 'processing' && progress.percentage > 0 && (\n          <div className=\"text-xs text-gray-500 text-center\">\n            Processing large datasets... This may take several minutes\n          </div>\n        )}\n\n        {/* Success Message */}\n        {progress.status === 'completed' && (\n          <div className=\"p-3 rounded-lg bg-green-100 border border-green-200\">\n            <div className=\"text-sm text-green-800 flex items-center space-x-2\">\n              <CheckCircle className=\"h-4 w-4\" />\n              <span>Data processing completed successfully! You can now view your data in the dashboard.</span>\n            </div>\n          </div>\n        )}\n\n        {/* Error Message */}\n        {progress.status === 'error' && (\n          <div className=\"p-3 rounded-lg bg-red-100 border border-red-200\">\n            <div className=\"text-sm text-red-800 flex items-center space-x-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span>Processing failed. Please check your file format and try again.</span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7878},"debug-supplier.js":{"content":"// Debug script to analyze TRENDYKART NEW supplier issue\nimport fetch from 'node-fetch';\n\nasync function debugSupplier() {\n  try {\n    console.log('üîç Fetching all suppliers...');\n    const suppliersResponse = await fetch('http://localhost:5000/api/suppliers');\n    const suppliers = await suppliersResponse.json();\n    \n    const trendykart = suppliers.find(s => s.name && s.name.includes('TRENDYKART'));\n    console.log('üìä TRENDYKART Supplier:', JSON.stringify(trendykart, null, 2));\n    \n    console.log('\\nüîç Fetching all orders...');\n    const ordersResponse = await fetch('http://localhost:5000/api/orders');\n    const orders = await ordersResponse.json();\n    \n    if (trendykart) {\n      const supplierOrders = orders.filter(o => o.supplierId === trendykart.id);\n      console.log(`üìä Total orders for TRENDYKART: ${supplierOrders.length}`);\n      \n      const deliveredOrders = supplierOrders.filter(o => \n        o.status === 'Delivered' || o.status === 'Completed'\n      );\n      console.log(`üìä Delivered orders for TRENDYKART: ${deliveredOrders.length}`);\n      \n      // Check date range filtering (2025-08-15 to 2025-08-23)\n      const dateFrom = new Date('2025-08-15');\n      const dateTo = new Date('2025-08-23');\n      dateTo.setHours(23, 59, 59, 999);\n      \n      const ordersInRange = deliveredOrders.filter(o => {\n        const deliveredDate = new Date(o.deliveredDate);\n        return !isNaN(deliveredDate.getTime()) && \n               deliveredDate >= dateFrom && \n               deliveredDate <= dateTo;\n      });\n      \n      console.log(`üìä Delivered orders in range (2025-08-15 to 2025-08-23): ${ordersInRange.length}`);\n      \n      if (ordersInRange.length > 0) {\n        console.log('\\nüìã Sample orders in range:');\n        ordersInRange.slice(0, 3).forEach((order, i) => {\n          console.log(`  ${i+1}. AWB: ${order.awbNo}, Status: ${order.status}, Product: ${order.productName}, Qty: ${order.deliveredQty || order.qty}`);\n        });\n        \n        // Check price entries for this supplier\n        console.log('\\nüîç Fetching price entries...');\n        const priceResponse = await fetch('http://localhost:5000/api/price-entries');\n        const priceEntries = await priceResponse.json();\n        \n        const supplierPriceEntries = priceEntries.filter(entry => entry.supplierId === trendykart.id);\n        console.log(`üìä Price entries for TRENDYKART: ${supplierPriceEntries.length}`);\n        \n        if (supplierPriceEntries.length > 0) {\n          console.log('üìã Sample price entries:');\n          supplierPriceEntries.slice(0, 3).forEach((entry, i) => {\n            console.log(`  ${i+1}. Product: ${entry.productName}, Price: ‚Çπ${entry.price}, GST: ${entry.gstRate}%`);\n          });\n          \n          // Check if any orders have matching price entries\n          const uniqueProducts = [...new Set(ordersInRange.map(o => o.productName))];\n          console.log(`\\nüìã Unique products in orders: ${uniqueProducts.length}`);\n          \n          let matchingPrices = 0;\n          uniqueProducts.slice(0, 5).forEach(product => {\n            const priceEntry = supplierPriceEntries.find(entry => entry.productName === product);\n            console.log(`  Product: ${product}, Has Price: ${priceEntry ? `‚Çπ${priceEntry.price}` : 'NO'}`);\n            if (priceEntry) matchingPrices++;\n          });\n          \n          console.log(`üìä Products with matching prices: ${matchingPrices}/${Math.min(uniqueProducts.length, 5)} (sample)`);\n        } else {\n          console.log('‚ùå No price entries found for TRENDYKART - this is the issue!');\n        }\n      } else {\n        console.log('üìã Checking available delivery dates for TRENDYKART:');\n        deliveredOrders.slice(0, 5).forEach((order, i) => {\n          console.log(`  ${i+1}. AWB: ${order.awbNo}, Status: ${order.status}, Delivered: ${order.deliveredDate}`);\n        });\n      }\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Debug error:', error);\n  }\n}\n\ndebugSupplier();","size_bytes":4011}},"version":1}